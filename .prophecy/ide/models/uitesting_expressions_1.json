{
  "id" : "uitesting_expressions_1",
  "metainfo" : {
    "label" : "uitesting_expressions_1",
    "autoLayout" : false,
    "staleState" : "none",
    "sourceSuggestions" : {
      "sources" : [ ]
    },
    "graphConfig" : {
      "userDefinedConfig" : {
        "vars" : { }
      }
    },
    "version" : 3
  },
  "processes" : {
    "SQLStatementTest34##RO88gd6S" : {
      "id" : "SQLStatementTest34##RO88gd6S",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest34",
        "x" : 580,
        "y" : 6880,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL),\n  (xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL),\n  (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2) AS col117,\n  (xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 3),\n  (xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2),\n  (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2),\n  (xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c') != NULL),\n  (\n    assert_true(\n      0 < 1) == NULL\n  ) AS col10,\n  (\n    (\n      CASE\n        WHEN 1 > 0\n          THEN 1\n        WHEN 2 > 0\n          THEN 2.0\n        ELSE 1.2\n      END\n    ) == 1\n  ) AS col9,\n  (\n    (\n      CASE 3\n        WHEN 1\n          THEN 'A'\n        WHEN 2\n          THEN 'B'\n        WHEN 3\n          THEN 'C'\n      END\n    ) != NULL\n  ) AS col8,\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "NADMBMBG",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "tQ6GHBjc",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (xpath_double(<a><b>1</b><b>2</b></a>, sum(a/b)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xpath_float(<a><b>1</b><b>2</b></a>, sum(a/b)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col117",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(xpath_long(<a><b>1</b><b>2</b></a>, sum(a/b)) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(xpath_number(<a><b>1</b><b>2</b></a>, sum(a/b)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(xpath_int(<a><b>1</b><b>2</b></a>, sum(a/b)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xpath_string(<a><b>b</b><c>cc</c></a>, a/c) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col10",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col9",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col8",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest2##ShRwqZql" : {
      "id" : "SQLStatementTest2##ShRwqZql",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest2",
        "x" : 580,
        "y" : 480,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  isnull(51),\n  ('t' IS NOT true) AS c46,\n  (1 <=> '1'),\n  (1 <> CAST(c_int AS int)),\n  (10 - 2 + 10 == 8),\n  (NOT true),\n  (false or true),\n  (2 % 0 == 0),\n  ('Spark' || 'SQL' == 'SparkSQL'),\n  (r'%SystemDrive%\\Users\\John' LIKE r'%System23Drive%\\\\Users%'),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "O4QRMhaH",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "TVTyaLaS",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(51 IS NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c46",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(1 <=> 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (1 = CAST(c_int AS INT)))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(((10 - 2) + 10) = 8)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT true)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(false OR true)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((2 % 0) = 0)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(concat(Spark, SQL) = SparkSQL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "%SystemDrive%\\Users\\John LIKE %System23Drive%\\\\Users%",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest10##JG1Z8L2x" : {
      "id" : "SQLStatementTest10##JG1Z8L2x",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest10",
        "x" : 580,
        "y" : 2080,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (substr('Spark SQL', 5, 1) != NULL),\n  (substring_index('www.apache.org', '.', 2) != NULL),\n  (CAST(to_binary('537061726B') AS STRING) != NULL),\n  (CAST(to_binary('537061726B', 'hex') AS STRING) != NULL),\n  (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL) AS col50,\n  (translate('AaBbCc', 'abc', '123') != NULL),\n  (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL),\n  (ucase('SparkSql') != NULL),\n  (CAST(unbase64('U3BhcmsgU1FM') AS STRING) != NULL),\n  (decode(unhex('537061726B2053514C'), 'UTF-8') != NULL),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "UremWDA6",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "ePOFbVLJ",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (substr(Spark SQL, 5, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substring_index(www.apache.org, ., 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(to_binary(537061726B) AS STRING) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(to_binary(537061726B, hex) AS STRING) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col50",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (translate(AaBbCc, abc, 123) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(try_to_binary(U3Bhxcms=, base64) AS STRING) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (ucase(SparkSql) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(unbase64(U3BhcmsgU1FM) AS STRING) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (decode(unhex(537061726B2053514C), UTF-8) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest7##RhcjsFYL" : {
      "id" : "SQLStatementTest7##RhcjsFYL",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest7",
        "x" : 580,
        "y" : 1480,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (md5('Spark') != NULL),\n  (octet_length('Spark SQL') != NULL),\n  (parse_url('http://spark.apache.org/path?query=1', 'HOST') != NULL),\n  (position('bar', 'abcbarbar') > 10),\n  (position('bar', 'abcbarbar', 5) > 5),\n  (printf('Hello World %d %s', 100, 'days') != NULL),\n  (r'%SystemDarive%\\Users\\John' RLIKE r'%SystemDrive%\\\\Users.*'),\n  (r'%System1Drive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*'),\n  (regexp_like('%SystemDa1rive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*')),\n  (regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) > 10),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "KbxBfzXH",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "u5NTCzR4",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (md5(Spark) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (octet_length(Spark SQL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (parse_url(http://spark.apache.org/path?query=1, HOST) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(position(bar, abcbarbar, 1) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(position(bar, abcbarbar, 5) > 5)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (printf(Hello World %d %s, 100, days) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "RLIKE(%SystemDarive%\\Users\\John, %SystemDrive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "RLIKE(%System1Drive%\\Users\\John, %SystemDrive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "REGEXP_LIKE(%SystemDa1rive%\\Users\\John, %SystemDrive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(regexp_extract(100-200, (\\d+)-(\\d+), 1) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest11##zG7TuT5e" : {
      "id" : "SQLStatementTest11##zG7TuT5e",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest11",
        "x" : 580,
        "y" : 2280,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (upper('SparkSql')),\n  (10 / 2 == 5) AS d9,\n  ((3 | 5) == 2),\n  ((DATE'2021-03-20' - INTERVAL '2' MONTH)),\n  (10 - 2 + 2 == 4),\n  (2 % 1.8 == 2),\n  (3 ^ 5 == 3),\n  (3 & 5 == 2),\n  (3 * 2 == 2),\n  ((INTERVAL '3' YEAR * 3)),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "Z1TOJ6fM",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "AZNxIxUj",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "upper(SparkSql)",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "d9",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 | 5) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "DATE '2021-03-20' - INTERVAL '2' MONTH",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "(((10 - 2) + 2) = 4)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((2 % 1.8) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 ^ 5) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 & 5) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 * 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(INTERVAL '3' YEAR * 3)",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest22##i4EcSdRu" : {
      "id" : "SQLStatementTest22##i4EcSdRu",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest22",
        "x" : 580,
        "y" : 4480,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (reverse(array(2, 1, 4, 3)) != NULL),\n  (sequence(5, 1) != NULL),\n  (cardinality(array('b', 'd', 'c', 'a')) == 10),\n  (slice(array(1, 2, 3, 4), 2, 2) != NULL),\n  (sort_array(array('b', 'd', NULL, 'c', 'a'), true) != NULL),\n  (\n    transform(array(1, 2, 3), \n    x -> x + 1) != NULL\n  ) AS col16,\n  (try_element_at(array(1, 2, 3), 2) == 2),\n  (\n    zip_with(array('a', 'b', 'c'), array('d', 'e', 'f'), \n    (x, y) -> concat(x, y)) != NULL\n  ) AS col15,\n  (map(1, 'Hello', 2, 'World')[1] != NULL),\n  (cardinality(map('a', 1, 'b', 2)) == 2) AS col67,\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "tiILjX0a",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "tRyETv88",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (reverse(array(2, 1, 4, 3)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sequence(5, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(cardinality(array(b, d, c, a)) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (slice(array(1, 2, 3, 4), 2, 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sort_array(array(b, d, NULL, c, a), true) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col16",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_element_at(array(1, 2, 3), 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (map(1, Hello, 2, World)[1] = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col67",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest17##KHQJjoRH" : {
      "id" : "SQLStatementTest17##KHQJjoRH",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest17",
        "x" : 580,
        "y" : 3480,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (rint(12.3456) == 1),\n  (round(2.5, 0) == 3),\n  (sec(pi()) == -1),\n  (sin(0) == 0),\n  (shiftleft(2, 1) == 2),\n  (shiftright(4, 1) == 2),\n  (shiftrightunsigned(4, 1) == 2),\n  (sign(40) == 1),\n  (signum(40) == 1),\n  (sinh(0) == 1),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "bFzAqj9m",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "Ee7Vt0Nr",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(rint(12.3456) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(round(2.5, 0) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SEC(PI()) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SIN(0) = 0)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(shiftleft(2, 1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(shiftright(4, 1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(shiftrightunsigned(4, 1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(sign(40) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SIGNUM(40) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SINH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest4##CJgUD1F8" : {
      "id" : "SQLStatementTest4##CJgUD1F8",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest4",
        "x" : 580,
        "y" : 880,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (btrim('abcaabaSparkSQLabcaaba', 'abc') != NULL),\n  (char(65) != NULL),\n  (char_length('Spark SQL ') == 10),\n  (character_length('Spark SQL ') == 10),\n  (concat(c_int, 'hello') != NULL),\n  (concat_ws(',', 'Spark', array('S', 'Q', NULL, 'L'), NULL) != NULL),\n  contains('SparkSQL', 'Spork'),\n  (crc32('Spark') > 0),\n  chr(65) != NULL,\n  (3 ^ 5 == 6),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "iv6624BE",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "Bhj561Fx",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (btrim(abcaabaSparkSQLabcaaba, abc) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (char(65) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(char_length(Spark SQL ) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(character_length(Spark SQL ) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(c_int, hello) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat_ws(,, Spark, array(S, Q, NULL, L), NULL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "contains(SparkSQL, Spork)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(crc32(Spark) > 0)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (chr(65) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 ^ 5) = 6)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest37##W0OMphgR" : {
      "id" : "SQLStatementTest37##W0OMphgR",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest37",
        "x" : 580,
        "y" : 7480,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (uuid() != NULL),\n  (xxhash64('Spark', array(123), 2) != NULL),\n  ('20'::INTEGER == 20),\n  like('Spark', '_park') AS d866,\n  ('Spark' LIKE SOME('_park', '_ock')) AS d889,\n  (bitmap_count(x'00') == 10),\n  (charindex('bar', 'abcbarbar') == 1),\n  (decode(x'FEFF0053007000610072006B002000530051004C', 'UTF-16') != NULL),\n  (like('Spark', '_park')) AS d8123,\n  (len('Spark SQL ') > 10),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "S3ie2nI4",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "E8A0m4wi",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (uuid() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xxhash64(Spark, array(123), 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CAST(20 AS INT) = 20)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d866",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d889",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bitmap_count(X'00') = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(charindex(bar, abcbarbar, 1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (decode(X'FEFF0053007000610072006B002000530051004C', UTF-16) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d8123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(len(Spark SQL ) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest14##MCnSYlxy" : {
      "id" : "SQLStatementTest14##MCnSYlxy",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest14",
        "x" : 580,
        "y" : 2880,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (cosh(0) == 1),\n  (cot(1) == 1),\n  (csc(pi() / 2) == 2),\n  (decimal('5.2') == 5) AS d10,\n  (degrees(3.141592653589793) == 10),\n  (double('5.2') == 4),\n  (e() == 2),\n  (exp(1) == 2),\n  (expm1(0) == 1),\n  (factorial(2) == 2),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "UGEInmEs",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "GmiZkimL",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(COSH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(COT(1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CSC((PI() / 2)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d10",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(DEGREES(3.141592653589793) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(5.2 = 4)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(E() = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(EXP(1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(EXPM1(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(factorial(2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest41##s51MCGSQ" : {
      "id" : "SQLStatementTest41##s51MCGSQ",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest41",
        "x" : 580,
        "y" : 8280,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  ((TIMESTAMP'2021-03-20 12:15:29' + INTERVAL '3' SECOND) != NULL) AS col156781254,\n  (bit_reverse(-1) == -1),\n  (bitmap_bit_position(-32768) == 1),\n  (bitmap_bucket_number(-32768) == 1),\n  (MOD(2, 1.8) == 2),\n  (array_append(array(1, 2, 3), 0) == NULL),\n  (array_compact(array(1, 2, NULL, 3, NULL, 3)) == NULL),\n  (array_insert(array('a', 'b', 'c'), 1, 'z') != NULL),\n  (array_prepend(array(1, 2, 3), 0) != NULL),\n  (get(array(1, 2, 3), 2) != NULL),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "GmJZn8Q6",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "m9oSWaVn",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "col156781254",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bit_reverse(-1) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bitmap_bit_position(-32768) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bitmap_bucket_number(-32768) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(mod(2, 1.8) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_append(array(1, 2, 3), 0) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_compact(array(1, 2, NULL, 3, NULL, 3)) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_insert(array(a, b, c), 1, z) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_prepend(array(1, 2, 3), 0) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (get(array(1, 2, 3), 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest45##iE7H8z8s" : {
      "id" : "SQLStatementTest45##iE7H8z8s",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest45",
        "x" : 580,
        "y" : 9080,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (schema_of_xml('<p><a attr=\"2\">1</a><a>3</a></p>', map('excludeAttribute', 'true')) IS NOT NULL),\n  (current_metastore() != NULL),\n  (current_schema() != NULL),\n  (current_version() != NULL),\n  (equal_null(2, 2)),\n  (\n    iff(\n      1 < 2, \n      'a', \n      'b') == 'a'\n  ) AS col4,\n  (is_account_group_member('admins')),\n  (is_member('admins')) AS cold1d1,\n  (luhn_check('12345') == NULL) AS cold13412asd,\n  (user() != NULL) AS cold13423423,\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "VgQSTBZT",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "i70DQ8Ri",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(schema_of_xml(<p><a attr=\"2\">1</a><a>3</a></p>) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (aws:us-west-1:3fa0cd4e-bf05-4fde-894d-9dc222ae0419 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_schema() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_version() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "equal_null(2, 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col4",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "is_account_group_member(admins)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1d1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold13412asd",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold13423423",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest0##ZEVdWbsA" : {
      "id" : "SQLStatementTest0##ZEVdWbsA",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest0",
        "x" : 580,
        "y" : 80,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  CAST(c_int AS int) > 5,\n  CAST(c_int AS int) != 0,\n  c_string LIKE '%A%',\n  ((1 & 1) == 1),\n  ((2 | 2) == 2),\n  10 * CAST(c_int AS int) == 20,\n  'test' != c_string,\n  (CAST(c_int AS int) BETWEEN 10 and 20),\n  (array(10, 20, 30)[2] == 30),\n  (map(1, 'Hello', 2, 'World')[1] == 'Hello'),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "Ep2pBrvV",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "aqNxLI9c",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(CAST(c_int AS INT) > 5)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(c_int AS INT) = 0))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_string LIKE %A%",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((1 & 1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((2 | 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((10 * CAST(c_int AS INT)) = 20)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (test = c_string))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((CAST(c_int AS INT) >= 10) AND (CAST(c_int AS INT) <= 20))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array(10, 20, 30)[2] = 30)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map(1, Hello, 2, World)[1] = Hello)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest44##BUbjbQcn" : {
      "id" : "SQLStatementTest44##BUbjbQcn",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest44",
        "x" : 580,
        "y" : 8880,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (make_interval(100, 11) IS NOT NULL),\n  (make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL),\n  (string(5) != NULL),\n  (to_char(454, '000.00') != NULL),\n  (to_varchar(454, '999') IS NOT NULL),\n  (from_json('{\"a\":1, \"b\":0.8}', 'a INT, b DOUBLE') IS NOT NULL),\n  (get_json_object('{\"a\":\"b\"}', '$.a') IS NOT NULL),\n  (to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), map('timestampFormat', 'dd/MM/yyyy')) IS NOT NULL),\n  (to_csv(named_struct('a', 1, 'b', 2)) IS NOT NULL),\n  (from_xml('<p><time>26/08/2015</time></p>', 'time Timestamp', map('timestampFormat', 'dd/MM/yyyy')) != NULL),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "F0fJhZeK",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "YjIk17f9",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(make_interval(100, 11, 0, 0, 0, 0, 0.000000) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (5 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_char(454, 000.00) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(to_char(454, 999) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(from_json({\"a\":1, \"b\":0.8}) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(get_json_object({\"a\":\"b\"}, $.a) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(to_csv(named_struct(time, to_timestamp(2015-08-26, yyyy-MM-dd))) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(to_csv(named_struct(a, 1, b, 2)) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (from_xml(<p><time>26/08/2015</time></p>) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest39##MVyMJJ3C" : {
      "id" : "SQLStatementTest39##MVyMJJ3C",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest39",
        "x" : 580,
        "y" : 7880,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (regexp_instr('Mary had a little lamb', NULL) != NULL),\n  (regexp_substr(NULL, 'Ste(v|ph)en') != NULL),\n  (rtrim('ab', 'SparkSQLabcaaba') != NULL),\n  (string(4) != NULL),\n  (substr('Spark SQL', -3) != NULL),\n  (substr('Spark SQL' FROM 5 FOR 1) != NULL),\n  (substr('Spark SQL' FROM -3) != NULL),\n  (to_char(DATE'2016-04-08', 'y') != NULL) AS col11112,\n  (to_char(encode('abc', 'utf-8'), 'utf-8') != NULL),\n  (to_varchar(454, '999') != NULL),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "nVNwFck5",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "oP065l61",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (regexp_instr(Mary had a little lamb, NULL, 0) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (regexp_substr(NULL, Ste(v|ph)en) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (TRIM(TRAILING ab FROM SparkSQLabcaaba) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (4 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substr(Spark SQL, -3, 2147483647) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substring(Spark SQL, 5, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substring(Spark SQL, -3, 2147483647) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col11112",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (decode(encode(abc, utf-8), utf-8) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_char(454, 999) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest30##o3fe8rRj" : {
      "id" : "SQLStatementTest30##o3fe8rRj",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest30",
        "x" : 580,
        "y" : 6080,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (unix_micros(TIMESTAMP('1970-01-01 00:00:01Z'))),\n  (unix_millis(TIMESTAMP('1970-01-01 00:00:01Z'))),\n  (unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z'))),\n  (unix_timestamp('2016-04-08', 'yyyy-MM-dd')) AS col1123423,\n  (weekday(DATE'2009-07-30') == 1),\n  (EXTRACT(DAYOFWEEK_ISO FROM DATE'2009-07-30') == 4),\n  (weekofyear('2008-02-20') == 8),\n  (year('2016-07-30') == 2016) AS col122121rtyr,\n  (array(1, 2, 3)),\n  (bigint('5') == 5) AS d3,\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "JU4tj6VG",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "yXFQYZLS",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "unix_micros(1970-01-01 00:00:01Z)",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "unix_millis(1970-01-01 00:00:01Z)",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "unix_seconds(1970-01-01 00:00:01Z)",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "col1123423",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "(weekday(DATE '2009-07-30') = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(extract(DAYOFWEEK_ISO FROM DATE '2009-07-30') = 4)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(weekofyear(2008-02-20) = 8)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121rtyr",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "array(1, 2, 3)",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Integer"
                }
              }
            }, {
              "name" : "d3",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest25##b2k2PSEM" : {
      "id" : "SQLStatementTest25##b2k2PSEM",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest25",
        "x" : 580,
        "y" : 5080,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  ((INTERVAL '3' YEAR * 3)) AS col100,\n  (add_months('2016-08-31', -6) != NULL),\n  (current_date() != NULL),\n  (current_timestamp()),\n  (current_timezone()),\n  (date('2021-03-21') != NULL) AS col112,\n  (date_add('2016-07-30', 1)) AS col122121d,\n  (date_format('2016-04-08', 'y') == 2016) AS col122121,\n  (date_from_unix_date(1)),\n  (date_sub('2016-07-30', 1)) AS col122121gh,\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "Qn8qEvCM",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "UCOIeABU",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "col100",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "(NOT (add_months(2016-08-31, -6) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_date() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "current_timestamp()",
              "dataType" : {
                "type" : "Timestamp"
              }
            }, {
              "name" : "current_timezone()",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "col112",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121d",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "col122121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "date_from_unix_date(1)",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "col122121gh",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest23##WLpbAp0w" : {
      "id" : "SQLStatementTest23##WLpbAp0w",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest23",
        "x" : 580,
        "y" : 4680,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (element_at(map(1, 'a', 2, 'b'), 3) == NULL),\n  (map(1.0, '2', 3.0, '4')),\n  (map_concat(map(1, 'a', 2, 'b'), map(3, 'c'))),\n  (map_contains_key(map(1, 'a', 2, 'b'), 2)) AS col122,\n  (map_entries(map(1, 'a', 2, 'b'))),\n  (\n    map_filter(map(1, 0, 2, 2, 3, -1), \n    (k, v) -> k > v) IS NOT NULL\n  ) AS col14,\n  (map_from_arrays(array(1.0, 3.0), array('2', '4')) IS NOT NULL),\n  (map_from_entries(array(struct(1, 'a'), struct(2, 'b')))),\n  (map_keys(map(1, 'a', 2, 'b')) ),\n  (map_values(map(1, 'a', 2, 'b'))),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "hklBQgl0",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "Aju7r9Sm",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(element_at(map(1, a, 2, b), 3) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "map(1.0, 2, 3.0, 4)",
              "dataType" : {
                "type" : "Map",
                "keyType" : {
                  "type" : "Decimal"
                },
                "valueType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "map_concat(map(1, a, 2, b), map(3, c))",
              "dataType" : {
                "type" : "Map",
                "keyType" : {
                  "type" : "Integer"
                },
                "valueType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "col122",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "map_entries(map(1, a, 2, b))",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Struct",
                  "fields" : [ {
                    "name" : "key",
                    "dataType" : {
                      "type" : "Integer"
                    }
                  }, {
                    "name" : "value",
                    "dataType" : {
                      "type" : "String"
                    }
                  } ]
                }
              }
            }, {
              "name" : "col14",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map_from_arrays(array(1.0, 3.0), array(2, 4)) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "map_from_entries(array(struct(1, a), struct(2, b)))",
              "dataType" : {
                "type" : "Map",
                "keyType" : {
                  "type" : "Integer"
                },
                "valueType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "map_keys(map(1, a, 2, b))",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Integer"
                }
              }
            }, {
              "name" : "map_values(map(1, a, 2, b))",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest19##P5LMSwNP" : {
      "id" : "SQLStatementTest19##P5LMSwNP",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest19",
        "x" : 580,
        "y" : 3880,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL) AS col111,\n  (try_subtract(-128Y, 1Y) != NULL),\n  (width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2) == 3),\n  (width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) == 10),\n  (array(10, 20, 30) != NULL),\n  (\n    (\n      aggregate(array(1, 2, 3), 0, \n      (acc, x) -> acc + x, \n      acc -> acc * 10)\n    ) == 1\n  ) AS col21,\n  (array_contains(array(1, 2, 3), 2)),\n  (array_distinct(array(1, 2, 3, NULL, 3)) != NULL),\n  (array_except(array(1, 2, 2, 3), array(1, 1, 3, 5)) != NULL),\n  (array_intersect(array(1, 2, 3), array(1, 3, 3, 5)) != NULL),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "eqObdgh1",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "jjlq4X6i",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "col111",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_subtract(-128, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2)) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array(10, 20, 30) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col21",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "array_contains(array(1, 2, 3), 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_distinct(array(1, 2, 3, NULL, 3)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_except(array(1, 2, 2, 3), array(1, 1, 3, 5)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_intersect(array(1, 2, 3), array(1, 3, 3, 5)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "uitesting_expressions_1##jBl2bp6o" : {
      "id" : "uitesting_expressions_1##jBl2bp6o",
      "component" : "TargetModel",
      "metadata" : {
        "label" : "uitesting_expressions_1",
        "x" : 3480,
        "y" : 4780,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "customQueryDisabled" : true,
        "customQuery" : false,
        "incrementalEditorDisabled" : true,
        "query" : "SELECT * \n\nFROM SQLStatement_2\n",
        "incrementalKey" : false,
        "incremental" : {
          "expression" : "true"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "NBf69ztB",
          "slug" : "SQLStatement_2"
        } ],
        "outputs" : [ {
          "id" : "FiKCfN9y",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest32##RRWG4otj" : {
      "id" : "SQLStatementTest32##RRWG4otj",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest32",
        "x" : 580,
        "y" : 6480,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (make_dt_interval(100, 13) != NULL),\n  (make_ym_interval(100, 5) == NULL),\n  (map(1.0, '2', 3.0, '4') IS NOT NULL) AS col113,\n  (named_struct('a', 1, 'b', 2, 'c', 3) IS NOT NULL),\n  (smallint('5') == 5) AS d5,\n  (struct(1, 2, 3) IS NOT NULL),\n  (tinyint('12') == 12),\n  (timestamp('2020-04-30 12:25:13.45') != NULL) AS col114,\n  (to_date('2016-12-31', 'yyyy-MM-dd') != NULL) AS col115,\n  (to_timestamp('2016-12-31 00:12:00') != NULL),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "pTI4sXcX",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "BbX4iJxI",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (make_dt_interval(100, 13, 0, 0.000000) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_ym_interval(100, 5) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col113",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(named_struct(a, 1, b, 2, c, 3) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d5",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(struct(1, 2, 3) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(12 = 12)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col114",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col115",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_timestamp(2016-12-31 00:12:00) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest3##rOwqjmto" : {
      "id" : "SQLStatementTest3##rOwqjmto",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest3",
        "x" : 580,
        "y" : 680,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (r'%SystemDr12ive%\\Users\\John' RLIKE '%System23Drive%\\\\\\\\Users.*'),\n  (regexp_like('%Syst2emDrive%\\\\Users\\\\John', '%SystemD545rive%\\\\\\\\Users.*')),\n  (2L / 2L == 10),\n  (~ 0 == -1),\n  (base64(aes_encrypt('Spark', 'abcdefghijklmnop')) == NULL),\n  (CAST(aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop') AS STRING) == NULL),\n  (ascii('234') == 234),\n  (base64('Spark SQL') == NULL),\n  (bin(13) == NULL),\n  (binary('Spark SQL') == NULL),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "A3LAHvMz",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "SutUkcxK",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "RLIKE(%SystemDr12ive%\\Users\\John, %System23Drive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "REGEXP_LIKE(%Syst2emDrive%\\Users\\John, %SystemD545rive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((2 / 2) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(~0 = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(base64(aes_encrypt(Spark, abcdefghijklmnop, GCM, DEFAULT, , )) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CAST(aes_decrypt(unbase64(4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn), abcdefghijklmnop, GCM, DEFAULT, ) AS STRING) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ascii(234) = 234)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(base64(Spark SQL) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bin(13) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(Spark SQL = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatement_2##APZz1vH1" : {
      "id" : "SQLStatement_2##APZz1vH1",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_2",
        "x" : 2220,
        "y" : 4260,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT *\n\nFROM ALL_TYPE_TABLE AS t_main\n\nWHERE t_main.c_int != (\n        (\n          SELECT count(*)\n          \n          FROM SQLStatementTest0\n         )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest1\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest2\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest3\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest4\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest5\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest6\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest7\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest8\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest9\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest10\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest11\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest12\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest13\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest14\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest15\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest16\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest17\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest18\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest19\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest20\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest21\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest22\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest23\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest24\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest25\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest26\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest27\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest28\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest29\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest30\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest31\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest32\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest33\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest34\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest35\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest36\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest37\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest38\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest39\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest40\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest41\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest42\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest43\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest44\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest45\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest46\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest47\n           )\n        + (\n            SELECT count(*)\n            \n            FROM SQLStatementTest48\n           )\n      )\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "WhCSk6j7",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "t_main"
        }, {
          "id" : "Yyq2RRQD",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(CAST(c_int AS INT) > 5)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(c_int AS INT) = 0))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_string LIKE %A%",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((1 & 1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((2 | 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((10 * CAST(c_int AS INT)) = 20)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (test = c_string))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((CAST(c_int AS INT) >= 10) AND (CAST(c_int AS INT) <= 20))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array(10, 20, 30)[2] = 30)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map(1, Hello, 2, World)[1] = Hello)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest0"
        }, {
          "id" : "WqgJwteg",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "d7",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map(three, 3)[four] = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d8",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((1 = 2) AND (1 = 2))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(((((1 >= 2) AND (1 <= 2)) AND (NOT (1 = 3))) OR (2 > 4)) OR (4 < 5))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col22",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d81",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(named_struct(a, 1, b, 2) IN (named_struct(a, 1, b, 1), named_struct(a, 1, b, 3)))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (1 <=> 5))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(invalid <=> false)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest1"
        }, {
          "id" : "X43mY3Bv",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(51 IS NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c46",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(1 <=> 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (1 = CAST(c_int AS INT)))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(((10 - 2) + 10) = 8)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT true)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(false OR true)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((2 % 0) = 0)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(concat(Spark, SQL) = SparkSQL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "%SystemDrive%\\Users\\John LIKE %System23Drive%\\\\Users%",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest2"
        }, {
          "id" : "DhQZEiRV",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "RLIKE(%SystemDr12ive%\\Users\\John, %System23Drive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "REGEXP_LIKE(%Syst2emDrive%\\Users\\John, %SystemD545rive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((2 / 2) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(~0 = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(base64(aes_encrypt(Spark, abcdefghijklmnop, GCM, DEFAULT, , )) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CAST(aes_decrypt(unbase64(4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn), abcdefghijklmnop, GCM, DEFAULT, ) AS STRING) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ascii(234) = 234)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(base64(Spark SQL) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bin(13) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(Spark SQL = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest3"
        }, {
          "id" : "wjXcTm2u",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (btrim(abcaabaSparkSQLabcaaba, abc) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (char(65) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(char_length(Spark SQL ) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(character_length(Spark SQL ) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(c_int, hello) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat_ws(,, Spark, array(S, Q, NULL, L), NULL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "contains(SparkSQL, Spork)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(crc32(Spark) > 0)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (chr(65) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 ^ 5) = 6)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest4"
        }, {
          "id" : "lYbhgOfj",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (hex(encode(Spark SQL, US-ASCII)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "endswith(SparkSQL, SQL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(find_in_set(ab, abc,b,ab,c,def) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(format_number(12332.123456, 4) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(format_number(12332.123456, #.###) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (format_string(Hello World %d %s, 100, days) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (hex(Spark SQL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "%SystemDrive%\\Users\\John LIKE %SystemDrive%\\\\Users%",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (initcap(sPark sql) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(instr(SparkSQL, R) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest5"
        }, {
          "id" : "wWFawjVp",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (lcase(LowerCase) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (left(Spark SQL, 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(length(Spark SQL ) > 20)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(levenshtein(kitten, sitting) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col1201",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col1202",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (lower(LowerCase) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (lpad(hi, 1, ??) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (hex(lpad(X'1020', 5, X'05')) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col120",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest6"
        }, {
          "id" : "byMZPsGx",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (md5(Spark) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (octet_length(Spark SQL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (parse_url(http://spark.apache.org/path?query=1, HOST) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(position(bar, abcbarbar, 1) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(position(bar, abcbarbar, 5) > 5)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (printf(Hello World %d %s, 100, days) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "RLIKE(%SystemDarive%\\Users\\John, %SystemDrive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "RLIKE(%System1Drive%\\Users\\John, %SystemDrive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "REGEXP_LIKE(%SystemDa1rive%\\Users\\John, %SystemDrive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(regexp_extract(100-200, (\\d+)-(\\d+), 1) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest7"
        }, {
          "id" : "XkYhMaOB",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (regexp_extract_all(100-200, 300-400, (\\d+)-(\\d+), 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (regexp_replace(100-200, (\\d+), num, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (repeat(123, 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (replace(ABCabc, abc, DEF) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (reverse(Spark SQL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (right(Spark SQL, 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (rpad(hi, 5, ab) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (hex(rpad(X'1020', 5, X'05')) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sentences(Hi there! Good morning., en, US) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest8"
        }, {
          "id" : "y1PCYB8x",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (sha(Spark) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sha1(Spark) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sha2(Spark, 256) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (soundex(Miller) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(1, space(2), 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(concat(->, split_part(Hello,world,!, ,, 1)), <-) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(concat(->, split_part(, ,, 1)), <-) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(concat(->, split_part(Hello,World,!, ,, 0)), <-) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "startswith(SparkSQL, Spark)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "startswith(NULL, Spark)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest9"
        }, {
          "id" : "ooOb3yMU",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (substr(Spark SQL, 5, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substring_index(www.apache.org, ., 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(to_binary(537061726B) AS STRING) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(to_binary(537061726B, hex) AS STRING) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col50",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (translate(AaBbCc, abc, 123) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(try_to_binary(U3Bhxcms=, base64) AS STRING) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (ucase(SparkSql) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(unbase64(U3BhcmsgU1FM) AS STRING) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (decode(unhex(537061726B2053514C), UTF-8) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest10"
        }, {
          "id" : "Bml4ehr1",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "upper(SparkSql)",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "d9",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 | 5) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "DATE '2021-03-20' - INTERVAL '2' MONTH",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "(((10 - 2) + 2) = 4)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((2 % 1.8) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 ^ 5) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 & 5) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 * 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(INTERVAL '3' YEAR * 3)",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest11"
        }, {
          "id" : "ENltmF77",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(abs(-1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ACOS(1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ACOSH(1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ASIN(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ASINH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ATAN(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ATAN2(0, 0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ATANH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(current_timestamp() > 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bit_count(-1) > 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest12"
        }, {
          "id" : "qPHuGmzY",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(bit_get(23, 1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bround(13.5, -1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(round(13.5, -1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CBRT(27.0) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ceil(3345.1, -2) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ceiling(5.4) = 6)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ceiling(3345.1, -2) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(conv(100, 2, 10) = 4)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(conv(FFFFFFFFFFFFFFFF, 16, 10) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(COS(PI()) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest13"
        }, {
          "id" : "spkKlHuN",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(COSH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(COT(1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CSC((PI() / 2)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d10",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(DEGREES(3.141592653589793) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(5.2 = 4)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(E() = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(EXP(1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(EXPM1(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(factorial(2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest14"
        }, {
          "id" : "Uey6G6v6",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "d11",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(FLOOR(-0.1) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(floor(3345.1, -2) = 20)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(getbit(23, 0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d12",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d13",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "isnan(CAST(NaN AS DOUBLE))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ln(1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(LOG(10, 100) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(LOG1P(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest15"
        }, {
          "id" : "XJZVfaWl",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(LOG2(2) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(LOG10(10) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(nanvl(CAST(NaN AS DOUBLE), 123) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(negative(1) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(pmod(-10, 3) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((+ -1) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((pow(2, 3) * POWER(2, 3)) = 8)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(RADIANS(180) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((rand(0) * rand(0)) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(randn(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest16"
        }, {
          "id" : "zxRhB6c2",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(rint(12.3456) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(round(2.5, 0) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SEC(PI()) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SIN(0) = 0)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(shiftleft(2, 1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(shiftright(4, 1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(shiftrightunsigned(4, 1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(sign(40) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SIGNUM(40) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SINH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest17"
        }, {
          "id" : "beokmSs1",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(-5.6 = 5)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SQRT(4) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(TAN(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(TANH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((12 * 5.4) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_add(DATE '2021-03-20', INTERVAL '2' MONTH) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_add(1, 2) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_divide(3, 2) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col110",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_subtract(1, 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest18"
        }, {
          "id" : "iu34Qt0v",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "col111",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_subtract(-128, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2)) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array(10, 20, 30) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col21",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "array_contains(array(1, 2, 3), 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_distinct(array(1, 2, 3, NULL, 3)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_except(array(1, 2, 2, 3), array(1, 1, 3, 5)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_intersect(array(1, 2, 3), array(1, 3, 3, 5)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest19"
        }, {
          "id" : "JKBYSegB",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (array_join(array(hello, world), ,) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_join(array(hello, NULL, world), ,, *) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_max(array(1, 20, NULL, 3)) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_min(array(1, 20, NULL, 3)) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_position(array(3, 2, 1, 4, 1), 1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_remove(array(1, 2, 3, NULL, 3, 2), 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_repeat(123, 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_size(array(1, NULL, 3, NULL)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_sort(array(bc, ab, dc), lambdafunction((IF(((namedlambdavariable() IS NULL) AND (namedlambdavariable() IS NULL)), 0, (IF((namedlambdavariable() IS NULL), 1, (IF((namedlambdavariable() IS NULL), -1, (IF((namedlambdavariable() < namedlambdavariable()), -1, (IF((namedlambdavariable() > namedlambdavariable()), 1, 0)))))))))), namedlambdavariable(), namedlambdavariable())) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_union(array(1, 2, 2, 3), array(1, 3, 5)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest20"
        }, {
          "id" : "e5DYp3Mt",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(arrays_overlap(array(1, 2, NULL, 3), array(NULL, 4, 5)) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(arrays_zip(array(1, 2), array(shoe, string, budget)) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(cardinality(array(b, d, c, a)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(array(1, 2, 3), array(4, 5), array(6)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(element_at(map(1, a, 2, b), 2) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col20",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col19",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col18",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (flatten(array(array(1, 2), array(3, 4))) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col17",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest21"
        }, {
          "id" : "V6KrkIWU",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (reverse(array(2, 1, 4, 3)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sequence(5, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(cardinality(array(b, d, c, a)) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (slice(array(1, 2, 3, 4), 2, 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sort_array(array(b, d, NULL, c, a), true) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col16",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_element_at(array(1, 2, 3), 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (map(1, Hello, 2, World)[1] = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col67",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest22"
        }, {
          "id" : "xkINyLmB",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(element_at(map(1, a, 2, b), 3) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "map(1.0, 2, 3.0, 4)",
              "dataType" : {
                "type" : "Map",
                "keyType" : {
                  "type" : "Decimal"
                },
                "valueType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "map_concat(map(1, a, 2, b), map(3, c))",
              "dataType" : {
                "type" : "Map",
                "keyType" : {
                  "type" : "Integer"
                },
                "valueType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "col122",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "map_entries(map(1, a, 2, b))",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Struct",
                  "fields" : [ {
                    "name" : "key",
                    "dataType" : {
                      "type" : "Integer"
                    }
                  }, {
                    "name" : "value",
                    "dataType" : {
                      "type" : "String"
                    }
                  } ]
                }
              }
            }, {
              "name" : "col14",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map_from_arrays(array(1.0, 3.0), array(2, 4)) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "map_from_entries(array(struct(1, a), struct(2, b)))",
              "dataType" : {
                "type" : "Map",
                "keyType" : {
                  "type" : "Integer"
                },
                "valueType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "map_keys(map(1, a, 2, b))",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Integer"
                }
              }
            }, {
              "name" : "map_values(map(1, a, 2, b))",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest23"
        }, {
          "id" : "ETBoEqgr",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "col13",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(cardinality(map(a, 1, b, 2)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(str_to_map(a:1,b:2,c:3, ,, :) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col12",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col11",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_element_at(map(1, a, 2, b), 2) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((INTERVAL '03:15' HOUR TO MINUTE / 3) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (typeof((current_timestamp() - date_add(current_date(), extractansiintervaldays(INTERVAL '1' DAY)))) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col124",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest24"
        }, {
          "id" : "PiGr9rzY",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "col100",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "(NOT (add_months(2016-08-31, -6) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_date() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "current_timestamp()",
              "dataType" : {
                "type" : "Timestamp"
              }
            }, {
              "name" : "current_timezone()",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "col112",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121d",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "col122121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "date_from_unix_date(1)",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "col122121gh",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest25"
        }, {
          "id" : "jdsOrxOC",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (date_trunc(YEAR, 2015-03-05T09:32:05.359) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(datediff(2009-07-31, 2009-07-30) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(day(2009-07-30) = 30)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(dayofmonth(2009-07-30) = 30)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d14",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col16121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(extract(SECONDS FROM INTERVAL '05:00:30.001' HOUR TO SECOND) = 30)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(extract(WEEK FROM TIMESTAMP '2019-08-12 01:00:00.123456') = 33)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (from_unixtime(0, yyyy-MM-dd HH:mm:ss) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (from_utc_timestamp(2017-07-14 02:40:00.0, GMT+1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest26"
        }, {
          "id" : "tM8vjiFI",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (from_utc_timestamp(2016-08-31, Asia/Seoul) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(hour(2009-07-30 12:58:59) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(last_day(2009-01-12) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_date(2013, 7, 15) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_ym_interval(100, 5) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d15",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121hjh",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(months_between(1997-02-28 10:30:00, 1996-10-30, true) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(months_between(1997-02-28 10:30:00, 1996-10-30, false) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest27"
        }, {
          "id" : "VjqjsslV",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (next_day(2015-01-14, TU) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(quarter(2016-08-31) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d16",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (123 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (2020-04-30 12:25:13.45 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (timestamp_micros(1230219000123123) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (timestamp_millis(1230219000123) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (timestamp_seconds(1230219000) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_date(2016-12-31, yyyy-MM-dd) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_timestamp(2016-12-31, yyyy-MM-dd) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest28"
        }, {
          "id" : "wWmmuwwW",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (to_utc_timestamp(2017-07-14 02:40:00.0, GMT+1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (trunc(2015-10-27, YEAR) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (trunc(2019-08-04, quarter) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_add(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_add(DATE '2021-03-31', INTERVAL '1' MONTH) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_divide(INTERVAL '03:15' HOUR TO MINUTE, 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col101",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_subtract(DATE '2021-03-20', INTERVAL '2' MONTH) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_subtract(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(unix_date(1970-01-02) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest29"
        }, {
          "id" : "e9Gna6YM",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "unix_micros(1970-01-01 00:00:01Z)",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "unix_millis(1970-01-01 00:00:01Z)",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "unix_seconds(1970-01-01 00:00:01Z)",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "col1123423",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "(weekday(DATE '2009-07-30') = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(extract(DAYOFWEEK_ISO FROM DATE '2009-07-30') = 4)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(weekofyear(2008-02-20) = 8)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121rtyr",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "array(1, 2, 3)",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Integer"
                }
              }
            }, {
              "name" : "d3",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest30"
        }, {
          "id" : "J5w83uHu",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (Spark SQL = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(5.6 AS DECIMAL(2,0)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CAST(INTERVAL '1-2' YEAR TO MONTH AS INT) = 12)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (2021-03-21 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d2",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((5.2 / 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d4",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (make_date(2013, 7, 15) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest31"
        }, {
          "id" : "YJDJhYeY",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (make_dt_interval(100, 13, 0, 0.000000) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_ym_interval(100, 5) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col113",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(named_struct(a, 1, b, 2, c, 3) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d5",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(struct(1, 2, 3) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(12 = 12)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col114",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col115",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_timestamp(2016-12-31 00:12:00) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest32"
        }, {
          "id" : "ib67HfoG",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (from_csv(1, 0.8) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (schema_of_csv(1,abc) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(json_array_length([1,2,3,{\"f1\":1,\"f2\":[5,6]},4]) = 5)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (json_object_keys({\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (schema_of_json([{\"col\":01}]) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_json(named_struct(a, 1, b, 2)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_json(map(named_struct(a, 1), named_struct(b, 2))) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_json(array(map(a, 1))) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xpath(<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>, a/b/text()) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "xpath_boolean(<a><b>1</b></a>, a/b)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest33"
        }, {
          "id" : "qd37O0dp",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (xpath_double(<a><b>1</b><b>2</b></a>, sum(a/b)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xpath_float(<a><b>1</b><b>2</b></a>, sum(a/b)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col117",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(xpath_long(<a><b>1</b><b>2</b></a>, sum(a/b)) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(xpath_number(<a><b>1</b><b>2</b></a>, sum(a/b)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(xpath_int(<a><b>1</b><b>2</b></a>, sum(a/b)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xpath_string(<a><b>b</b><c>cc</c></a>, a/c) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col10",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col9",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col8",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest34"
        }, {
          "id" : "AKJNFQpV",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(coalesce(2, (5 / 0)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_catalog() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c21543123d",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_user() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (decode(5, 6, Spark, 5, SQL, 4, rocks) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (elt(1, scala, java) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(greatest(10, 9, 2, 4, 3) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "hash(Spark, array(123), 2)",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "col7",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "ifnull(NULL, array(2))",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest35"
        }, {
          "id" : "GmH38jMw",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(input_file_block_length() = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(input_file_block_start() = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(1 IS NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(1 IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(least(10, 9, 2, 4, 3) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(monotonically_increasing_id() > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(nullif(2, 2) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(nvl(NULL, 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(nvl2(NULL, 2, 1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (typeof(1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest36"
        }, {
          "id" : "AiLtpfQ7",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (uuid() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xxhash64(Spark, array(123), 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CAST(20 AS INT) = 20)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d866",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d889",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bitmap_count(X'00') = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(charindex(bar, abcbarbar, 1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (decode(X'FEFF0053007000610072006B002000530051004C', UTF-16) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d8123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(len(Spark SQL ) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest37"
        }, {
          "id" : "CrIg6szN",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(levenshtein(kitten, sitting, 4) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(concat(+, TRIM(LEADING abc FROM acbabSparkSQL   )), +) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (mask(AaBb123-&^ASDXYZ921312asd, Z, z, 9, X) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (mask(AaBb123-&^ASDXYZ921312asd, X, z, n, NULL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (mask(AaBb123-&ASDXYZ921312asd, NULL, NULL, NULL, NULL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (overlay(Spark SQL, _, 6, -1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (overlay(Spark SQL, tructured, 2, 4) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (overlay(encode(Spark SQL, utf-8), encode(_, utf-8), 6, -1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(locate(bar, abcbarbar, 1) > 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(regexp_count(Steven Jones and Stephen Smith are the best players, Ste(v|ph)en) > 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest38"
        }, {
          "id" : "FNofKMSV",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (regexp_instr(Mary had a little lamb, NULL, 0) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (regexp_substr(NULL, Ste(v|ph)en) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (TRIM(TRAILING ab FROM SparkSQLabcaaba) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (4 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substr(Spark SQL, -3, 2147483647) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substring(Spark SQL, 5, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substring(Spark SQL, -3, 2147483647) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col11112",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (decode(encode(abc, utf-8), utf-8) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_char(454, 999) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest39"
        }, {
          "id" : "OBNnCtIO",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "col1567812",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_varchar(X'537061726B2053514C') = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15678121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15678123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15678125",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15678127",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col6",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (url_decode(http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (url_encode(http://spark.apache.org/path?query=1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col125",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest40"
        }, {
          "id" : "bEgCqmpk",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "col156781254",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bit_reverse(-1) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bitmap_bit_position(-32768) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bitmap_bucket_number(-32768) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(mod(2, 1.8) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_append(array(1, 2, 3), 0) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_compact(array(1, 2, NULL, 3, NULL, 3)) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_insert(array(a, b, c), 1, z) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_prepend(array(1, 2, 3), 0) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (get(array(1, 2, 3), 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest41"
        }, {
          "id" : "maAtCqsh",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "col5",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (shuffle(array(1, 20, 3, 5)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "map_contains_key(map(1, a, 2, b), 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (DATE '2021-03-31' - INTERVAL '1' MONTH = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (DATE '2021-03-31' + INTERVAL '1' MONTH = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (TIMESTAMP '2021-03-20 12:15:29' - INTERVAL '03' SECOND = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(timestampdiff(MONTH, TIMESTAMP '2021-02-28 12:00:00', TIMESTAMP '2021-03-28 12:00:00') = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(date_part(SECONDS, TIMESTAMP '2019-10-01 00:00:01.000001') = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(date_part(Week, TIMESTAMP '2019-08-12 01:00:00.123456') = 33)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121a1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest42"
        }, {
          "id" : "Po1agzAV",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "timestampadd(MICROSECOND, 5, TIMESTAMP '2022-02-28 00:00:00')",
              "dataType" : {
                "type" : "Timestamp"
              }
            }, {
              "name" : "timestampdiff(MONTH, TIMESTAMP '2021-02-28 12:00:00', TIMESTAMP '2021-03-28 11:59:59')",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "(make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_timestamp(2014, 12, 28, 6, 30, 45.887, CET) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "now()",
              "dataType" : {
                "type" : "Timestamp"
              }
            }, {
              "name" : "c45fg6789hgf1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c45fg6789hgf",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c45fg6789hgf2",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_to_timestamp(2016-12-31, yyyy-MM-dd) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest43"
        }, {
          "id" : "X9yMMFOo",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(make_interval(100, 11, 0, 0, 0, 0, 0.000000) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (5 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_char(454, 000.00) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(to_char(454, 999) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(from_json({\"a\":1, \"b\":0.8}) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(get_json_object({\"a\":\"b\"}, $.a) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(to_csv(named_struct(time, to_timestamp(2015-08-26, yyyy-MM-dd))) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(to_csv(named_struct(a, 1, b, 2)) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (from_xml(<p><time>26/08/2015</time></p>) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest44"
        }, {
          "id" : "hJ2lJeYb",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(schema_of_xml(<p><a attr=\"2\">1</a><a>3</a></p>) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (aws:us-west-1:3fa0cd4e-bf05-4fde-894d-9dc222ae0419 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_schema() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_version() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "equal_null(2, 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col4",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "is_account_group_member(admins)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1d1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold13412asd",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold13423423",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest45"
        }, {
          "id" : "jGWHE0xj",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "cold1f4",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1asd",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1asd12",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1das122",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1test1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1test2",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col3455",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1asd342346",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1j",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest46"
        }, {
          "id" : "VKVEZFrW",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "cold1jk",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1jk1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1ghj",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1qwe",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1qweqwe",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1qweq123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold112sas",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1qwe234",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1dasd3456456",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1sdf56456",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest47"
        }, {
          "id" : "wR50paV8",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "cold1sdf43534523",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1dasd56346435234",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1dasd23414123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1adsasd123412312",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold1adsasd123412312",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold12",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold15",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold17",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold1as",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold1121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "SQLStatementTest48"
        } ],
        "outputs" : [ {
          "id" : "dEZrnmM5",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest43##y4jdX2NH" : {
      "id" : "SQLStatementTest43##y4jdX2NH",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest43",
        "x" : 580,
        "y" : 8680,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (dateadd(MICROSECOND, 5, TIMESTAMP'2022-02-28 00:00:00')),\n  (datediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 11:59:59')),\n  (make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL),\n  (make_timestamp(2014, 12, 28, 6, 30, 45.887, 'CET') IS NOT NULL),\n  (make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL),\n  (now()),\n  (timediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1) AS c45fg6789hgf1,\n  (timestampdiff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1) AS c45fg6789hgf,\n  (to_unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 100) AS c45fg6789hgf2,\n  (try_to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "SvrifOxL",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "NVL2yf4p",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "timestampadd(MICROSECOND, 5, TIMESTAMP '2022-02-28 00:00:00')",
              "dataType" : {
                "type" : "Timestamp"
              }
            }, {
              "name" : "timestampdiff(MONTH, TIMESTAMP '2021-02-28 12:00:00', TIMESTAMP '2021-03-28 11:59:59')",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "(make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_timestamp(2014, 12, 28, 6, 30, 45.887, CET) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "now()",
              "dataType" : {
                "type" : "Timestamp"
              }
            }, {
              "name" : "c45fg6789hgf1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c45fg6789hgf",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c45fg6789hgf2",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_to_timestamp(2016-12-31, yyyy-MM-dd) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest24##zaeDQWcy" : {
      "id" : "SQLStatementTest24##zaeDQWcy",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest24",
        "x" : 580,
        "y" : 4880,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (\n    map_zip_with(map(1, 'a', 2, 'b'), map(1, 'x', 2, 'y'), \n    (k, v1, v2) -> concat(v1, v2)) IS NOT NULL\n  ) AS col13,\n  (cardinality(map('a', 1, 'b', 2)) == 2),\n  (str_to_map('a:1,b:2,c:3', ',', ':') IS NOT NULL),\n  (\n    transform_keys(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n    (k, v) -> k + 1) IS NOT NULL\n  ) AS col12,\n  (\n    transform_values(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n    (k, v) -> k + v) IS NOT NULL\n  ) AS col11,\n  (try_element_at(map(1, 'a', 2, 'b'), 2) IS NOT NULL),\n  ((INTERVAL '3:15' HOUR TO MINUTE / 3) IS NOT NULL),\n  ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL) AS col123,\n  (typeof(current_timestamp - (current_date + INTERVAL '1' DAY)) != NULL),\n  ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL) AS col124,\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "VDntSK4S",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "FJWf3360",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "col13",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(cardinality(map(a, 1, b, 2)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(str_to_map(a:1,b:2,c:3, ,, :) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col12",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col11",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_element_at(map(1, a, 2, b), 2) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((INTERVAL '03:15' HOUR TO MINUTE / 3) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (typeof((current_timestamp() - date_add(current_date(), extractansiintervaldays(INTERVAL '1' DAY)))) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col124",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest38##cSym221q" : {
      "id" : "SQLStatementTest38##cSym221q",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest38",
        "x" : 580,
        "y" : 7680,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (levenshtein('kitten', 'sitting', 4) > 10),\n  (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL),\n  (mask('AaBb123-&^ASDXYZ921312asd', 'Z', 'z', '9', 'X') != NULL),\n  (mask('AaBb123-&^ASDXYZ921312asd', lowerChar => 'z', upperChar => 'X') != NULL),\n  (mask('AaBb123-&ASDXYZ921312asd', NULL, NULL, NULL, NULL) != NULL),\n  (overlay('Spark SQL' PLACING '_' FROM 6) != NULL),\n  (overlay('Spark SQL' PLACING 'tructured' FROM 2 FOR 4) != NULL),\n  (overlay(encode('Spark SQL', 'utf-8') PLACING encode('_', 'utf-8') FROM 6) != NULL),\n  (position('bar' IN 'abcbarbar') > 2),\n  (regexp_count('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en') > 2),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "IRtPBK0K",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "jdnu8Etd",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(levenshtein(kitten, sitting, 4) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(concat(+, TRIM(LEADING abc FROM acbabSparkSQL   )), +) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (mask(AaBb123-&^ASDXYZ921312asd, Z, z, 9, X) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (mask(AaBb123-&^ASDXYZ921312asd, X, z, n, NULL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (mask(AaBb123-&ASDXYZ921312asd, NULL, NULL, NULL, NULL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (overlay(Spark SQL, _, 6, -1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (overlay(Spark SQL, tructured, 2, 4) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (overlay(encode(Spark SQL, utf-8), encode(_, utf-8), 6, -1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(locate(bar, abcbarbar, 1) > 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(regexp_count(Steven Jones and Stephen Smith are the best players, Ste(v|ph)en) > 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest1##EVht4zj7" : {
      "id" : "SQLStatementTest1##EVht4zj7",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest1",
        "x" : 580,
        "y" : 280,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (10 ^ 20 == 50) AS d7,\n  (map('three', 3).four == NULL),\n  (named_struct('a', 5, 'b', 'Spark').a == 5) AS d8,\n  (1 = 2 and 1 == 2),\n  (1 >= 2 and 1 <= 2 and 1 != 3 or 2 > 4 or 4 < 5),\n  (\n    EXISTS (\n      array(1, NULL, 3),\n      \n      x -> x % 2 == 0\n    )\n  ) AS col22,\n  ilike('Spark', '_PARK') AS d81,\n  (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3))),\n  (1 IS DISTINCT FROM 5),\n  ('invalid' IS false),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "aOd5cFbo",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "VKT4pjLs",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "d7",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map(three, 3)[four] = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d8",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((1 = 2) AND (1 = 2))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(((((1 >= 2) AND (1 <= 2)) AND (NOT (1 = 3))) OR (2 > 4)) OR (4 < 5))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col22",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d81",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(named_struct(a, 1, b, 2) IN (named_struct(a, 1, b, 1), named_struct(a, 1, b, 3)))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (1 <=> 5))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(invalid <=> false)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest9##O2hRZD3r" : {
      "id" : "SQLStatementTest9##O2hRZD3r",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest9",
        "x" : 580,
        "y" : 1880,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (sha('Spark') != NULL),\n  (sha1('Spark') != NULL),\n  (sha2('Spark', 256) != NULL),\n  (soundex('Miller') != NULL),\n  (concat('1', space(2), '1') != NULL),\n  (('->' || split_part('Hello,world,!', ',', 1) || '<-') != NULL),\n  (('->' || split_part('', ',', 1) || '<-') != NULL),\n  (('->' || split_part('Hello,World,!', ',', 0) || '<-') != NULL),\n  (startswith('SparkSQL', 'Spark')),\n  (startswith(NULL, 'Spark')),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "Hu9GFxDv",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "nmAJj3DA",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (sha(Spark) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sha1(Spark) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sha2(Spark, 256) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (soundex(Miller) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(1, space(2), 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(concat(->, split_part(Hello,world,!, ,, 1)), <-) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(concat(->, split_part(, ,, 1)), <-) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(concat(->, split_part(Hello,World,!, ,, 0)), <-) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "startswith(SparkSQL, Spark)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "startswith(NULL, Spark)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest46##R5dEtDRr" : {
      "id" : "SQLStatementTest46##R5dEtDRr",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest46",
        "x" : 580,
        "y" : 9280,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0) != NULL) AS cold1f4,\n  (h3_coverash3string('{\"type\":\"LineString\",\"coordinates\":[[-122.4194,37.7749],[-118.2437,34.0522],[-74.0060,40.7128]]}', 1) != NULL) AS cold1asd,\n  (h3_longlatash3(-122.4783, 37.8199, 13) > 0) AS cold1asd12,\n  (h3_longlatash3string(-122.4783, 37.8199, 13) != NULL) AS cold1das122,\n  (h3_pointash3('POINT(-122.4783 37.8199)', 13) > 0) AS cold1,\n  (h3_pointash3string('{\"type\":\"Point\",\"coordinates\":[]}', 15) == NULL) AS cold1test1,\n  (h3_pointash3string('POINT(-122.4783 37.8199)', 13) != NULL) AS cold1test2,\n  (\n    h3_polyfillash3(\n      unhex(\n        '0103000000010000000400000050fc1873d79a5ec0d0d556ec2fe342404182e2c7988f5dc0f46c567dae064140aaf1d24d628052c05e4bc8073d5b444050fc1873d79a5ec0d0d556ec2fe34240'), \n      2) != NULL\n  ) AS col3455,\n  (h3_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL) AS cold1asd342346,\n  (h3_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL) AS cold1j,\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "mNUthkP5",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "HI0L6OmD",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "cold1f4",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1asd",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1asd12",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1das122",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1test1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1test2",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col3455",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1asd342346",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1j",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest6##fbuGOZsC" : {
      "id" : "SQLStatementTest6##fbuGOZsC",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest6",
        "x" : 580,
        "y" : 1280,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (lcase('LowerCase') != NULL),\n  (LEFT('Spark SQL', 3) != NULL),\n  (length('Spark SQL ') > 20),\n  (levenshtein('kitten', 'sitting') > 10),\n  (locate('bar', 'abcbarbar') > 2) AS col1201,\n  (locate('bar', 'abcbarbar', 5) > 2) AS col1202,\n  (lower('LowerCase') != NULL),\n  (lpad('hi', 1, '??') != NULL),\n  (hex(lpad(x'1020', 5, x'05')) != NULL),\n  (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL) AS col120,\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "DWR8dqfe",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "go4yDllR",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (lcase(LowerCase) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (left(Spark SQL, 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(length(Spark SQL ) > 20)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(levenshtein(kitten, sitting) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col1201",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col1202",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (lower(LowerCase) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (lpad(hi, 1, ??) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (hex(lpad(X'1020', 5, X'05')) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col120",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest33##UjXIxgL4" : {
      "id" : "SQLStatementTest33##UjXIxgL4",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest33",
        "x" : 580,
        "y" : 6680,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (from_csv('1, 0.8', 'a INT, b DOUBLE') != NULL),\n  (schema_of_csv('1,abc') != NULL),\n  (json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') == 5),\n  (json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') != NULL),\n  (schema_of_json('[{\"col\":01}]', map('allowNumericLeadingZeros', 'true')) != NULL),\n  (to_json(named_struct('a', 1, 'b', 2)) != NULL),\n  (to_json(map(named_struct('a', 1), named_struct('b', 2))) != NULL),\n  (to_json(array((map('a', 1)))) != NULL),\n  (xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()') != NULL),\n  (xpath_boolean('<a><b>1</b></a>', 'a/b')),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "auJfY32s",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "Bjb07gMM",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (from_csv(1, 0.8) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (schema_of_csv(1,abc) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(json_array_length([1,2,3,{\"f1\":1,\"f2\":[5,6]},4]) = 5)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (json_object_keys({\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (schema_of_json([{\"col\":01}]) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_json(named_struct(a, 1, b, 2)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_json(map(named_struct(a, 1), named_struct(b, 2))) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_json(array(map(a, 1))) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xpath(<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>, a/b/text()) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "xpath_boolean(<a><b>1</b></a>, a/b)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest16##rEBeV8ao" : {
      "id" : "SQLStatementTest16##rEBeV8ao",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest16",
        "x" : 580,
        "y" : 3280,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (log2(2) == 1),\n  (log10(10) == 1),\n  (nanvl(CAST('NaN' AS DOUBLE), 123) == 2),\n  (negative(1) == -1),\n  (pmod(-10, 3) == 2),\n  (positive(-1) == -1),\n  (pow(2, 3) * power(2, 3) == 8),\n  (radians(180) == 10),\n  (rand(0) * random(0) == 1),\n  (randn(0) == 1),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "nwVbPMqo",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "SpAzfCs8",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(LOG2(2) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(LOG10(10) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(nanvl(CAST(NaN AS DOUBLE), 123) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(negative(1) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(pmod(-10, 3) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((+ -1) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((pow(2, 3) * POWER(2, 3)) = 8)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(RADIANS(180) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((rand(0) * rand(0)) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(randn(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest42##q8BGR6CK" : {
      "id" : "SQLStatementTest42##q8BGR6CK",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest42",
        "x" : 580,
        "y" : 8480,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (\n    reduce(array(1, 2, 3), 0, \n    (acc, x) -> acc + x) == 2\n  ) AS col5,\n  (shuffle(array(1, 20, 3, 5)) != NULL),\n  (map_contains_key(map(1, 'a', 2, 'b'), 2)),\n  ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL),\n  ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL),\n  ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL),\n  (date_diff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1),\n  (date_part('SECONDS', TIMESTAMP'2019-10-01 00:00:01.000001') == 1),\n  (date_part('Week', TIMESTAMP'2019-08-12 01:00:00.123456') == 33),\n  (dateadd('2016-07-30', 1) != NULL) AS col122121a1,\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "e2NileZ3",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "cOwFxKls",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "col5",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (shuffle(array(1, 20, 3, 5)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "map_contains_key(map(1, a, 2, b), 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (DATE '2021-03-31' - INTERVAL '1' MONTH = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (DATE '2021-03-31' + INTERVAL '1' MONTH = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (TIMESTAMP '2021-03-20 12:15:29' - INTERVAL '03' SECOND = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(timestampdiff(MONTH, TIMESTAMP '2021-02-28 12:00:00', TIMESTAMP '2021-03-28 12:00:00') = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(date_part(SECONDS, TIMESTAMP '2019-10-01 00:00:01.000001') = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(date_part(Week, TIMESTAMP '2019-08-12 01:00:00.123456') = 33)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121a1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest13##yIvKZVKI" : {
      "id" : "SQLStatementTest13##yIvKZVKI",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest13",
        "x" : 580,
        "y" : 2680,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (bit_get(23Y, 1) == 1),\n  (bround(13.5, -1) == 1),\n  (round(13.5, -1) == 1),\n  (cbrt(27.0) == 3),\n  (ceil(3345.1, -2) == 1),\n  (ceiling(5.4) == 6),\n  (ceiling(3345.1, -2) == 1),\n  (conv('100', 2, 10) == 4),\n  (conv('FFFFFFFFFFFFFFFF', 16, 10) == 1),\n  (cos(pi()) == -1),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "QtseeQGj",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "UkXasqcW",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(bit_get(23, 1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bround(13.5, -1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(round(13.5, -1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CBRT(27.0) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ceil(3345.1, -2) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ceiling(5.4) = 6)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ceiling(3345.1, -2) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(conv(100, 2, 10) = 4)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(conv(FFFFFFFFFFFFFFFF, 16, 10) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(COS(PI()) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest35##GuTKrzrw" : {
      "id" : "SQLStatementTest35##GuTKrzrw",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest35",
        "x" : 580,
        "y" : 7080,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (coalesce(2, 5 / 0) == 2),\n  (current_catalog() != NULL),\n  (current_database() != NULL) AS c21543123d,\n  (current_user() != NULL),\n  (decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks') != NULL),\n  (elt(1, 'scala', 'java') != NULL),\n  (greatest(10, 9, 2, 4, 3) == 10),\n  (hash('Spark', array(123), 2) ),\n  (\n    if(\n      1 < 2, \n      'a', \n      'b') != NULL\n  ) AS col7,\n  (ifnull(NULL, array('2'))),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "klIJo6bG",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "QWllHqIt",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(coalesce(2, (5 / 0)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_catalog() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c21543123d",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_user() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (decode(5, 6, Spark, 5, SQL, 4, rocks) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (elt(1, scala, java) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(greatest(10, 9, 2, 4, 3) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "hash(Spark, array(123), 2)",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "col7",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "ifnull(NULL, array(2))",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest31##IX48Xb6v" : {
      "id" : "SQLStatementTest31##IX48Xb6v",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest31",
        "x" : 580,
        "y" : 6280,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (binary('Spark SQL') != NULL),\n  (boolean(1)),\n  (CAST(5.6 AS DECIMAL (2, 0)) != NULL),\n  (CAST(INTERVAL '1-2' YEAR TO MONTH AS INTEGER) == 12),\n  (date('2021-03-21') != NULL),\n  (decimal('5.2') == 5) AS d1,\n  (double('5.2') / 2 == 5) AS d2,\n  (float('5.2') / 2 == 2),\n  (int('5') == 5) AS d4,\n  (make_date(2013, 7, 15) != NULL),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "DZ1YwsQm",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "S5xqyjPA",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (Spark SQL = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(5.6 AS DECIMAL(2,0)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CAST(INTERVAL '1-2' YEAR TO MONTH AS INT) = 12)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (2021-03-21 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d2",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((5.2 / 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d4",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (make_date(2013, 7, 15) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest29##PzACOWAG" : {
      "id" : "SQLStatementTest29##PzACOWAG",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest29",
        "x" : 580,
        "y" : 5880,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (to_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL),\n  (trunc('2015-10-27', 'YEAR') != NULL),\n  (trunc('2019-08-04', 'quarter') != NULL),\n  (try_add(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL),\n  (try_add(DATE'2021-03-31', INTERVAL '1' MONTH) != NULL),\n  (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL),\n  ((INTERVAL '3' YEAR * 3) != NULL) AS col101,\n  (try_subtract(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL),\n  (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL),\n  (unix_date(DATE('1970-01-02')) == 1),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "hXCxgW1q",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "h2GP2WJt",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (to_utc_timestamp(2017-07-14 02:40:00.0, GMT+1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (trunc(2015-10-27, YEAR) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (trunc(2019-08-04, quarter) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_add(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_add(DATE '2021-03-31', INTERVAL '1' MONTH) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_divide(INTERVAL '03:15' HOUR TO MINUTE, 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col101",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_subtract(DATE '2021-03-20', INTERVAL '2' MONTH) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_subtract(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(unix_date(1970-01-02) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest40##JwvFkEsg" : {
      "id" : "SQLStatementTest40##JwvFkEsg",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest40",
        "x" : 580,
        "y" : 8080,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (to_varchar(DATE'2016-04-08', 'y') != NULL) AS col1567812,\n  (to_varchar(x'537061726b2053514c', 'hex') != NULL),\n  (TRIM( 'SL' FROM 'SSparkSQLS') != NULL) AS col15678121,\n  (TRIM(BOTH 'SL' FROM 'SSparkSQLS') != NULL) AS col15678123,\n  (TRIM(LEADING 'SL' FROM 'SSparkSQLS') != NULL) AS col15678125,\n  (TRIM(TRAILING 'SL' FROM 'SSparkSQLS') != NULL) AS col15678127,\n  (\n    CAST(try_aes_decrypt(\n      unbase64('MTIzNDU2Nzg5MDEyMdXvR41sJqwZ6hnTU8FRTTtXbL8yeChIZA=='), \n      '1234567890abcdef', \n      'GCM', \n      'DEFAULT', \n      'Some AAD') AS STRING) != NULL\n  ) AS col6,\n  (url_decode('http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1') != NULL),\n  (url_encode('http://spark.apache.org/path?query=1') != NULL),\n  ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL) AS col125,\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "im9Pj3aW",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "wacmxtl8",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "col1567812",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_varchar(X'537061726B2053514C') = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15678121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15678123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15678125",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15678127",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col6",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (url_decode(http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (url_encode(http://spark.apache.org/path?query=1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col125",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest18##bSXjG4kp" : {
      "id" : "SQLStatementTest18##bSXjG4kp",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest18",
        "x" : 580,
        "y" : 3680,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (smallint(-5.6) == 5),\n  (sqrt(4) == 2),\n  (tan(0) == 1),\n  (tanh(0) == 1),\n  (tinyint('12') * tinyint(5.4) == 1),\n  (try_add(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL),\n  (try_add(1, 2) == 3),\n  (try_divide(3, 2) == 3),\n  (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL) AS col110,\n  (try_subtract(1, 2) == 2),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "Sgz7inLF",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "EWy8eKpE",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(-5.6 = 5)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SQRT(4) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(TAN(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(TANH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((12 * 5.4) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_add(DATE '2021-03-20', INTERVAL '2' MONTH) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_add(1, 2) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_divide(3, 2) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col110",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_subtract(1, 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest27##Wj5MvdOE" : {
      "id" : "SQLStatementTest27##Wj5MvdOE",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest27",
        "x" : 580,
        "y" : 5480,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (from_utc_timestamp('2016-08-31', 'Asia/Seoul') != NULL),\n  (hour('2009-07-30 12:58:59') == 10),\n  (last_day('2009-01-12') IS NOT NULL),\n  (make_date(2013, 7, 15) IS NOT NULL),\n  (make_dt_interval(0, 0, 1, -0.1) IS NOT NULL),\n  (make_ym_interval(100, 5) IS NOT NULL),\n  (minute('2009-07-30 12:58:59') == 58) AS d15,\n  (month('2016-07-30') == 7) AS col122121hjh,\n  (months_between('1997-02-28 10:30:00', '1996-10-30') == 3),\n  (months_between('1997-02-28 10:30:00', '1996-10-30', false) == 2),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "LyYwvQCW",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "E79gTXav",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (from_utc_timestamp(2016-08-31, Asia/Seoul) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(hour(2009-07-30 12:58:59) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(last_day(2009-01-12) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_date(2013, 7, 15) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_ym_interval(100, 5) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d15",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121hjh",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(months_between(1997-02-28 10:30:00, 1996-10-30, true) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(months_between(1997-02-28 10:30:00, 1996-10-30, false) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest12##g5XTc4FL" : {
      "id" : "SQLStatementTest12##g5XTc4FL",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest12",
        "x" : 580,
        "y" : 2480,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (abs(-1) == 1),\n  (acos(1) == 1),\n  (acosh(1) == 1),\n  (asin(0) == 1),\n  (asinh(0) == 1),\n  (atan(0) == 1),\n  (atan2(0, 0) == 1),\n  (atanh(0) == 1),\n  (bigint(current_timestamp) > 1),\n  (bit_count(-1) > 1),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "HOYKdotp",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "pOsCOsZQ",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(abs(-1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ACOS(1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ACOSH(1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ASIN(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ASINH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ATAN(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ATAN2(0, 0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ATANH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(current_timestamp() > 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bit_count(-1) > 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest47##AaKqr6aF" : {
      "id" : "SQLStatementTest47##AaKqr6aF",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest47",
        "x" : 580,
        "y" : 9480,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (h3_try_polyfillash3('Not-a-valid-rep', 2) == NULL) AS cold1jk,\n  (h3_try_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL) AS cold1jk1,\n  (h3_try_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL) AS cold1ghj,\n  (h3_boundaryasgeojson('8009fffffffffff') != NULL) AS cold1qwe,\n  (h3_boundaryasgeojson(599686042433355775) != NULL) AS cold1qweqwe,\n  (hex(h3_boundaryaswkb(599686042433355775)) != NULL) AS cold1qweq123,\n  (h3_boundaryaswkt(599686042433355775) != NULL) AS cold112sas,\n  (h3_centerasgeojson(599686042433355775) != NULL) AS cold1qwe234,\n  (hex(h3_centeraswkb('8009fffffffffff')) == NULL) AS cold1dasd3456456,\n  (h3_centeraswkt('8009fffffffffff') != NULL) AS cold1sdf56456,\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "JGkMdUht",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "cBJZDHIj",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "cold1jk",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1jk1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1ghj",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1qwe",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1qweqwe",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1qweq123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold112sas",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1qwe234",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1dasd3456456",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1sdf56456",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest36##DY3EXJri" : {
      "id" : "SQLStatementTest36##DY3EXJri",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest36",
        "x" : 580,
        "y" : 7280,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (input_file_block_length() == -1),\n  (input_file_block_start() == -1),\n  (isnull(1)),\n  (isnotnull(1)),\n  (least(10, 9, 2, 4, 3) == 2),\n  (monotonically_increasing_id() > 10),\n  (nullif(2, 2) == NULL),\n  (nvl(NULL, 2) == 2),\n  (nvl2(NULL, 2, 1) == 1),\n  (typeof(1) != NULL),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "cttBCYD9",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "GARUdicx",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(input_file_block_length() = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(input_file_block_start() = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(1 IS NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(1 IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(least(10, 9, 2, 4, 3) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(monotonically_increasing_id() > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(nullif(2, 2) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(nvl(NULL, 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(nvl2(NULL, 2, 1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (typeof(1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest21##gmBPFsg1" : {
      "id" : "SQLStatementTest21##gmBPFsg1",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest21",
        "x" : 580,
        "y" : 4280,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (arrays_overlap(array(1, 2, NULL, 3), array(NULL, 4, 5)) == NULL),\n  (arrays_zip(array(1, 2), array('shoe', 'string', 'budget')) == NULL),\n  (cardinality(array('b', 'd', 'c', 'a')) == 2),\n  (concat(array(1, 2, 3), array(4, 5), array(6)) != NULL),\n  (element_at(map(1, 'a', 2, 'b'), 2) == NULL),\n  (\n    EXISTS (\n      array(1, 2, 3),\n      \n      x -> x % 2 == 0\n    )\n  ) AS col20,\n  (\n    EXISTS (\n      array(0, NULL, 2, 3, NULL),\n      \n      x -> x IS NULL\n    )\n  ) AS col19,\n  (\n    filter(array(1, 2, 3), \n    x -> x % 2 == 1) != NULL\n  ) AS col18,\n  (flatten(array(array(1, 2), array(3, 4))) != NULL),\n  (\n    forall(array(1, 2, 3), \n    x -> x % 2 == 0) == NULL\n  ) AS col17,\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "MOto9trX",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "wPHAyySp",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(arrays_overlap(array(1, 2, NULL, 3), array(NULL, 4, 5)) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(arrays_zip(array(1, 2), array(shoe, string, budget)) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(cardinality(array(b, d, c, a)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(array(1, 2, 3), array(4, 5), array(6)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(element_at(map(1, a, 2, b), 2) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col20",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col19",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col18",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (flatten(array(array(1, 2), array(3, 4))) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col17",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest20##IGafgzJW" : {
      "id" : "SQLStatementTest20##IGafgzJW",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest20",
        "x" : 580,
        "y" : 4080,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (array_join(array('hello', 'world'), ',') != NULL),\n  (array_join(array('hello', NULL, 'world'), ',', '*') == NULL),\n  (array_max(array(1, 20, NULL, 3)) > 10),\n  (array_min(array(1, 20, NULL, 3)) == 1),\n  (array_position(array(3, 2, 1, 4, 1), 1) == 2),\n  (array_remove(array(1, 2, 3, NULL, 3, 2), 3) != NULL),\n  (array_repeat('123', 2) != NULL),\n  (array_size(array(1, NULL, 3, NULL)) == 2),\n  (array_sort(array('bc', 'ab', 'dc')) != NULL),\n  (array_union(array(1, 2, 2, 3), array(1, 3, 5)) != NULL),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "syrtDCoG",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "a0en26dt",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (array_join(array(hello, world), ,) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_join(array(hello, NULL, world), ,, *) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_max(array(1, 20, NULL, 3)) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_min(array(1, 20, NULL, 3)) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_position(array(3, 2, 1, 4, 1), 1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_remove(array(1, 2, 3, NULL, 3, 2), 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_repeat(123, 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_size(array(1, NULL, 3, NULL)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_sort(array(bc, ab, dc), lambdafunction((IF(((namedlambdavariable() IS NULL) AND (namedlambdavariable() IS NULL)), 0, (IF((namedlambdavariable() IS NULL), 1, (IF((namedlambdavariable() IS NULL), -1, (IF((namedlambdavariable() < namedlambdavariable()), -1, (IF((namedlambdavariable() > namedlambdavariable()), 1, 0)))))))))), namedlambdavariable(), namedlambdavariable())) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_union(array(1, 2, 2, 3), array(1, 3, 5)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest15##El35dkek" : {
      "id" : "SQLStatementTest15##El35dkek",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest15",
        "x" : 580,
        "y" : 3080,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (float('5.2') == 5) AS d11,\n  (floor(-0.1) == -1),\n  (floor(3345.1, -2) == 20),\n  (getbit(23Y, 0) == 1),\n  (hypot(3, 4) == 5) AS d12,\n  (int(-5.6) == 5) AS d13,\n  (isnan(CAST('NaN' AS double))),\n  (ln(1) == 1),\n  (log(10, 100) == 2),\n  (log1p(0) == 1),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "brNlHo4y",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "FP9Iou3m",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "d11",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(FLOOR(-0.1) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(floor(3345.1, -2) = 20)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(getbit(23, 0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d12",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d13",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "isnan(CAST(NaN AS DOUBLE))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ln(1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(LOG(10, 100) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(LOG1P(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest26##AKim85cD" : {
      "id" : "SQLStatementTest26##AKim85cD",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest26",
        "x" : 580,
        "y" : 5280,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (date_trunc('YEAR', '2015-03-05T09:32:05.359') != NULL),\n  (datediff('2009-07-31', '2009-07-30') == 1),\n  (day('2009-07-30') == 30),\n  (dayofmonth('2009-07-30') == 30),\n  (dayofweek('2009-07-30') == 5) AS d14,\n  (dayofyear('2016-04-09') == 100) AS col16121,\n  (EXTRACT(SECONDS FROM INTERVAL '5:00:30.001' HOUR TO SECOND) == 30),\n  (EXTRACT(WEEK FROM TIMESTAMP'2019-08-12 01:00:00.123456') == 33),\n  (from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') != NULL),\n  (from_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "fRU9GKX9",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "lh31ePe6",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (date_trunc(YEAR, 2015-03-05T09:32:05.359) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(datediff(2009-07-31, 2009-07-30) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(day(2009-07-30) = 30)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(dayofmonth(2009-07-30) = 30)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d14",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col16121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(extract(SECONDS FROM INTERVAL '05:00:30.001' HOUR TO SECOND) = 30)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(extract(WEEK FROM TIMESTAMP '2019-08-12 01:00:00.123456') = 33)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (from_unixtime(0, yyyy-MM-dd HH:mm:ss) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (from_utc_timestamp(2017-07-14 02:40:00.0, GMT+1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "ALL_TYPE_TABLE##npivirWs" : {
      "id" : "ALL_TYPE_TABLE##npivirWs",
      "component" : "Source",
      "metadata" : {
        "label" : "ALL_TYPE_TABLE",
        "x" : 20,
        "y" : 4780,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "all_type_parquet",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "mVNvYXij",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest8##OeHT8dDj" : {
      "id" : "SQLStatementTest8##OeHT8dDj",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest8",
        "x" : 580,
        "y" : 1680,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1) != NULL),\n  (regexp_replace('100-200', '(\\\\d+)', 'num') != NULL),\n  (repeat('123', 2) != NULL),\n  (replace('ABCabc', 'abc', 'DEF') != NULL),\n  (reverse('Spark SQL') != NULL),\n  (RIGHT('Spark SQL', 3) != NULL),\n  (rpad('hi', 5, 'ab') != NULL),\n  (hex(rpad(x'1020', 5, x'05')) != NULL),\n  (rtrim('ab', 'SparkSQLabcaaba') != NULL) AS col121,\n  (sentences('Hi there! Good morning.', 'en', 'US') != NULL),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n\nWHERE c_string != NULL\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "XoEe2JDe",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "QMLuAeGV",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (regexp_extract_all(100-200, 300-400, (\\d+)-(\\d+), 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (regexp_replace(100-200, (\\d+), num, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (repeat(123, 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (replace(ABCabc, abc, DEF) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (reverse(Spark SQL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (right(Spark SQL, 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (rpad(hi, 5, ab) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (hex(rpad(X'1020', 5, X'05')) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sentences(Hi there! Good morning., en, US) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest28##pc9VfLrW" : {
      "id" : "SQLStatementTest28##pc9VfLrW",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest28",
        "x" : 580,
        "y" : 5680,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (next_day('2015-01-14', 'TU') != NULL),\n  (quarter('2016-08-31') == 3),\n  (second('2009-07-30 12:58:59') == 59) AS d16,\n  (timestamp(123) != NULL),\n  (timestamp('2020-04-30 12:25:13.45') != NULL),\n  (timestamp_micros(1230219000123123) != NULL),\n  (timestamp_millis(1230219000123) != NULL),\n  (timestamp_seconds(1230219000) != NULL),\n  (to_date('2016-12-31', 'yyyy-MM-dd') != NULL),\n  (to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "wm7ww64A",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "P8teN3NI",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (next_day(2015-01-14, TU) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(quarter(2016-08-31) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d16",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (123 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (2020-04-30 12:25:13.45 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (timestamp_micros(1230219000123123) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (timestamp_millis(1230219000123) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (timestamp_seconds(1230219000) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_date(2016-12-31, yyyy-MM-dd) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_timestamp(2016-12-31, yyyy-MM-dd) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest48##NEzRbctk" : {
      "id" : "SQLStatementTest48##NEzRbctk",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest48",
        "x" : 580,
        "y" : 9680,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (h3_h3tostring(599686042433355775) != NULL) AS cold1sdf43534523,\n  (h3_stringtoh3('85283473fffffff') == NULL) AS cold1dasd56346435234,\n  (h3_ischildof('88283471b9fffff', '85283473fffffff')) AS cold1dasd23414123,\n  (h3_ispentagon(590112357393367039)) AS cold1adsasd123412312,\n  (h3_isvalid('85283473fffffff')) AS cold1cold1adsasd123412312,\n  (h3_try_validate(590112357393367039) != NULL) AS cold1cold12,\n  (h3_validate(590112357393367039) != NULL) AS cold1cold15,\n  (h3_hexring(599686042433355775, 1) != NULL) AS cold1cold17,\n  (h3_kring(599686042433355775, 1) != NULL) AS cold1cold1as,\n  (h3_kringdistances(599686042433355775, 1) != NULL) AS cold1cold1121,\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "EjfLOVAd",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "hfpqp4WI",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "cold1sdf43534523",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1dasd56346435234",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1dasd23414123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1adsasd123412312",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold1adsasd123412312",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold12",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold15",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold17",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold1as",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold1121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatementTest5##G1rpmrU9" : {
      "id" : "SQLStatementTest5##G1rpmrU9",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatementTest5",
        "x" : 580,
        "y" : 1080,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  (hex(encode('Spark SQL', 'US-ASCII')) != NULL),\n  endswith('SparkSQL', 'SQL'),\n  (find_in_set('ab', 'abc,b,ab,c,def') == 2),\n  (format_number(12332.123456, 4) == 2),\n  (format_number(12332.123456, '#.###') == 10),\n  (format_string('Hello World %d %s', 100, 'days') != NULL),\n  (hex('Spark SQL') != NULL),\n  (r'%SystemDrive%\\Users\\John' LIKE '%SystemDrive%\\\\\\\\Users%'),\n  (initcap('sPark sql') != NULL),\n  (instr('SparkSQL', 'R') == 2),\n  random() % 2 = 0 AS c_test_col\n\nFROM ALL_TYPE_TABLE\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "HAurOISV",
          "schema" : {
            "entityType" : "",
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "ALL_TYPE_TABLE"
        } ],
        "outputs" : [ {
          "id" : "HJB2bgyk",
          "schema" : {
            "entityType" : "",
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(NOT (hex(encode(Spark SQL, US-ASCII)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "endswith(SparkSQL, SQL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(find_in_set(ab, abc,b,ab,c,def) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(format_number(12332.123456, 4) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(format_number(12332.123456, #.###) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (format_string(Hello World %d %s, 100, days) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (hex(Spark SQL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "%SystemDrive%\\Users\\John LIKE %SystemDrive%\\\\Users%",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (initcap(sPark sql) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(instr(SparkSQL, R) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_test_col",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    }
  },
  "connections" : [ {
    "id" : "LFrJJR7u",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest0##ZEVdWbsA",
    "targetPort" : "Ep2pBrvV"
  }, {
    "id" : "SR4oPCv4",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest1##EVht4zj7",
    "targetPort" : "aOd5cFbo"
  }, {
    "id" : "S6oryz5k",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest2##ShRwqZql",
    "targetPort" : "O4QRMhaH"
  }, {
    "id" : "jPBHUJrQ",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest3##rOwqjmto",
    "targetPort" : "A3LAHvMz"
  }, {
    "id" : "GahQNjUx",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest4##CJgUD1F8",
    "targetPort" : "iv6624BE"
  }, {
    "id" : "Z35mSFJa",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest5##G1rpmrU9",
    "targetPort" : "HAurOISV"
  }, {
    "id" : "BLMpkXQV",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest6##fbuGOZsC",
    "targetPort" : "DWR8dqfe"
  }, {
    "id" : "NfmZwx5Y",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest7##RhcjsFYL",
    "targetPort" : "KbxBfzXH"
  }, {
    "id" : "tm5iw9ks",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest8##OeHT8dDj",
    "targetPort" : "XoEe2JDe"
  }, {
    "id" : "kfqVtxXV",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest9##O2hRZD3r",
    "targetPort" : "Hu9GFxDv"
  }, {
    "id" : "DHRvwbU8",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest10##JG1Z8L2x",
    "targetPort" : "UremWDA6"
  }, {
    "id" : "NBXjsL9u",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest11##zG7TuT5e",
    "targetPort" : "Z1TOJ6fM"
  }, {
    "id" : "fQDI3EYO",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest12##g5XTc4FL",
    "targetPort" : "HOYKdotp"
  }, {
    "id" : "a7wpecXr",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest13##yIvKZVKI",
    "targetPort" : "QtseeQGj"
  }, {
    "id" : "pFo4GUfT",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest14##MCnSYlxy",
    "targetPort" : "UGEInmEs"
  }, {
    "id" : "JqmgNMuH",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest15##El35dkek",
    "targetPort" : "brNlHo4y"
  }, {
    "id" : "EwWefnyM",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest16##rEBeV8ao",
    "targetPort" : "nwVbPMqo"
  }, {
    "id" : "SwVO86WA",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest17##KHQJjoRH",
    "targetPort" : "bFzAqj9m"
  }, {
    "id" : "VeOgmh6p",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest18##bSXjG4kp",
    "targetPort" : "Sgz7inLF"
  }, {
    "id" : "pHq2yCX1",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest19##P5LMSwNP",
    "targetPort" : "eqObdgh1"
  }, {
    "id" : "E4DqZ44u",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest20##IGafgzJW",
    "targetPort" : "syrtDCoG"
  }, {
    "id" : "sLqeMgRo",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest21##gmBPFsg1",
    "targetPort" : "MOto9trX"
  }, {
    "id" : "UV2h62YS",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest22##i4EcSdRu",
    "targetPort" : "tiILjX0a"
  }, {
    "id" : "nAf0mpvJ",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest23##WLpbAp0w",
    "targetPort" : "hklBQgl0"
  }, {
    "id" : "mhWbCRI1",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest24##zaeDQWcy",
    "targetPort" : "VDntSK4S"
  }, {
    "id" : "HojMRaVQ",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest25##b2k2PSEM",
    "targetPort" : "Qn8qEvCM"
  }, {
    "id" : "WKtlOXEq",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest26##AKim85cD",
    "targetPort" : "fRU9GKX9"
  }, {
    "id" : "OAg2adpg",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest27##Wj5MvdOE",
    "targetPort" : "LyYwvQCW"
  }, {
    "id" : "s8QJn04s",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest28##pc9VfLrW",
    "targetPort" : "wm7ww64A"
  }, {
    "id" : "NkX4RX8M",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest29##PzACOWAG",
    "targetPort" : "hXCxgW1q"
  }, {
    "id" : "E1nCZy4t",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest30##o3fe8rRj",
    "targetPort" : "JU4tj6VG"
  }, {
    "id" : "EGUdIU5a",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest31##IX48Xb6v",
    "targetPort" : "DZ1YwsQm"
  }, {
    "id" : "qA2mOj48",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest32##RRWG4otj",
    "targetPort" : "pTI4sXcX"
  }, {
    "id" : "RPwS01W9",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest33##UjXIxgL4",
    "targetPort" : "auJfY32s"
  }, {
    "id" : "QjBRhkxn",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest34##RO88gd6S",
    "targetPort" : "NADMBMBG"
  }, {
    "id" : "DUxjOR0g",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest35##GuTKrzrw",
    "targetPort" : "klIJo6bG"
  }, {
    "id" : "NTu9WCzE",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest36##DY3EXJri",
    "targetPort" : "cttBCYD9"
  }, {
    "id" : "VCYWYKfo",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest37##W0OMphgR",
    "targetPort" : "S3ie2nI4"
  }, {
    "id" : "lJN6Y8f5",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest38##cSym221q",
    "targetPort" : "IRtPBK0K"
  }, {
    "id" : "rcr2bAdW",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest39##MVyMJJ3C",
    "targetPort" : "nVNwFck5"
  }, {
    "id" : "Y6HHWAVh",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest40##JwvFkEsg",
    "targetPort" : "im9Pj3aW"
  }, {
    "id" : "xuIxJ8ah",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest41##s51MCGSQ",
    "targetPort" : "GmJZn8Q6"
  }, {
    "id" : "ykheJqx2",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest42##q8BGR6CK",
    "targetPort" : "e2NileZ3"
  }, {
    "id" : "wT9d6pg7",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest43##y4jdX2NH",
    "targetPort" : "SvrifOxL"
  }, {
    "id" : "p8DpCoZM",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest44##BUbjbQcn",
    "targetPort" : "F0fJhZeK"
  }, {
    "id" : "sNnd7S5s",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest45##iE7H8z8s",
    "targetPort" : "VgQSTBZT"
  }, {
    "id" : "R1y5kDAP",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest46##R5dEtDRr",
    "targetPort" : "mNUthkP5"
  }, {
    "id" : "QjVFzLQ4",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest47##AaKqr6aF",
    "targetPort" : "JGkMdUht"
  }, {
    "id" : "Hs3nwwcu",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatementTest48##NEzRbctk",
    "targetPort" : "EjfLOVAd"
  }, {
    "id" : "nOMjzhja",
    "source" : "ALL_TYPE_TABLE##npivirWs",
    "sourcePort" : "mVNvYXij",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "WhCSk6j7"
  }, {
    "id" : "DYkgquk0",
    "source" : "SQLStatementTest0##ZEVdWbsA",
    "sourcePort" : "aqNxLI9c",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "Yyq2RRQD"
  }, {
    "id" : "fQ4X3n65",
    "source" : "SQLStatementTest1##EVht4zj7",
    "sourcePort" : "VKT4pjLs",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "WqgJwteg"
  }, {
    "id" : "nSMHi4vl",
    "source" : "SQLStatementTest2##ShRwqZql",
    "sourcePort" : "TVTyaLaS",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "X43mY3Bv"
  }, {
    "id" : "V8jifrSa",
    "source" : "SQLStatementTest3##rOwqjmto",
    "sourcePort" : "SutUkcxK",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "DhQZEiRV"
  }, {
    "id" : "YjnfpUe1",
    "source" : "SQLStatementTest4##CJgUD1F8",
    "sourcePort" : "Bhj561Fx",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "wjXcTm2u"
  }, {
    "id" : "QlGhpJrz",
    "source" : "SQLStatementTest5##G1rpmrU9",
    "sourcePort" : "HJB2bgyk",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "lYbhgOfj"
  }, {
    "id" : "g7fxaQY5",
    "source" : "SQLStatementTest6##fbuGOZsC",
    "sourcePort" : "go4yDllR",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "wWFawjVp"
  }, {
    "id" : "BO6OYv4B",
    "source" : "SQLStatementTest7##RhcjsFYL",
    "sourcePort" : "u5NTCzR4",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "byMZPsGx"
  }, {
    "id" : "Pgw4WXZ1",
    "source" : "SQLStatementTest8##OeHT8dDj",
    "sourcePort" : "QMLuAeGV",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "XkYhMaOB"
  }, {
    "id" : "rGiqCSfF",
    "source" : "SQLStatementTest9##O2hRZD3r",
    "sourcePort" : "nmAJj3DA",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "y1PCYB8x"
  }, {
    "id" : "WVosxaw7",
    "source" : "SQLStatementTest10##JG1Z8L2x",
    "sourcePort" : "ePOFbVLJ",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "ooOb3yMU"
  }, {
    "id" : "uK1Ee4ST",
    "source" : "SQLStatementTest11##zG7TuT5e",
    "sourcePort" : "AZNxIxUj",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "Bml4ehr1"
  }, {
    "id" : "qxCSOVRw",
    "source" : "SQLStatementTest12##g5XTc4FL",
    "sourcePort" : "pOsCOsZQ",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "ENltmF77"
  }, {
    "id" : "fKfIc852",
    "source" : "SQLStatementTest13##yIvKZVKI",
    "sourcePort" : "UkXasqcW",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "qPHuGmzY"
  }, {
    "id" : "DQBFQZvJ",
    "source" : "SQLStatementTest14##MCnSYlxy",
    "sourcePort" : "GmiZkimL",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "spkKlHuN"
  }, {
    "id" : "tXn4mqYs",
    "source" : "SQLStatementTest15##El35dkek",
    "sourcePort" : "FP9Iou3m",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "Uey6G6v6"
  }, {
    "id" : "WhyLuMFO",
    "source" : "SQLStatementTest16##rEBeV8ao",
    "sourcePort" : "SpAzfCs8",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "XJZVfaWl"
  }, {
    "id" : "DIztEgQ0",
    "source" : "SQLStatementTest17##KHQJjoRH",
    "sourcePort" : "Ee7Vt0Nr",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "zxRhB6c2"
  }, {
    "id" : "xZOxWfOa",
    "source" : "SQLStatementTest18##bSXjG4kp",
    "sourcePort" : "EWy8eKpE",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "beokmSs1"
  }, {
    "id" : "kGMvTMJX",
    "source" : "SQLStatementTest19##P5LMSwNP",
    "sourcePort" : "jjlq4X6i",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "iu34Qt0v"
  }, {
    "id" : "n3pTfWd6",
    "source" : "SQLStatementTest20##IGafgzJW",
    "sourcePort" : "a0en26dt",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "JKBYSegB"
  }, {
    "id" : "nUBK27oy",
    "source" : "SQLStatementTest21##gmBPFsg1",
    "sourcePort" : "wPHAyySp",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "e5DYp3Mt"
  }, {
    "id" : "dj4j5LZE",
    "source" : "SQLStatementTest22##i4EcSdRu",
    "sourcePort" : "tRyETv88",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "V6KrkIWU"
  }, {
    "id" : "qWVne5ch",
    "source" : "SQLStatementTest23##WLpbAp0w",
    "sourcePort" : "Aju7r9Sm",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "xkINyLmB"
  }, {
    "id" : "nw9hRpfv",
    "source" : "SQLStatementTest24##zaeDQWcy",
    "sourcePort" : "FJWf3360",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "ETBoEqgr"
  }, {
    "id" : "v2IQc2Nj",
    "source" : "SQLStatementTest25##b2k2PSEM",
    "sourcePort" : "UCOIeABU",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "PiGr9rzY"
  }, {
    "id" : "enpjytDn",
    "source" : "SQLStatementTest26##AKim85cD",
    "sourcePort" : "lh31ePe6",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "jdsOrxOC"
  }, {
    "id" : "pmLbLZtx",
    "source" : "SQLStatementTest27##Wj5MvdOE",
    "sourcePort" : "E79gTXav",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "tM8vjiFI"
  }, {
    "id" : "KfOAMDYO",
    "source" : "SQLStatementTest28##pc9VfLrW",
    "sourcePort" : "P8teN3NI",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "VjqjsslV"
  }, {
    "id" : "G9DaJ2ta",
    "source" : "SQLStatementTest29##PzACOWAG",
    "sourcePort" : "h2GP2WJt",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "wWmmuwwW"
  }, {
    "id" : "LwojTH4f",
    "source" : "SQLStatementTest30##o3fe8rRj",
    "sourcePort" : "yXFQYZLS",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "e9Gna6YM"
  }, {
    "id" : "G1hwaU6k",
    "source" : "SQLStatementTest31##IX48Xb6v",
    "sourcePort" : "S5xqyjPA",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "J5w83uHu"
  }, {
    "id" : "ToB0CRQM",
    "source" : "SQLStatementTest32##RRWG4otj",
    "sourcePort" : "BbX4iJxI",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "YJDJhYeY"
  }, {
    "id" : "XV8lZFu9",
    "source" : "SQLStatementTest33##UjXIxgL4",
    "sourcePort" : "Bjb07gMM",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "ib67HfoG"
  }, {
    "id" : "pseEAJop",
    "source" : "SQLStatementTest34##RO88gd6S",
    "sourcePort" : "tQ6GHBjc",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "qd37O0dp"
  }, {
    "id" : "HJQzIIJg",
    "source" : "SQLStatementTest35##GuTKrzrw",
    "sourcePort" : "QWllHqIt",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "AKJNFQpV"
  }, {
    "id" : "SAKpDVb6",
    "source" : "SQLStatementTest36##DY3EXJri",
    "sourcePort" : "GARUdicx",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "GmH38jMw"
  }, {
    "id" : "mol05GY3",
    "source" : "SQLStatementTest37##W0OMphgR",
    "sourcePort" : "E8A0m4wi",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "AiLtpfQ7"
  }, {
    "id" : "BUg4bSR2",
    "source" : "SQLStatementTest38##cSym221q",
    "sourcePort" : "jdnu8Etd",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "CrIg6szN"
  }, {
    "id" : "OLgc48tj",
    "source" : "SQLStatementTest39##MVyMJJ3C",
    "sourcePort" : "oP065l61",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "FNofKMSV"
  }, {
    "id" : "T3KvCi5h",
    "source" : "SQLStatementTest40##JwvFkEsg",
    "sourcePort" : "wacmxtl8",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "OBNnCtIO"
  }, {
    "id" : "l3akCCQS",
    "source" : "SQLStatementTest41##s51MCGSQ",
    "sourcePort" : "m9oSWaVn",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "bEgCqmpk"
  }, {
    "id" : "cMkkUEnI",
    "source" : "SQLStatementTest42##q8BGR6CK",
    "sourcePort" : "cOwFxKls",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "maAtCqsh"
  }, {
    "id" : "CDBXUkQZ",
    "source" : "SQLStatementTest43##y4jdX2NH",
    "sourcePort" : "NVL2yf4p",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "Po1agzAV"
  }, {
    "id" : "py8aopOL",
    "source" : "SQLStatementTest44##BUbjbQcn",
    "sourcePort" : "YjIk17f9",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "X9yMMFOo"
  }, {
    "id" : "ftDzny4O",
    "source" : "SQLStatementTest45##iE7H8z8s",
    "sourcePort" : "i70DQ8Ri",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "hJ2lJeYb"
  }, {
    "id" : "ENDZLmq5",
    "source" : "SQLStatementTest46##R5dEtDRr",
    "sourcePort" : "HI0L6OmD",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "jGWHE0xj"
  }, {
    "id" : "jVMHD3hs",
    "source" : "SQLStatementTest47##AaKqr6aF",
    "sourcePort" : "cBJZDHIj",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "VKVEZFrW"
  }, {
    "id" : "chknhjZI",
    "source" : "SQLStatementTest48##NEzRbctk",
    "sourcePort" : "hfpqp4WI",
    "target" : "SQLStatement_2##APZz1vH1",
    "targetPort" : "wR50paV8"
  }, {
    "id" : "Zt10j0T0",
    "source" : "SQLStatement_2##APZz1vH1",
    "sourcePort" : "dEZrnmM5",
    "target" : "uitesting_expressions_1##jBl2bp6o",
    "targetPort" : "NBf69ztB"
  } ],
  "component" : "Model"
}
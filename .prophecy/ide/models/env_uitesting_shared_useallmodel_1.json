{
  "id" : "env_uitesting_shared_useallmodel_1",
  "metainfo" : {
    "label" : "env_uitesting_shared_useallmodel_1",
    "autoLayout" : false,
    "staleState" : "none",
    "sourceSuggestions" : {
      "sources" : [ ]
    },
    "graphConfig" : {
      "modelConfig" : {
        "pre_hook" : [ ],
        "materialized" : "table",
        "post_hook" : [ ]
      },
      "userDefinedConfig" : {
        "vars" : {
          "v_float" : "10.12",
          "v_int_list" : "[1, 2, 3, 4, 5, 6]",
          "v_boolean" : "True",
          "v_dict" : "{ \"a\": 2, \"b\": \"hello\" }",
          "v_expression" : "'concat(c_struct.city, c_string)'",
          "v_int" : "22",
          "DATASET_ID" : "'1'"
        }
      }
    },
    "version" : 3
  },
  "processes" : {
    "orders##XlWrU5ja" : {
      "id" : "orders##XlWrU5ja",
      "component" : "Source",
      "metadata" : {
        "label" : "orders",
        "x" : 680,
        "y" : 3660,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "orders",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_suggestion_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "WHjnD6NV",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "USER_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "ORDER_DATE",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "STATUS",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "BSkE5lhl3kuOBmKFrVHH6$$tYBfJf76ooV5R4Cfw7Clx" : {
      "id" : "BSkE5lhl3kuOBmKFrVHH6$$tYBfJf76ooV5R4Cfw7Clx",
      "component" : "Aggregate",
      "metadata" : {
        "label" : "Aggregate_1_1",
        "slug" : "Aggregate_1_1",
        "x" : 420,
        "y" : 200,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "aggregate" : [ {
          "expression" : {
            "expression" : "CAST(customer_id AS int) > 5"
          },
          "alias" : "c1"
        }, {
          "expression" : {
            "expression" : "CAST(customer_id AS int) > 5\nand CAST(customer_id AS int) != 0\nor first_name LIKE '%A%'\nor ((1 & 1) == 1)\nor ((2 | 2) == 2)\nand 10 * CAST(customer_id AS int) == 20\nand last_name != first_name\nand (CAST(customer_id AS int) BETWEEN 10 and 20)\nand (array(10, 20, 30)[2] == 30)\nand (map(1, 'Hello', 2, 'World')[1] == 'Hello')\nand (10 ^ 20 == 50)\nand (map('three', 3).four == NULL)\nand (named_struct('a', 5, 'b', 'Spark').a == 5)\nand (1 = 2 and 1 == 2)\nand (1 >= 2 and 1 <= 2 and 1 != 3 or 2 > 4 or 4 < 5)\nand (\n      EXISTS (\n        array(1, NULL, 3),\n        \n        x -> x % 2 == 0\n      )\n    )\nor ilike('Spark', '_PARK')\nor (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\nand (1 IS DISTINCT FROM 5)\nand ('invalid' IS false)\nand isnull(1)\nand ('t' IS NOT true)\nand (1 <=> '1')\nand (1 <> CAST(customer_id AS int))\nand (10 - 2 + 10 == 8)\nand (NOT true)\nand (false or true)\nand (2 % 0 == 0)\nand ('Spark' || 'SQL' == 'SparkSQL')\nand (r'%SystemDrive%\\Users\\John' LIKE r'%SystemDrive%\\\\Users%')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (2L / 2L == 10)\nand (~ 0 == -1)\nand (base64(aes_encrypt('Spark', 'abcdefghijklmnop')) == NULL)\nand (CAST(aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop') AS STRING) == NULL)\nand (ascii('234') == 234)\nand (base64('Spark SQL') == NULL)\nand (bin(13) == NULL)\nand (binary('Spark SQL') == NULL)\nand (btrim('abcaabaSparkSQLabcaaba', 'abc') != NULL)\nand (char(65) != NULL)\nand (char_length('Spark SQL ') == 10)\nand (character_length('Spark SQL ') == 10)\nand (concat(customer_id, 'hello') != NULL)\nand (concat_ws(',', 'Spark', array('S', 'Q', NULL, 'L'), NULL) != NULL)\nand contains('SparkSQL', 'Spork')\nand (crc32('Spark') > 0)\nand chr(65) != NULL\nand (3 ^ 5 == 6)\nand (hex(encode('Spark SQL', 'US-ASCII')) != NULL)\nand endswith('SparkSQL', 'SQL')\nand (find_in_set('ab', 'abc,b,ab,c,def') == 2)\nand (format_number(12332.123456, 4) == 2)\nand (format_number(12332.123456, '#.###') == 10)\nand (format_string('Hello World %d %s', 100, 'days') != NULL)\nand (hex('Spark SQL') != NULL)\nand (r'%SystemDrive%\\Users\\John' LIKE '%SystemDrive%\\\\\\\\Users%')\nand (initcap('sPark sql') != NULL)\nand (instr('SparkSQL', 'R') == 2)\nand (lcase('LowerCase') != NULL)\nand (LEFT('Spark SQL', 3) != NULL)\nand (length('Spark SQL ') > 20)\nand (levenshtein('kitten', 'sitting') > 10)\nand (locate('bar', 'abcbarbar') > 2)\nand (locate('bar', 'abcbarbar', 5) > 2)\nand (lower('LowerCase') != NULL)\nand (lpad('hi', 1, '??') != NULL)\nand (hex(lpad(x'1020', 5, x'05')) != NULL)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (md5('Spark') != NULL)\nand (octet_length('Spark SQL') != NULL)\nand (parse_url('http://spark.apache.org/path?query=1', 'HOST') != NULL)\nand (position('bar', 'abcbarbar') > 10)\nand (position('bar', 'abcbarbar', 5) > 5)\nand (printf('Hello World %d %s', 100, 'days') != NULL)\nand (r'%SystemDrive%\\Users\\John' RLIKE r'%SystemDrive%\\\\Users.*')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) > 10)\nand (regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1) != NULL)\nand (regexp_replace('100-200', '(\\\\d+)', 'num') != NULL)\nand (repeat('123', 2) != NULL)\nand (replace('ABCabc', 'abc', 'DEF') != NULL)\nand (reverse('Spark SQL') != NULL)\nand (RIGHT('Spark SQL', 3) != NULL)\nand (rpad('hi', 5, 'ab') != NULL)\nand (hex(rpad(x'1020', 5, x'05')) != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (sentences('Hi there! Good morning.', 'en', 'US') != NULL)\nand (sha('Spark') != NULL)\nand (sha1('Spark') != NULL)\nand (sha2('Spark', 256) != NULL)\nand (soundex('Miller') != NULL)\nand (concat('1', space(2), '1') != NULL)\nand (('->' || split_part('Hello,world,!', ',', 1) || '<-') != NULL)\nand (('->' || split_part('', ',', 1) || '<-') != NULL)\nand (('->' || split_part('Hello,World,!', ',', 0) || '<-') != NULL)\nand (startswith('SparkSQL', 'Spark'))\nand (startswith(NULL, 'Spark'))\nand (substr('Spark SQL', 5, 1) != NULL)\nand (substring_index('www.apache.org', '.', 2) != NULL)\nand (CAST(to_binary('537061726B') AS STRING) != NULL)\nand (CAST(to_binary('537061726B', 'hex') AS STRING) != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (translate('AaBbCc', 'abc', '123') != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (ucase('SparkSql') != NULL)\nand (CAST(unbase64('U3BhcmsgU1FM') AS STRING) != NULL)\nand (decode(unhex('537061726B2053514C'), 'UTF-8') != NULL)\nand (upper('SparkSql') != NULL)\nand (10 / 2 == 5)\nand ((3 | 5) == 2)\nand ((DATE'2021-03-20' - INTERVAL '2' MONTH) != NULL)\nand (10 - 2 + 2 == 4)\nand (2 % 1.8 == 2)\nand (3 ^ 5 == 3)\nand (3 & 5 == 2)\nand (3 * 2 == 2)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (abs(-1) == 1)\nand (acos(1) == 1)\nand (acosh(1) == 1)\nand (asin(0) == 1)\nand (asinh(0) == 1)\nand (atan(0) == 1)\nand (atan2(0, 0) == 1)\nand (atanh(0) == 1)\nand (bigint(current_timestamp) > 1)\nand (bit_count(-1) > 1)\nand (bit_get(23Y, 1) == 1)\nand (bround(13.5, -1) == 1)\nand (round(13.5, -1) == 1)\nand (cbrt(27.0) == 3)\nand (ceil(3345.1, -2) == 1)\nand (ceiling(5.4) == 6)\nand (ceiling(3345.1, -2) == 1)\nand (conv('100', 2, 10) == 4)\nand (conv('FFFFFFFFFFFFFFFF', 16, 10) == 1)\nand (cos(pi()) == -1)\nand (cosh(0) == 1)\nand (cot(1) == 1)\nand (csc(pi() / 2) == 2)\nand (decimal('5.2') == 5)\nand (degrees(3.141592653589793) == 10)\nand (double('5.2') == 4)\nand (e() == 2)\nand (exp(1) == 2)\nand (expm1(0) == 1)\nand (factorial(2) == 2)\nand (float('5.2') == 5)\nand (floor(-0.1) == -1)\nand (floor(3345.1, -2) == 20)\nand (getbit(23Y, 0) == 1)\nand (hypot(3, 4) == 5)\nand (int(-5.6) == 5)\nand (isnan(CAST('NaN' AS double)))\nand (ln(1) == 1)\nand (log(10, 100) == 2)\nand (log1p(0) == 1)\nand (log2(2) == 1)\nand (log10(10) == 1)\nand (nanvl(CAST('NaN' AS DOUBLE), 123) == 2)\nand (negative(1) == -1)\nand (pmod(-10, 3) == 2)\nand (positive(-1) == -1)\nand (pow(2, 3) * power(2, 3) == 8)\nand (radians(180) == 10)\nand (rand(0) * random(0) == 1)\nand (randn(0) == 1)\nand (rint(12.3456) == 1)\nand (round(2.5, 0) == 3)\nand (sec(pi()) == -1)\nand (sin(0) == 0)\nand (shiftleft(2, 1) == 2)\nand (shiftright(4, 1) == 2)\nand (shiftrightunsigned(4, 1) == 2)\nand (sign(40) == 1)\nand (signum(40) == 1)\nand (sinh(0) == 1)\nand (smallint(-5.6) == 5)\nand (sqrt(4) == 2)\nand (tan(0) == 1)\nand (tanh(0) == 1)\nand (tinyint('12') * tinyint(5.4) == 1)\nand (try_add(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_add(1, 2) == 3)\nand (try_divide(3, 2) == 3)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand (try_subtract(1, 2) == 2)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_subtract(-128Y, 1Y) != NULL)\nand (width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2) == 3)\nand (width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) == 10)\nand (array(10, 20, 30) != NULL)\nand (\n      (\n        aggregate(array(1, 2, 3), 0, \n        (acc, x) -> acc + x, \n        acc -> acc * 10)\n      ) == 1\n    )\nand (array_contains(array(1, 2, 3), 2))\nand (array_distinct(array(1, 2, 3, NULL, 3)) != NULL)\nand (array_except(array(1, 2, 2, 3), array(1, 1, 3, 5)) != NULL)\nand (array_intersect(array(1, 2, 3), array(1, 3, 3, 5)) != NULL)\nand (array_join(array('hello', 'world'), ',') != NULL)\nand (array_join(array('hello', NULL, 'world'), ',', '*') == NULL)\nand (array_max(array(1, 20, NULL, 3)) > 10)\nand (array_min(array(1, 20, NULL, 3)) == 1)\nand (array_position(array(3, 2, 1, 4, 1), 1) == 2)\nand (array_remove(array(1, 2, 3, NULL, 3, 2), 3) != NULL)\nand (array_repeat('123', 2) != NULL)\nand (array_size(array(1, NULL, 3, NULL)) == 2)\nand (array_sort(array('bc', 'ab', 'dc')) != NULL)\nand (array_union(array(1, 2, 2, 3), array(1, 3, 5)) != NULL)\nand (arrays_overlap(array(1, 2, NULL, 3), array(NULL, 4, 5)) == NULL)\nand (arrays_zip(array(1, 2), array('shoe', 'string', 'budget')) == NULL)\nand (cardinality(array('b', 'd', 'c', 'a')) == 2)\nand (concat(array(1, 2, 3), array(4, 5), array(6)) != NULL)\nand (element_at(map(1, 'a', 2, 'b'), 2) == NULL)\nand (\n      EXISTS (\n        array(1, 2, 3),\n        \n        x -> x % 2 == 0\n      )\n    )\nand (\n      EXISTS (\n        array(0, NULL, 2, 3, NULL),\n        \n        x -> x IS NULL\n      )\n    )\nand (\n      filter(array(1, 2, 3), \n      x -> x % 2 == 1) != NULL\n    )\nand (flatten(array(array(1, 2), array(3, 4))) != NULL)\nand (\n      forall(array(1, 2, 3), \n      x -> x % 2 == 0) == NULL\n    )\nand (reverse(array(2, 1, 4, 3)) != NULL)\nand (sequence(5, 1) != NULL)\nand (cardinality(array('b', 'd', 'c', 'a')) == 10)\nand (slice(array(1, 2, 3, 4), 2, 2) != NULL)\nand (sort_array(array('b', 'd', NULL, 'c', 'a'), true) != NULL)\nand (\n      transform(array(1, 2, 3), \n      x -> x + 1) != NULL\n    )\nand (try_element_at(array(1, 2, 3), 2) == 2)\nand (\n      zip_with(array('a', 'b', 'c'), array('d', 'e', 'f'), \n      (x, y) -> concat(x, y)) != NULL\n    )\nand (map(1, 'Hello', 2, 'World')[1] != NULL)\nand (cardinality(map('a', 1, 'b', 2)) == 2)\nand (element_at(map(1, 'a', 2, 'b'), 3) == NULL)\nand (map(1.0, '2', 3.0, '4') IS NOT NULL)\nand (map_concat(map(1, 'a', 2, 'b'), map(3, 'c')) IS NOT NULL)\nand (map_contains_key(map(1, 'a', 2, 'b'), 2))\nand (map_entries(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_filter(map(1, 0, 2, 2, 3, -1), \n      (k, v) -> k > v) IS NOT NULL\n    )\nand (map_from_arrays(array(1.0, 3.0), array('2', '4')) IS NOT NULL)\nand (map_from_entries(array(struct(1, 'a'), struct(2, 'b'))) IS NOT NULL)\nand (map_keys(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (map_values(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_zip_with(map(1, 'a', 2, 'b'), map(1, 'x', 2, 'y'), \n      (k, v1, v2) -> concat(v1, v2)) IS NOT NULL\n    )\nand (cardinality(map('a', 1, 'b', 2)) == 2)\nand (str_to_map('a:1,b:2,c:3', ',', ':') IS NOT NULL)\nand (\n      transform_keys(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n      (k, v) -> k + 1) IS NOT NULL\n    )\nand (\n      transform_values(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n      (k, v) -> k + v) IS NOT NULL\n    )\nand (try_element_at(map(1, 'a', 2, 'b'), 2) IS NOT NULL)\nand ((INTERVAL '3:15' HOUR TO MINUTE / 3) IS NOT NULL)\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand (typeof(current_timestamp - (current_date + INTERVAL '1' DAY)) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (add_months('2016-08-31', -6) != NULL)\nand (current_date() != NULL)\nand (current_timestamp() != NULL)\nand (current_timezone() != NULL)\nand (date('2021-03-21') != NULL)\nand (date_add('2016-07-30', 1) != NULL)\nand (date_format('2016-04-08', 'y') == 2016)\nand (date_from_unix_date(1) != NULL)\nand (date_sub('2016-07-30', 1) != NULL)\nand (date_trunc('YEAR', '2015-03-05T09:32:05.359') != NULL)\nand (datediff('2009-07-31', '2009-07-30') == 1)\nand (day('2009-07-30') == 30)\nand (dayofmonth('2009-07-30') == 30)\nand (dayofweek('2009-07-30') == 5)\nand (dayofyear('2016-04-09') == 100)\nand (EXTRACT(SECONDS FROM INTERVAL '5:00:30.001' HOUR TO SECOND) == 30)\nand (EXTRACT(WEEK FROM TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') != NULL)\nand (from_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (from_utc_timestamp('2016-08-31', 'Asia/Seoul') != NULL)\nand (hour('2009-07-30 12:58:59') == 10)\nand (last_day('2009-01-12') IS NOT NULL)\nand (make_date(2013, 7, 15) IS NOT NULL)\nand (make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)\nand (make_ym_interval(100, 5) IS NOT NULL)\nand (minute('2009-07-30 12:58:59') == 58)\nand (month('2016-07-30') == 7)\nand (months_between('1997-02-28 10:30:00', '1996-10-30') == 3)\nand (months_between('1997-02-28 10:30:00', '1996-10-30', false) == 2)\nand (next_day('2015-01-14', 'TU') != NULL)\nand (now() != NULL)\nand (quarter('2016-08-31') == 3)\nand (second('2009-07-30 12:58:59') == 59)\nand (timestamp(123) != NULL)\nand (timestamp('2020-04-30 12:25:13.45') != NULL)\nand (timestamp_micros(1230219000123123) != NULL)\nand (timestamp_millis(1230219000123) != NULL)\nand (timestamp_seconds(1230219000) != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (trunc('2015-10-27', 'YEAR') != NULL)\nand (trunc('2019-08-04', 'quarter') != NULL)\nand (try_add(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_add(DATE'2021-03-31', INTERVAL '1' MONTH) != NULL)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (try_subtract(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (unix_date(DATE('1970-01-02')) == 1)\nand (unix_micros(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_millis(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 1)\nand (weekday(DATE'2009-07-30') == 1)\nand (EXTRACT(DAYOFWEEK_ISO FROM DATE'2009-07-30') == 4)\nand (weekofyear('2008-02-20') == 8)\nand (year('2016-07-30') == 2016)\nand (array(1, 2, 3) != NULL)\nand (bigint('5') == 5)\nand (binary('Spark SQL') != NULL)\nand (boolean(1))\nand (CAST(5.6 AS DECIMAL (2, 0)) != NULL)\nand (CAST(INTERVAL '1-2' YEAR TO MONTH AS INTEGER) == 12)\nand (date('2021-03-21') != NULL)\nand (decimal('5.2') == 5)\nand (double('5.2') / 2 == 5)\nand (float('5.2') / 2 == 2)\nand (int('5') == 5)\nand (make_date(2013, 7, 15) != NULL)\nand (make_dt_interval(100, 13) != NULL)\nand (make_ym_interval(100, 5) == NULL)\nand (map(1.0, '2', 3.0, '4') IS NOT NULL)\nand (named_struct('a', 1, 'b', 2, 'c', 3) IS NOT NULL)\nand (smallint('5') == 5)\nand (struct(1, 2, 3) IS NOT NULL)\nand (tinyint('12') == 12)\nand (timestamp('2020-04-30 12:25:13.45') != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31 00:12:00') != NULL)\nand (from_csv('1, 0.8', 'a INT, b DOUBLE') != NULL)\nand (schema_of_csv('1,abc') != NULL)\nand (json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') == 5)\nand (json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') != NULL)\nand (schema_of_json('[{\"col\":01}]', map('allowNumericLeadingZeros', 'true')) != NULL)\nand (to_json(named_struct('a', 1, 'b', 2)) != NULL)\nand (to_json(map(named_struct('a', 1), named_struct('b', 2))) != NULL)\nand (to_json(array((map('a', 1)))) != NULL)\nand (xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()') != NULL)\nand (xpath_boolean('<a><b>1</b></a>', 'a/b'))\nand (xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 3)\nand (xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c') != NULL)\nand (\n      assert_true(\n        0 < 1) == NULL\n    )\nand (\n      (\n        CASE\n          WHEN 1 > 0\n            THEN 1\n          WHEN 2 > 0\n            THEN 2.0\n          ELSE 1.2\n        END\n      ) == 1\n    )\nand (\n      (\n        CASE 3\n          WHEN 1\n            THEN 'A'\n          WHEN 2\n            THEN 'B'\n          WHEN 3\n            THEN 'C'\n        END\n      ) != NULL\n    )\nand (coalesce(2, 5 / 0) == 2)\nand (current_catalog() != NULL)\nand (current_database() != NULL)\nand (current_user() != NULL)\nand (decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks') != NULL)\nand (elt(1, 'scala', 'java') != NULL)\nand (greatest(10, 9, 2, 4, 3) == 10)\nand (hash('Spark', array(123), 2) != NULL)\nand (\n      if(\n        1 < 2, \n        'a', \n        'b') != NULL\n    )\nand (ifnull(NULL, array('2')) != NULL)\nand (input_file_block_length() == -1)\nand (input_file_block_start() == -1)\nand (isnull(1))\nand (isnotnull(1))\nand (least(10, 9, 2, 4, 3) == 2)\nand (monotonically_increasing_id() > 10)\nand (nullif(2, 2) == NULL)\nand (nvl(NULL, 2) == 2)\nand (nvl2(NULL, 2, 1) == 1)\nand (typeof(1) != NULL)\nand (uuid() != NULL)\nand (xxhash64('Spark', array(123), 2) != NULL)\nand ('20'::INTEGER == 20)\nand like('Spark', '_park')\nand ('Spark' LIKE SOME('_park', '_ock'))\nand (bitmap_count(x'00') == 10)\nand (charindex('bar', 'abcbarbar') == 1)\nand (decode(x'FEFF0053007000610072006B002000530051004C', 'UTF-16') != NULL)\nand (like('Spark', '_park'))\nand (len('Spark SQL ') > 10)\nand (levenshtein('kitten', 'sitting', 4) > 10)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', 'Z', 'z', '9', 'X') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', lowerChar => 'z', upperChar => 'X') != NULL)\nand (mask('AaBb123-&ASDXYZ921312asd', NULL, NULL, NULL, NULL) != NULL)\nand (overlay('Spark SQL' PLACING '_' FROM 6) != NULL)\nand (overlay('Spark SQL' PLACING 'tructured' FROM 2 FOR 4) != NULL)\nand (overlay(encode('Spark SQL', 'utf-8') PLACING encode('_', 'utf-8') FROM 6) != NULL)\nand (position('bar' IN 'abcbarbar') > 2)\nand (regexp_count('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en') > 2)\nand (regexp_instr('Mary had a little lamb', NULL) != NULL)\nand (regexp_substr(NULL, 'Ste(v|ph)en') != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (string(4) != NULL)\nand (substr('Spark SQL', -3) != NULL)\nand (substr('Spark SQL' FROM 5 FOR 1) != NULL)\nand (substr('Spark SQL' FROM -3) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_char(DATE'2016-04-08', 'y') != NULL)\nand (to_char(encode('abc', 'utf-8'), 'utf-8') != NULL)\nand (to_varchar(454, '999') != NULL)\nand (to_varchar(DATE'2016-04-08', 'y') != NULL)\nand (to_varchar(x'537061726b2053514c', 'hex') != NULL)\nand (TRIM( 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(BOTH 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(LEADING 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(TRAILING 'SL' FROM 'SSparkSQLS') != NULL)\nand (\n      CAST(try_aes_decrypt(\n        unbase64('MTIzNDU2Nzg5MDEyMdXvR41sJqwZ6hnTU8FRTTtXbL8yeChIZA=='), \n        '1234567890abcdef', \n        'GCM', \n        'DEFAULT', \n        'Some AAD') AS STRING) != NULL\n    )\nand (url_decode('http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1') != NULL)\nand (url_encode('http://spark.apache.org/path?query=1') != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' + INTERVAL '3' SECOND) != NULL)\nand (bit_reverse(-1) == -1)\nand (bitmap_bit_position(-32768) == 1)\nand (bitmap_bucket_number(-32768) == 1)\nand (MOD(2, 1.8) == 2)\nand (array_append(array(1, 2, 3), 0) == NULL)\nand (array_compact(array(1, 2, NULL, 3, NULL, 3)) == NULL)\nand (array_insert(array('a', 'b', 'c'), 1, 'z') != NULL)\nand (array_prepend(array(1, 2, 3), 0) != NULL)\nand (get(array(1, 2, 3), 2) != NULL)\nand (\n      reduce(array(1, 2, 3), 0, \n      (acc, x) -> acc + x) == 2\n    )\nand (shuffle(array(1, 20, 3, 5)) != NULL)\nand (map_contains_key(map(1, 'a', 2, 'b'), 2))\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand (date_diff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (date_part('SECONDS', TIMESTAMP'2019-10-01 00:00:01.000001') == 1)\nand (date_part('Week', TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (dateadd('2016-07-30', 1) != NULL)\nand (dateadd(MICROSECOND, 5, TIMESTAMP'2022-02-28 00:00:00') != NULL)\nand (datediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 11:59:59') == 0)\nand (make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887, 'CET') IS NOT NULL)\nand (make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)\nand (now() != NULL)\nand (timediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (timestampdiff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (to_unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 100)\nand (try_to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand ('20'::INTEGER == 20)\nand (make_interval(100, 11) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)\nand (string(5) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_varchar(454, '999') IS NOT NULL)\nand (from_json('{\"a\":1, \"b\":0.8}', 'a INT, b DOUBLE') IS NOT NULL)\nand (get_json_object('{\"a\":\"b\"}', '$.a') IS NOT NULL)\nand (to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), map('timestampFormat', 'dd/MM/yyyy')) IS NOT NULL)\nand (to_csv(named_struct('a', 1, 'b', 2)) IS NOT NULL)\nand (from_xml('<p><time>26/08/2015</time></p>', 'time Timestamp', map('timestampFormat', 'dd/MM/yyyy')) != NULL)\nand (schema_of_xml('<p><a attr=\"2\">1</a><a>3</a></p>', map('excludeAttribute', 'true')) IS NOT NULL)\nand (current_metastore() != NULL)\nand (current_schema() != NULL)\nand (current_version() != NULL)\nand (equal_null(2, 2))\nand (\n      iff(\n        1 < 2, \n        'a', \n        'b') == 'a'\n    )\nand (is_account_group_member('admins'))\nand (is_member('admins'))\nand (luhn_check('12345') == NULL)\nand (user() != NULL)\nand (h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0) != NULL)\nand (h3_coverash3string('{\"type\":\"LineString\",\"coordinates\":[[-122.4194,37.7749],[-118.2437,34.0522],[-74.0060,40.7128]]}', 1) != NULL)\nand (h3_longlatash3(-122.4783, 37.8199, 13) > 0)\nand (h3_longlatash3string(-122.4783, 37.8199, 13) != NULL)\nand (h3_pointash3('POINT(-122.4783 37.8199)', 13) > 0)\nand (h3_pointash3string('{\"type\":\"Point\",\"coordinates\":[]}', 15) == NULL)\nand (h3_pointash3string('POINT(-122.4783 37.8199)', 13) != NULL)\nand (\n      h3_polyfillash3(\n        unhex(\n          '0103000000010000000400000050fc1873d79a5ec0d0d556ec2fe342404182e2c7988f5dc0f46c567dae064140aaf1d24d628052c05e4bc8073d5b444050fc1873d79a5ec0d0d556ec2fe34240'), \n        2) != NULL\n    )\nand (h3_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3('Not-a-valid-rep', 2) == NULL)\nand (h3_try_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_boundaryasgeojson('8009fffffffffff') != NULL)\nand (h3_boundaryasgeojson(599686042433355775) != NULL)\nand (hex(h3_boundaryaswkb(599686042433355775)) != NULL)\nand (h3_boundaryaswkt(599686042433355775) != NULL)\nand (h3_centerasgeojson(599686042433355775) != NULL)\nand (hex(h3_centeraswkb('8009fffffffffff')) == NULL)\nand (h3_centeraswkt('8009fffffffffff') != NULL)\nand (h3_h3tostring(599686042433355775) != NULL)\nand (h3_stringtoh3('85283473fffffff') == NULL)\nand (h3_ischildof('88283471b9fffff', '85283473fffffff'))\nand (h3_ispentagon(590112357393367039))\nand (h3_isvalid('85283473fffffff'))\nand (h3_try_validate(590112357393367039) != NULL)\nand (h3_validate(590112357393367039) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_hexring(599686042433355775, 1) != NULL)\nand (h3_kring(599686042433355775, 1) != NULL)\nand (h3_kringdistances(599686042433355775, 1) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_maxchild(599686042433355775, 10) != NULL)\nand (h3_minchild(599686042433355775, 10) != NULL)\nand (h3_resolution(599686042433355775) == 5)\nand (h3_tochildren(599686042433355775, 6) != NULL)\nand (h3_toparent(599686042433355775, 0) != NULL)\nand (\n      h3_compact(\n        ARRAY(\n          599686042433355775, \n          599686030622195711, \n          599686044580839423, \n          599686038138388479, \n          599686043507097599, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686040285872127, \n          599686041359613951, \n          599686039212130303, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647)) != NULL\n    )\nand (\n      h3_uncompact(\n        ARRAY(\n          599686030622195711, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647, \n          595182446027210751), \n        5) != NULL\n    )"
          },
          "alias" : "c2"
        } ],
        "allowSelection" : true,
        "condition" : {
          "expression" : ""
        },
        "activeTab" : "aggregate",
        "columnsSelector" : [ "t6lUxz_Yy4asQG4QquDQi$$ZxqIObK9gwPceU_vojNL0##last_name", "t6lUxz_Yy4asQG4QquDQi$$ZxqIObK9gwPceU_vojNL0##first_name", "t6lUxz_Yy4asQG4QquDQi$$ZxqIObK9gwPceU_vojNL0##customer_id" ],
        "groupBy" : [ {
          "expression" : {
            "expression" : "last_name"
          }
        }, {
          "expression" : {
            "expression" : "first_name"
          }
        }, {
          "expression" : {
            "expression" : "customer_id"
          }
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "t6lUxz_Yy4asQG4QquDQi$$ZxqIObK9gwPceU_vojNL0",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "MtNOwO9VVpDFRBKNcYVuq$$WOsK4qJnmspQkl4dPQDvg",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c2",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Reformat_2##pFqAYuoS" : {
      "id" : "Reformat_2##pFqAYuoS",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Reformat_2",
        "x" : 1040,
        "y" : 3860,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ "pH3Pkt0G##ID", "pH3Pkt0G##ORDER_ID", "pH3Pkt0G##PAYMENT_METHOD", "pH3Pkt0G##AMOUNT" ],
        "expressions" : [ {
          "expression" : {
            "expression" : "ID"
          },
          "alias" : "ID"
        }, {
          "expression" : {
            "expression" : "ORDER_ID"
          },
          "alias" : "ORDER_ID"
        }, {
          "expression" : {
            "expression" : "PAYMENT_METHOD"
          },
          "alias" : "`PAYMENT_METHOD`"
        }, {
          "expression" : {
            "expression" : "AMOUNT"
          },
          "alias" : "AMOUNT"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "pH3Pkt0G",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "ORDER_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "PAYMENT_METHOD",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "AMOUNT",
              "dataType" : {
                "type" : "Float"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "ZEgrwZls",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "ORDER_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "PAYMENT_METHOD",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "AMOUNT",
              "dataType" : {
                "type" : "Float"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "store_returns##xzi6NnDO" : {
      "id" : "store_returns##xzi6NnDO",
      "component" : "Source",
      "metadata" : {
        "label" : "store_returns",
        "x" : 420,
        "y" : 3260,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "store_returns",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_suggestion_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "ogOof79b",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "SR_RETURNED_DATE_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_TIME_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_ITEM_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_CUSTOMER_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_CDEMO_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_HDEMO_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_ADDR_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_STORE_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_REASON_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_TICKET_NUMBER",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_QUANTITY",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_AMT",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_TAX",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_AMT_INC_TAX",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_FEE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_SHIP_COST",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_REFUNDED_CASH",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_REVERSED_CHARGE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_STORE_CREDIT",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_NET_LOSS",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "hISx4s6uMTEFzHvTJ_fRg$$rk1yH8B8lNvan7_I2QuMO" : {
      "id" : "hISx4s6uMTEFzHvTJ_fRg$$rk1yH8B8lNvan7_I2QuMO",
      "component" : "Join",
      "metadata" : {
        "label" : "Join_2",
        "slug" : "Join_2",
        "x" : 680,
        "y" : 1360,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "conditions" : [ {
          "alias" : "in1",
          "expression" : {
            "expression" : "in0.customer_id=in1.customer_id1"
          },
          "joinType" : "inner"
        } ],
        "expressions" : [ {
          "expression" : {
            "expression" : "CAST(customer_id AS int) > 5"
          },
          "alias" : "c1"
        }, {
          "expression" : {
            "expression" : "CAST(customer_id AS int) > 5\nand CAST(customer_id AS int) != 0\nor first_name LIKE '%A%'\nor ((1 & 1) == 1)\nor ((2 | 2) == 2)\nand 10 * CAST(customer_id AS int) == 20\nand last_name != first_name\nand (CAST(customer_id AS int) BETWEEN 10 and 20)\nand (array(10, 20, 30)[2] == 30)\nand (map(1, 'Hello', 2, 'World')[1] == 'Hello')\nand (10 ^ 20 == 50)\nand (map('three', 3).four == NULL)\nand (named_struct('a', 5, 'b', 'Spark').a == 5)\nand (1 = 2 and 1 == 2)\nand (1 >= 2 and 1 <= 2 and 1 != 3 or 2 > 4 or 4 < 5)\nand (\n      EXISTS (\n        array(1, NULL, 3),\n        \n        x -> x % 2 == 0\n      )\n    )\nor ilike('Spark', '_PARK')\nor (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\nand (1 IS DISTINCT FROM 5)\nand ('invalid' IS false)\nand isnull(1)\nand ('t' IS NOT true)\nand (1 <=> '1')\nand (1 <> CAST(customer_id AS int))\nand (10 - 2 + 10 == 8)\nand (NOT true)\nand (false or true)\nand (2 % 0 == 0)\nand ('Spark' || 'SQL' == 'SparkSQL')\nand (r'%SystemDrive%\\Users\\John' LIKE r'%SystemDrive%\\\\Users%')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (2L / 2L == 10)\nand (~ 0 == -1)\nand (base64(aes_encrypt('Spark', 'abcdefghijklmnop')) == NULL)\nand (CAST(aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop') AS STRING) == NULL)\nand (ascii('234') == 234)\nand (base64('Spark SQL') == NULL)\nand (bin(13) == NULL)\nand (binary('Spark SQL') == NULL)\nand (btrim('abcaabaSparkSQLabcaaba', 'abc') != NULL)\nand (char(65) != NULL)\nand (char_length('Spark SQL ') == 10)\nand (character_length('Spark SQL ') == 10)\nand (concat(customer_id, 'hello') != NULL)\nand (concat_ws(',', 'Spark', array('S', 'Q', NULL, 'L'), NULL) != NULL)\nand contains('SparkSQL', 'Spork')\nand (crc32('Spark') > 0)\nand chr(65) != NULL\nand (3 ^ 5 == 6)\nand (hex(encode('Spark SQL', 'US-ASCII')) != NULL)\nand endswith('SparkSQL', 'SQL')\nand (find_in_set('ab', 'abc,b,ab,c,def') == 2)\nand (format_number(12332.123456, 4) == 2)\nand (format_number(12332.123456, '#.###') == 10)\nand (format_string('Hello World %d %s', 100, 'days') != NULL)\nand (hex('Spark SQL') != NULL)\nand (r'%SystemDrive%\\Users\\John' LIKE '%SystemDrive%\\\\\\\\Users%')\nand (initcap('sPark sql') != NULL)\nand (instr('SparkSQL', 'R') == 2)\nand (lcase('LowerCase') != NULL)\nand (LEFT('Spark SQL', 3) != NULL)\nand (length('Spark SQL ') > 20)\nand (levenshtein('kitten', 'sitting') > 10)\nand (locate('bar', 'abcbarbar') > 2)\nand (locate('bar', 'abcbarbar', 5) > 2)\nand (lower('LowerCase') != NULL)\nand (lpad('hi', 1, '??') != NULL)\nand (hex(lpad(x'1020', 5, x'05')) != NULL)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (md5('Spark') != NULL)\nand (octet_length('Spark SQL') != NULL)\nand (parse_url('http://spark.apache.org/path?query=1', 'HOST') != NULL)\nand (position('bar', 'abcbarbar') > 10)\nand (position('bar', 'abcbarbar', 5) > 5)\nand (printf('Hello World %d %s', 100, 'days') != NULL)\nand (r'%SystemDrive%\\Users\\John' RLIKE r'%SystemDrive%\\\\Users.*')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) > 10)\nand (regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1) != NULL)\nand (regexp_replace('100-200', '(\\\\d+)', 'num') != NULL)\nand (repeat('123', 2) != NULL)\nand (replace('ABCabc', 'abc', 'DEF') != NULL)\nand (reverse('Spark SQL') != NULL)\nand (RIGHT('Spark SQL', 3) != NULL)\nand (rpad('hi', 5, 'ab') != NULL)\nand (hex(rpad(x'1020', 5, x'05')) != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (sentences('Hi there! Good morning.', 'en', 'US') != NULL)\nand (sha('Spark') != NULL)\nand (sha1('Spark') != NULL)\nand (sha2('Spark', 256) != NULL)\nand (soundex('Miller') != NULL)\nand (concat('1', space(2), '1') != NULL)\nand (('->' || split_part('Hello,world,!', ',', 1) || '<-') != NULL)\nand (('->' || split_part('', ',', 1) || '<-') != NULL)\nand (('->' || split_part('Hello,World,!', ',', 0) || '<-') != NULL)\nand (startswith('SparkSQL', 'Spark'))\nand (startswith(NULL, 'Spark'))\nand (substr('Spark SQL', 5, 1) != NULL)\nand (substring_index('www.apache.org', '.', 2) != NULL)\nand (CAST(to_binary('537061726B') AS STRING) != NULL)\nand (CAST(to_binary('537061726B', 'hex') AS STRING) != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (translate('AaBbCc', 'abc', '123') != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (ucase('SparkSql') != NULL)\nand (CAST(unbase64('U3BhcmsgU1FM') AS STRING) != NULL)\nand (decode(unhex('537061726B2053514C'), 'UTF-8') != NULL)\nand (upper('SparkSql') != NULL)\nand (10 / 2 == 5)\nand ((3 | 5) == 2)\nand ((DATE'2021-03-20' - INTERVAL '2' MONTH) != NULL)\nand (10 - 2 + 2 == 4)\nand (2 % 1.8 == 2)\nand (3 ^ 5 == 3)\nand (3 & 5 == 2)\nand (3 * 2 == 2)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (abs(-1) == 1)\nand (acos(1) == 1)\nand (acosh(1) == 1)\nand (asin(0) == 1)\nand (asinh(0) == 1)\nand (atan(0) == 1)\nand (atan2(0, 0) == 1)\nand (atanh(0) == 1)\nand (bigint(current_timestamp) > 1)\nand (bit_count(-1) > 1)\nand (bit_get(23Y, 1) == 1)\nand (bround(13.5, -1) == 1)\nand (round(13.5, -1) == 1)\nand (cbrt(27.0) == 3)\nand (ceil(3345.1, -2) == 1)\nand (ceiling(5.4) == 6)\nand (ceiling(3345.1, -2) == 1)\nand (conv('100', 2, 10) == 4)\nand (conv('FFFFFFFFFFFFFFFF', 16, 10) == 1)\nand (cos(pi()) == -1)\nand (cosh(0) == 1)\nand (cot(1) == 1)\nand (csc(pi() / 2) == 2)\nand (decimal('5.2') == 5)\nand (degrees(3.141592653589793) == 10)\nand (double('5.2') == 4)\nand (e() == 2)\nand (exp(1) == 2)\nand (expm1(0) == 1)\nand (factorial(2) == 2)\nand (float('5.2') == 5)\nand (floor(-0.1) == -1)\nand (floor(3345.1, -2) == 20)\nand (getbit(23Y, 0) == 1)\nand (hypot(3, 4) == 5)\nand (int(-5.6) == 5)\nand (isnan(CAST('NaN' AS double)))\nand (ln(1) == 1)\nand (log(10, 100) == 2)\nand (log1p(0) == 1)\nand (log2(2) == 1)\nand (log10(10) == 1)\nand (nanvl(CAST('NaN' AS DOUBLE), 123) == 2)\nand (negative(1) == -1)\nand (pmod(-10, 3) == 2)\nand (positive(-1) == -1)\nand (pow(2, 3) * power(2, 3) == 8)\nand (radians(180) == 10)\nand (rand(0) * random(0) == 1)\nand (randn(0) == 1)\nand (rint(12.3456) == 1)\nand (round(2.5, 0) == 3)\nand (sec(pi()) == -1)\nand (sin(0) == 0)\nand (shiftleft(2, 1) == 2)\nand (shiftright(4, 1) == 2)\nand (shiftrightunsigned(4, 1) == 2)\nand (sign(40) == 1)\nand (signum(40) == 1)\nand (sinh(0) == 1)\nand (smallint(-5.6) == 5)\nand (sqrt(4) == 2)\nand (tan(0) == 1)\nand (tanh(0) == 1)\nand (tinyint('12') * tinyint(5.4) == 1)\nand (try_add(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_add(1, 2) == 3)\nand (try_divide(3, 2) == 3)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand (try_subtract(1, 2) == 2)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_subtract(-128Y, 1Y) != NULL)\nand (width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2) == 3)\nand (width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) == 10)\nand (array(10, 20, 30) != NULL)\nand (\n      (\n        aggregate(array(1, 2, 3), 0, \n        (acc, x) -> acc + x, \n        acc -> acc * 10)\n      ) == 1\n    )\nand (array_contains(array(1, 2, 3), 2))\nand (array_distinct(array(1, 2, 3, NULL, 3)) != NULL)\nand (array_except(array(1, 2, 2, 3), array(1, 1, 3, 5)) != NULL)\nand (array_intersect(array(1, 2, 3), array(1, 3, 3, 5)) != NULL)\nand (array_join(array('hello', 'world'), ',') != NULL)\nand (array_join(array('hello', NULL, 'world'), ',', '*') == NULL)\nand (array_max(array(1, 20, NULL, 3)) > 10)\nand (array_min(array(1, 20, NULL, 3)) == 1)\nand (array_position(array(3, 2, 1, 4, 1), 1) == 2)\nand (array_remove(array(1, 2, 3, NULL, 3, 2), 3) != NULL)\nand (array_repeat('123', 2) != NULL)\nand (array_size(array(1, NULL, 3, NULL)) == 2)\nand (array_sort(array('bc', 'ab', 'dc')) != NULL)\nand (array_union(array(1, 2, 2, 3), array(1, 3, 5)) != NULL)\nand (arrays_overlap(array(1, 2, NULL, 3), array(NULL, 4, 5)) == NULL)\nand (arrays_zip(array(1, 2), array('shoe', 'string', 'budget')) == NULL)\nand (cardinality(array('b', 'd', 'c', 'a')) == 2)\nand (concat(array(1, 2, 3), array(4, 5), array(6)) != NULL)\nand (element_at(map(1, 'a', 2, 'b'), 2) == NULL)\nand (\n      EXISTS (\n        array(1, 2, 3),\n        \n        x -> x % 2 == 0\n      )\n    )\nand (\n      EXISTS (\n        array(0, NULL, 2, 3, NULL),\n        \n        x -> x IS NULL\n      )\n    )\nand (\n      filter(array(1, 2, 3), \n      x -> x % 2 == 1) != NULL\n    )\nand (flatten(array(array(1, 2), array(3, 4))) != NULL)\nand (\n      forall(array(1, 2, 3), \n      x -> x % 2 == 0) == NULL\n    )\nand (reverse(array(2, 1, 4, 3)) != NULL)\nand (sequence(5, 1) != NULL)\nand (cardinality(array('b', 'd', 'c', 'a')) == 10)\nand (slice(array(1, 2, 3, 4), 2, 2) != NULL)\nand (sort_array(array('b', 'd', NULL, 'c', 'a'), true) != NULL)\nand (\n      transform(array(1, 2, 3), \n      x -> x + 1) != NULL\n    )\nand (try_element_at(array(1, 2, 3), 2) == 2)\nand (\n      zip_with(array('a', 'b', 'c'), array('d', 'e', 'f'), \n      (x, y) -> concat(x, y)) != NULL\n    )\nand (map(1, 'Hello', 2, 'World')[1] != NULL)\nand (cardinality(map('a', 1, 'b', 2)) == 2)\nand (element_at(map(1, 'a', 2, 'b'), 3) == NULL)\nand (map(1.0, '2', 3.0, '4') IS NOT NULL)\nand (map_concat(map(1, 'a', 2, 'b'), map(3, 'c')) IS NOT NULL)\nand (map_contains_key(map(1, 'a', 2, 'b'), 2))\nand (map_entries(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_filter(map(1, 0, 2, 2, 3, -1), \n      (k, v) -> k > v) IS NOT NULL\n    )\nand (map_from_arrays(array(1.0, 3.0), array('2', '4')) IS NOT NULL)\nand (map_from_entries(array(struct(1, 'a'), struct(2, 'b'))) IS NOT NULL)\nand (map_keys(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (map_values(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_zip_with(map(1, 'a', 2, 'b'), map(1, 'x', 2, 'y'), \n      (k, v1, v2) -> concat(v1, v2)) IS NOT NULL\n    )\nand (cardinality(map('a', 1, 'b', 2)) == 2)\nand (str_to_map('a:1,b:2,c:3', ',', ':') IS NOT NULL)\nand (\n      transform_keys(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n      (k, v) -> k + 1) IS NOT NULL\n    )\nand (\n      transform_values(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n      (k, v) -> k + v) IS NOT NULL\n    )\nand (try_element_at(map(1, 'a', 2, 'b'), 2) IS NOT NULL)\nand ((INTERVAL '3:15' HOUR TO MINUTE / 3) IS NOT NULL)\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand (typeof(current_timestamp - (current_date + INTERVAL '1' DAY)) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (add_months('2016-08-31', -6) != NULL)\nand (current_date() != NULL)\nand (current_timestamp() != NULL)\nand (current_timezone() != NULL)\nand (date('2021-03-21') != NULL)\nand (date_add('2016-07-30', 1) != NULL)\nand (date_format('2016-04-08', 'y') == 2016)\nand (date_from_unix_date(1) != NULL)\nand (date_sub('2016-07-30', 1) != NULL)\nand (date_trunc('YEAR', '2015-03-05T09:32:05.359') != NULL)\nand (datediff('2009-07-31', '2009-07-30') == 1)\nand (day('2009-07-30') == 30)\nand (dayofmonth('2009-07-30') == 30)\nand (dayofweek('2009-07-30') == 5)\nand (dayofyear('2016-04-09') == 100)\nand (EXTRACT(SECONDS FROM INTERVAL '5:00:30.001' HOUR TO SECOND) == 30)\nand (EXTRACT(WEEK FROM TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') != NULL)\nand (from_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (from_utc_timestamp('2016-08-31', 'Asia/Seoul') != NULL)\nand (hour('2009-07-30 12:58:59') == 10)\nand (last_day('2009-01-12') IS NOT NULL)\nand (make_date(2013, 7, 15) IS NOT NULL)\nand (make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)\nand (make_ym_interval(100, 5) IS NOT NULL)\nand (minute('2009-07-30 12:58:59') == 58)\nand (month('2016-07-30') == 7)\nand (months_between('1997-02-28 10:30:00', '1996-10-30') == 3)\nand (months_between('1997-02-28 10:30:00', '1996-10-30', false) == 2)\nand (next_day('2015-01-14', 'TU') != NULL)\nand (now() != NULL)\nand (quarter('2016-08-31') == 3)\nand (second('2009-07-30 12:58:59') == 59)\nand (timestamp(123) != NULL)\nand (timestamp('2020-04-30 12:25:13.45') != NULL)\nand (timestamp_micros(1230219000123123) != NULL)\nand (timestamp_millis(1230219000123) != NULL)\nand (timestamp_seconds(1230219000) != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (trunc('2015-10-27', 'YEAR') != NULL)\nand (trunc('2019-08-04', 'quarter') != NULL)\nand (try_add(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_add(DATE'2021-03-31', INTERVAL '1' MONTH) != NULL)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (try_subtract(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (unix_date(DATE('1970-01-02')) == 1)\nand (unix_micros(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_millis(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 1)\nand (weekday(DATE'2009-07-30') == 1)\nand (EXTRACT(DAYOFWEEK_ISO FROM DATE'2009-07-30') == 4)\nand (weekofyear('2008-02-20') == 8)\nand (year('2016-07-30') == 2016)\nand (array(1, 2, 3) != NULL)\nand (bigint('5') == 5)\nand (binary('Spark SQL') != NULL)\nand (boolean(1))\nand (CAST(5.6 AS DECIMAL (2, 0)) != NULL)\nand (CAST(INTERVAL '1-2' YEAR TO MONTH AS INTEGER) == 12)\nand (date('2021-03-21') != NULL)\nand (decimal('5.2') == 5)\nand (double('5.2') / 2 == 5)\nand (float('5.2') / 2 == 2)\nand (int('5') == 5)\nand (make_date(2013, 7, 15) != NULL)\nand (make_dt_interval(100, 13) != NULL)\nand (make_ym_interval(100, 5) == NULL)\nand (map(1.0, '2', 3.0, '4') IS NOT NULL)\nand (named_struct('a', 1, 'b', 2, 'c', 3) IS NOT NULL)\nand (smallint('5') == 5)\nand (struct(1, 2, 3) IS NOT NULL)\nand (tinyint('12') == 12)\nand (timestamp('2020-04-30 12:25:13.45') != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31 00:12:00') != NULL)\nand (from_csv('1, 0.8', 'a INT, b DOUBLE') != NULL)\nand (schema_of_csv('1,abc') != NULL)\nand (json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') == 5)\nand (json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') != NULL)\nand (schema_of_json('[{\"col\":01}]', map('allowNumericLeadingZeros', 'true')) != NULL)\nand (to_json(named_struct('a', 1, 'b', 2)) != NULL)\nand (to_json(map(named_struct('a', 1), named_struct('b', 2))) != NULL)\nand (to_json(array((map('a', 1)))) != NULL)\nand (xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()') != NULL)\nand (xpath_boolean('<a><b>1</b></a>', 'a/b'))\nand (xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 3)\nand (xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c') != NULL)\nand (\n      assert_true(\n        0 < 1) == NULL\n    )\nand (\n      (\n        CASE\n          WHEN 1 > 0\n            THEN 1\n          WHEN 2 > 0\n            THEN 2.0\n          ELSE 1.2\n        END\n      ) == 1\n    )\nand (\n      (\n        CASE 3\n          WHEN 1\n            THEN 'A'\n          WHEN 2\n            THEN 'B'\n          WHEN 3\n            THEN 'C'\n        END\n      ) != NULL\n    )\nand (coalesce(2, 5 / 0) == 2)\nand (current_catalog() != NULL)\nand (current_database() != NULL)\nand (current_user() != NULL)\nand (decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks') != NULL)\nand (elt(1, 'scala', 'java') != NULL)\nand (greatest(10, 9, 2, 4, 3) == 10)\nand (hash('Spark', array(123), 2) != NULL)\nand (\n      if(\n        1 < 2, \n        'a', \n        'b') != NULL\n    )\nand (ifnull(NULL, array('2')) != NULL)\nand (input_file_block_length() == -1)\nand (input_file_block_start() == -1)\nand (isnull(1))\nand (isnotnull(1))\nand (least(10, 9, 2, 4, 3) == 2)\nand (monotonically_increasing_id() > 10)\nand (nullif(2, 2) == NULL)\nand (nvl(NULL, 2) == 2)\nand (nvl2(NULL, 2, 1) == 1)\nand (typeof(1) != NULL)\nand (uuid() != NULL)\nand (xxhash64('Spark', array(123), 2) != NULL)\nand ('20'::INTEGER == 20)\nand like('Spark', '_park')\nand ('Spark' LIKE SOME('_park', '_ock'))\nand (bitmap_count(x'00') == 10)\nand (charindex('bar', 'abcbarbar') == 1)\nand (decode(x'FEFF0053007000610072006B002000530051004C', 'UTF-16') != NULL)\nand (like('Spark', '_park'))\nand (len('Spark SQL ') > 10)\nand (levenshtein('kitten', 'sitting', 4) > 10)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', 'Z', 'z', '9', 'X') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', lowerChar => 'z', upperChar => 'X') != NULL)\nand (mask('AaBb123-&ASDXYZ921312asd', NULL, NULL, NULL, NULL) != NULL)\nand (overlay('Spark SQL' PLACING '_' FROM 6) != NULL)\nand (overlay('Spark SQL' PLACING 'tructured' FROM 2 FOR 4) != NULL)\nand (overlay(encode('Spark SQL', 'utf-8') PLACING encode('_', 'utf-8') FROM 6) != NULL)\nand (position('bar' IN 'abcbarbar') > 2)\nand (regexp_count('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en') > 2)\nand (regexp_instr('Mary had a little lamb', NULL) != NULL)\nand (regexp_substr(NULL, 'Ste(v|ph)en') != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (string(4) != NULL)\nand (substr('Spark SQL', -3) != NULL)\nand (substr('Spark SQL' FROM 5 FOR 1) != NULL)\nand (substr('Spark SQL' FROM -3) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_char(DATE'2016-04-08', 'y') != NULL)\nand (to_char(encode('abc', 'utf-8'), 'utf-8') != NULL)\nand (to_varchar(454, '999') != NULL)\nand (to_varchar(DATE'2016-04-08', 'y') != NULL)\nand (to_varchar(x'537061726b2053514c', 'hex') != NULL)\nand (TRIM( 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(BOTH 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(LEADING 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(TRAILING 'SL' FROM 'SSparkSQLS') != NULL)\nand (\n      CAST(try_aes_decrypt(\n        unbase64('MTIzNDU2Nzg5MDEyMdXvR41sJqwZ6hnTU8FRTTtXbL8yeChIZA=='), \n        '1234567890abcdef', \n        'GCM', \n        'DEFAULT', \n        'Some AAD') AS STRING) != NULL\n    )\nand (url_decode('http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1') != NULL)\nand (url_encode('http://spark.apache.org/path?query=1') != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' + INTERVAL '3' SECOND) != NULL)\nand (bit_reverse(-1) == -1)\nand (bitmap_bit_position(-32768) == 1)\nand (bitmap_bucket_number(-32768) == 1)\nand (MOD(2, 1.8) == 2)\nand (array_append(array(1, 2, 3), 0) == NULL)\nand (array_compact(array(1, 2, NULL, 3, NULL, 3)) == NULL)\nand (array_insert(array('a', 'b', 'c'), 1, 'z') != NULL)\nand (array_prepend(array(1, 2, 3), 0) != NULL)\nand (get(array(1, 2, 3), 2) != NULL)\nand (\n      reduce(array(1, 2, 3), 0, \n      (acc, x) -> acc + x) == 2\n    )\nand (shuffle(array(1, 20, 3, 5)) != NULL)\nand (map_contains_key(map(1, 'a', 2, 'b'), 2))\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand (date_diff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (date_part('SECONDS', TIMESTAMP'2019-10-01 00:00:01.000001') == 1)\nand (date_part('Week', TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (dateadd('2016-07-30', 1) != NULL)\nand (dateadd(MICROSECOND, 5, TIMESTAMP'2022-02-28 00:00:00') != NULL)\nand (datediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 11:59:59') == 0)\nand (make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887, 'CET') IS NOT NULL)\nand (make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)\nand (now() != NULL)\nand (timediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (timestampdiff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (to_unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 100)\nand (try_to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand ('20'::INTEGER == 20)\nand (make_interval(100, 11) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)\nand (string(5) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_varchar(454, '999') IS NOT NULL)\nand (from_json('{\"a\":1, \"b\":0.8}', 'a INT, b DOUBLE') IS NOT NULL)\nand (get_json_object('{\"a\":\"b\"}', '$.a') IS NOT NULL)\nand (to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), map('timestampFormat', 'dd/MM/yyyy')) IS NOT NULL)\nand (to_csv(named_struct('a', 1, 'b', 2)) IS NOT NULL)\nand (from_xml('<p><time>26/08/2015</time></p>', 'time Timestamp', map('timestampFormat', 'dd/MM/yyyy')) != NULL)\nand (schema_of_xml('<p><a attr=\"2\">1</a><a>3</a></p>', map('excludeAttribute', 'true')) IS NOT NULL)\nand (current_metastore() != NULL)\nand (current_schema() != NULL)\nand (current_version() != NULL)\nand (equal_null(2, 2))\nand (\n      iff(\n        1 < 2, \n        'a', \n        'b') == 'a'\n    )\nand (is_account_group_member('admins'))\nand (is_member('admins'))\nand (luhn_check('12345') == NULL)\nand (user() != NULL)\nand (h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0) != NULL)\nand (h3_coverash3string('{\"type\":\"LineString\",\"coordinates\":[[-122.4194,37.7749],[-118.2437,34.0522],[-74.0060,40.7128]]}', 1) != NULL)\nand (h3_longlatash3(-122.4783, 37.8199, 13) > 0)\nand (h3_longlatash3string(-122.4783, 37.8199, 13) != NULL)\nand (h3_pointash3('POINT(-122.4783 37.8199)', 13) > 0)\nand (h3_pointash3string('{\"type\":\"Point\",\"coordinates\":[]}', 15) == NULL)\nand (h3_pointash3string('POINT(-122.4783 37.8199)', 13) != NULL)\nand (\n      h3_polyfillash3(\n        unhex(\n          '0103000000010000000400000050fc1873d79a5ec0d0d556ec2fe342404182e2c7988f5dc0f46c567dae064140aaf1d24d628052c05e4bc8073d5b444050fc1873d79a5ec0d0d556ec2fe34240'), \n        2) != NULL\n    )\nand (h3_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3('Not-a-valid-rep', 2) == NULL)\nand (h3_try_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_boundaryasgeojson('8009fffffffffff') != NULL)\nand (h3_boundaryasgeojson(599686042433355775) != NULL)\nand (hex(h3_boundaryaswkb(599686042433355775)) != NULL)\nand (h3_boundaryaswkt(599686042433355775) != NULL)\nand (h3_centerasgeojson(599686042433355775) != NULL)\nand (hex(h3_centeraswkb('8009fffffffffff')) == NULL)\nand (h3_centeraswkt('8009fffffffffff') != NULL)\nand (h3_h3tostring(599686042433355775) != NULL)\nand (h3_stringtoh3('85283473fffffff') == NULL)\nand (h3_ischildof('88283471b9fffff', '85283473fffffff'))\nand (h3_ispentagon(590112357393367039))\nand (h3_isvalid('85283473fffffff'))\nand (h3_try_validate(590112357393367039) != NULL)\nand (h3_validate(590112357393367039) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_hexring(599686042433355775, 1) != NULL)\nand (h3_kring(599686042433355775, 1) != NULL)\nand (h3_kringdistances(599686042433355775, 1) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_maxchild(599686042433355775, 10) != NULL)\nand (h3_minchild(599686042433355775, 10) != NULL)\nand (h3_resolution(599686042433355775) == 5)\nand (h3_tochildren(599686042433355775, 6) != NULL)\nand (h3_toparent(599686042433355775, 0) != NULL)\nand (\n      h3_compact(\n        ARRAY(\n          599686042433355775, \n          599686030622195711, \n          599686044580839423, \n          599686038138388479, \n          599686043507097599, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686040285872127, \n          599686041359613951, \n          599686039212130303, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647)) != NULL\n    )\nand (\n      h3_uncompact(\n        ARRAY(\n          599686030622195711, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647, \n          595182446027210751), \n        5) != NULL\n    )"
          },
          "alias" : "c2"
        } ],
        "activeTab" : "expressions",
        "columnsSelector" : [ "fw8FlaHAfqhxWleXozpXc$$aieusRosWZBoB2Vf2PRTB##customer_id", "PsZekzq4Jq3QeZKSXc-l9$$dzVasNYHhXVTxSsJVUGS6##customer_id1", "fw8FlaHAfqhxWleXozpXc$$aieusRosWZBoB2Vf2PRTB##customer_id" ],
        "headAlias" : "in0"
      },
      "ports" : {
        "inputs" : [ {
          "id" : "fw8FlaHAfqhxWleXozpXc$$aieusRosWZBoB2Vf2PRTB",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        }, {
          "id" : "PsZekzq4Jq3QeZKSXc-l9$$dzVasNYHhXVTxSsJVUGS6",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name1",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in1"
        } ],
        "outputs" : [ {
          "id" : "XBIAY3fafZpzEzIReElYr$$4UeehMPY8OktrBwfNGr4B",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c2",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "jUnVO4j4_v0wTyy37WVrn$$ndjbcRg0nK1HIMBBMuqIY" : {
      "id" : "jUnVO4j4_v0wTyy37WVrn$$ndjbcRg0nK1HIMBBMuqIY",
      "component" : "Filter",
      "metadata" : {
        "label" : "Filter_1_1",
        "slug" : "Filter_1_1",
        "x" : 420,
        "y" : 1200,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ ],
        "condition" : {
          "expression" : "CAST(customer_id AS int) > 5\nand CAST(customer_id AS int) != 0\nor first_name LIKE '%A%'\nor ((1 & 1) == 1)\nor ((2 | 2) == 2)\nand 10 * CAST(customer_id AS int) == 20\nand last_name != first_name\nand (CAST(customer_id AS int) BETWEEN 10 and 20)\nand (array(10, 20, 30)[2] == 30)\nand (map(1, 'Hello', 2, 'World')[1] == 'Hello')\nand (10 ^ 20 == 50)\nand (map('three', 3).four == NULL)\nand (named_struct('a', 5, 'b', 'Spark').a == 5)\nand (1 = 2 and 1 == 2)\nand (1 >= 2 and 1 <= 2 and 1 != 3 or 2 > 4 or 4 < 5)\nand (\n      EXISTS (\n        array(1, NULL, 3),\n        \n        x -> x % 2 == 0\n      )\n    )\nor ilike('Spark', '_PARK')\nor (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\nand (1 IS DISTINCT FROM 5)\nand ('invalid' IS false)\nand isnull(1)\nand ('t' IS NOT true)\nand (1 <=> '1')\nand (1 <> CAST(customer_id AS int))\nand (10 - 2 + 10 == 8)\nand (NOT true)\nand (false or true)\nand (2 % 0 == 0)\nand ('Spark' || 'SQL' == 'SparkSQL')\nand (r'%SystemDrive%\\Users\\John' LIKE r'%SystemDrive%\\\\Users%')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (2L / 2L == 10)\nand (~ 0 == -1)\nand (base64(aes_encrypt('Spark', 'abcdefghijklmnop')) == NULL)\nand (CAST(aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop') AS STRING) == NULL)\nand (ascii('234') == 234)\nand (base64('Spark SQL') == NULL)\nand (bin(13) == NULL)\nand (binary('Spark SQL') == NULL)\nand (btrim('abcaabaSparkSQLabcaaba', 'abc') != NULL)\nand (char(65) != NULL)\nand (char_length('Spark SQL ') == 10)\nand (character_length('Spark SQL ') == 10)\nand (concat(customer_id, 'hello') != NULL)\nand (concat_ws(',', 'Spark', array('S', 'Q', NULL, 'L'), NULL) != NULL)\nand contains('SparkSQL', 'Spork')\nand (crc32('Spark') > 0)\nand chr(65) != NULL\nand (3 ^ 5 == 6)\nand (hex(encode('Spark SQL', 'US-ASCII')) != NULL)\nand endswith('SparkSQL', 'SQL')\nand (find_in_set('ab', 'abc,b,ab,c,def') == 2)\nand (format_number(12332.123456, 4) == 2)\nand (format_number(12332.123456, '#.###') == 10)\nand (format_string('Hello World %d %s', 100, 'days') != NULL)\nand (hex('Spark SQL') != NULL)\nand (r'%SystemDrive%\\Users\\John' LIKE '%SystemDrive%\\\\\\\\Users%')\nand (initcap('sPark sql') != NULL)\nand (instr('SparkSQL', 'R') == 2)\nand (lcase('LowerCase') != NULL)\nand (LEFT('Spark SQL', 3) != NULL)\nand (length('Spark SQL ') > 20)\nand (levenshtein('kitten', 'sitting') > 10)\nand (locate('bar', 'abcbarbar') > 2)\nand (locate('bar', 'abcbarbar', 5) > 2)\nand (lower('LowerCase') != NULL)\nand (lpad('hi', 1, '??') != NULL)\nand (hex(lpad(x'1020', 5, x'05')) != NULL)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (md5('Spark') != NULL)\nand (octet_length('Spark SQL') != NULL)\nand (parse_url('http://spark.apache.org/path?query=1', 'HOST') != NULL)\nand (position('bar', 'abcbarbar') > 10)\nand (position('bar', 'abcbarbar', 5) > 5)\nand (printf('Hello World %d %s', 100, 'days') != NULL)\nand (r'%SystemDrive%\\Users\\John' RLIKE r'%SystemDrive%\\\\Users.*')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) > 10)\nand (regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1) != NULL)\nand (regexp_replace('100-200', '(\\\\d+)', 'num') != NULL)\nand (repeat('123', 2) != NULL)\nand (replace('ABCabc', 'abc', 'DEF') != NULL)\nand (reverse('Spark SQL') != NULL)\nand (RIGHT('Spark SQL', 3) != NULL)\nand (rpad('hi', 5, 'ab') != NULL)\nand (hex(rpad(x'1020', 5, x'05')) != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (sentences('Hi there! Good morning.', 'en', 'US') != NULL)\nand (sha('Spark') != NULL)\nand (sha1('Spark') != NULL)\nand (sha2('Spark', 256) != NULL)\nand (soundex('Miller') != NULL)\nand (concat('1', space(2), '1') != NULL)\nand (('->' || split_part('Hello,world,!', ',', 1) || '<-') != NULL)\nand (('->' || split_part('', ',', 1) || '<-') != NULL)\nand (('->' || split_part('Hello,World,!', ',', 0) || '<-') != NULL)\nand (startswith('SparkSQL', 'Spark'))\nand (startswith(NULL, 'Spark'))\nand (substr('Spark SQL', 5, 1) != NULL)\nand (substring_index('www.apache.org', '.', 2) != NULL)\nand (CAST(to_binary('537061726B') AS STRING) != NULL)\nand (CAST(to_binary('537061726B', 'hex') AS STRING) != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (translate('AaBbCc', 'abc', '123') != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (ucase('SparkSql') != NULL)\nand (CAST(unbase64('U3BhcmsgU1FM') AS STRING) != NULL)\nand (decode(unhex('537061726B2053514C'), 'UTF-8') != NULL)\nand (upper('SparkSql') != NULL)\nand (10 / 2 == 5)\nand ((3 | 5) == 2)\nand ((DATE'2021-03-20' - INTERVAL '2' MONTH) != NULL)\nand (10 - 2 + 2 == 4)\nand (2 % 1.8 == 2)\nand (3 ^ 5 == 3)\nand (3 & 5 == 2)\nand (3 * 2 == 2)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (abs(-1) == 1)\nand (acos(1) == 1)\nand (acosh(1) == 1)\nand (asin(0) == 1)\nand (asinh(0) == 1)\nand (atan(0) == 1)\nand (atan2(0, 0) == 1)\nand (atanh(0) == 1)\nand (bigint(current_timestamp) > 1)\nand (bit_count(-1) > 1)\nand (bit_get(23Y, 1) == 1)\nand (bround(13.5, -1) == 1)\nand (round(13.5, -1) == 1)\nand (cbrt(27.0) == 3)\nand (ceil(3345.1, -2) == 1)\nand (ceiling(5.4) == 6)\nand (ceiling(3345.1, -2) == 1)\nand (conv('100', 2, 10) == 4)\nand (conv('FFFFFFFFFFFFFFFF', 16, 10) == 1)\nand (cos(pi()) == -1)\nand (cosh(0) == 1)\nand (cot(1) == 1)\nand (csc(pi() / 2) == 2)\nand (decimal('5.2') == 5)\nand (degrees(3.141592653589793) == 10)\nand (double('5.2') == 4)\nand (e() == 2)\nand (exp(1) == 2)\nand (expm1(0) == 1)\nand (factorial(2) == 2)\nand (float('5.2') == 5)\nand (floor(-0.1) == -1)\nand (floor(3345.1, -2) == 20)\nand (getbit(23Y, 0) == 1)\nand (hypot(3, 4) == 5)\nand (int(-5.6) == 5)\nand (isnan(CAST('NaN' AS double)))\nand (ln(1) == 1)\nand (log(10, 100) == 2)\nand (log1p(0) == 1)\nand (log2(2) == 1)\nand (log10(10) == 1)\nand (nanvl(CAST('NaN' AS DOUBLE), 123) == 2)\nand (negative(1) == -1)\nand (pmod(-10, 3) == 2)\nand (positive(-1) == -1)\nand (pow(2, 3) * power(2, 3) == 8)\nand (radians(180) == 10)\nand (rand(0) * random(0) == 1)\nand (randn(0) == 1)\nand (rint(12.3456) == 1)\nand (round(2.5, 0) == 3)\nand (sec(pi()) == -1)\nand (sin(0) == 0)\nand (shiftleft(2, 1) == 2)\nand (shiftright(4, 1) == 2)\nand (shiftrightunsigned(4, 1) == 2)\nand (sign(40) == 1)\nand (signum(40) == 1)\nand (sinh(0) == 1)\nand (smallint(-5.6) == 5)\nand (sqrt(4) == 2)\nand (tan(0) == 1)\nand (tanh(0) == 1)\nand (tinyint('12') * tinyint(5.4) == 1)\nand (try_add(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_add(1, 2) == 3)\nand (try_divide(3, 2) == 3)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand (try_subtract(1, 2) == 2)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_subtract(-128Y, 1Y) != NULL)\nand (width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2) == 3)\nand (width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) == 10)\nand (array(10, 20, 30) != NULL)\nand (\n      (\n        aggregate(array(1, 2, 3), 0, \n        (acc, x) -> acc + x, \n        acc -> acc * 10)\n      ) == 1\n    )\nand (array_contains(array(1, 2, 3), 2))\nand (array_distinct(array(1, 2, 3, NULL, 3)) != NULL)\nand (array_except(array(1, 2, 2, 3), array(1, 1, 3, 5)) != NULL)\nand (array_intersect(array(1, 2, 3), array(1, 3, 3, 5)) != NULL)\nand (array_join(array('hello', 'world'), ',') != NULL)\nand (array_join(array('hello', NULL, 'world'), ',', '*') == NULL)\nand (array_max(array(1, 20, NULL, 3)) > 10)\nand (array_min(array(1, 20, NULL, 3)) == 1)\nand (array_position(array(3, 2, 1, 4, 1), 1) == 2)\nand (array_remove(array(1, 2, 3, NULL, 3, 2), 3) != NULL)\nand (array_repeat('123', 2) != NULL)\nand (array_size(array(1, NULL, 3, NULL)) == 2)\nand (array_sort(array('bc', 'ab', 'dc')) != NULL)\nand (array_union(array(1, 2, 2, 3), array(1, 3, 5)) != NULL)\nand (arrays_overlap(array(1, 2, NULL, 3), array(NULL, 4, 5)) == NULL)\nand (arrays_zip(array(1, 2), array('shoe', 'string', 'budget')) == NULL)\nand (cardinality(array('b', 'd', 'c', 'a')) == 2)\nand (concat(array(1, 2, 3), array(4, 5), array(6)) != NULL)\nand (element_at(map(1, 'a', 2, 'b'), 2) == NULL)\nand (\n      EXISTS (\n        array(1, 2, 3),\n        \n        x -> x % 2 == 0\n      )\n    )\nand (\n      EXISTS (\n        array(0, NULL, 2, 3, NULL),\n        \n        x -> x IS NULL\n      )\n    )\nand (\n      filter(array(1, 2, 3), \n      x -> x % 2 == 1) != NULL\n    )\nand (flatten(array(array(1, 2), array(3, 4))) != NULL)\nand (\n      forall(array(1, 2, 3), \n      x -> x % 2 == 0) == NULL\n    )\nand (reverse(array(2, 1, 4, 3)) != NULL)\nand (sequence(5, 1) != NULL)\nand (cardinality(array('b', 'd', 'c', 'a')) == 10)\nand (slice(array(1, 2, 3, 4), 2, 2) != NULL)\nand (sort_array(array('b', 'd', NULL, 'c', 'a'), true) != NULL)\nand (\n      transform(array(1, 2, 3), \n      x -> x + 1) != NULL\n    )\nand (try_element_at(array(1, 2, 3), 2) == 2)\nand (\n      zip_with(array('a', 'b', 'c'), array('d', 'e', 'f'), \n      (x, y) -> concat(x, y)) != NULL\n    )\nand (map(1, 'Hello', 2, 'World')[1] != NULL)\nand (cardinality(map('a', 1, 'b', 2)) == 2)\nand (element_at(map(1, 'a', 2, 'b'), 3) == NULL)\nand (map(1.0, '2', 3.0, '4') IS NOT NULL)\nand (map_concat(map(1, 'a', 2, 'b'), map(3, 'c')) IS NOT NULL)\nand (map_contains_key(map(1, 'a', 2, 'b'), 2))\nand (map_entries(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_filter(map(1, 0, 2, 2, 3, -1), \n      (k, v) -> k > v) IS NOT NULL\n    )\nand (map_from_arrays(array(1.0, 3.0), array('2', '4')) IS NOT NULL)\nand (map_from_entries(array(struct(1, 'a'), struct(2, 'b'))) IS NOT NULL)\nand (map_keys(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (map_values(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_zip_with(map(1, 'a', 2, 'b'), map(1, 'x', 2, 'y'), \n      (k, v1, v2) -> concat(v1, v2)) IS NOT NULL\n    )\nand (cardinality(map('a', 1, 'b', 2)) == 2)\nand (str_to_map('a:1,b:2,c:3', ',', ':') IS NOT NULL)\nand (\n      transform_keys(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n      (k, v) -> k + 1) IS NOT NULL\n    )\nand (\n      transform_values(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n      (k, v) -> k + v) IS NOT NULL\n    )\nand (try_element_at(map(1, 'a', 2, 'b'), 2) IS NOT NULL)\nand ((INTERVAL '3:15' HOUR TO MINUTE / 3) IS NOT NULL)\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand (typeof(current_timestamp - (current_date + INTERVAL '1' DAY)) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (add_months('2016-08-31', -6) != NULL)\nand (current_date() != NULL)\nand (current_timestamp() != NULL)\nand (current_timezone() != NULL)\nand (date('2021-03-21') != NULL)\nand (date_add('2016-07-30', 1) != NULL)\nand (date_format('2016-04-08', 'y') == 2016)\nand (date_from_unix_date(1) != NULL)\nand (date_sub('2016-07-30', 1) != NULL)\nand (date_trunc('YEAR', '2015-03-05T09:32:05.359') != NULL)\nand (datediff('2009-07-31', '2009-07-30') == 1)\nand (day('2009-07-30') == 30)\nand (dayofmonth('2009-07-30') == 30)\nand (dayofweek('2009-07-30') == 5)\nand (dayofyear('2016-04-09') == 100)\nand (EXTRACT(SECONDS FROM INTERVAL '5:00:30.001' HOUR TO SECOND) == 30)\nand (EXTRACT(WEEK FROM TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') != NULL)\nand (from_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (from_utc_timestamp('2016-08-31', 'Asia/Seoul') != NULL)\nand (hour('2009-07-30 12:58:59') == 10)\nand (last_day('2009-01-12') IS NOT NULL)\nand (make_date(2013, 7, 15) IS NOT NULL)\nand (make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)\nand (make_ym_interval(100, 5) IS NOT NULL)\nand (minute('2009-07-30 12:58:59') == 58)\nand (month('2016-07-30') == 7)\nand (months_between('1997-02-28 10:30:00', '1996-10-30') == 3)\nand (months_between('1997-02-28 10:30:00', '1996-10-30', false) == 2)\nand (next_day('2015-01-14', 'TU') != NULL)\nand (now() != NULL)\nand (quarter('2016-08-31') == 3)\nand (second('2009-07-30 12:58:59') == 59)\nand (timestamp(123) != NULL)\nand (timestamp('2020-04-30 12:25:13.45') != NULL)\nand (timestamp_micros(1230219000123123) != NULL)\nand (timestamp_millis(1230219000123) != NULL)\nand (timestamp_seconds(1230219000) != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (trunc('2015-10-27', 'YEAR') != NULL)\nand (trunc('2019-08-04', 'quarter') != NULL)\nand (try_add(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_add(DATE'2021-03-31', INTERVAL '1' MONTH) != NULL)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (try_subtract(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (unix_date(DATE('1970-01-02')) == 1)\nand (unix_micros(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_millis(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 1)\nand (weekday(DATE'2009-07-30') == 1)\nand (EXTRACT(DAYOFWEEK_ISO FROM DATE'2009-07-30') == 4)\nand (weekofyear('2008-02-20') == 8)\nand (year('2016-07-30') == 2016)\nand (array(1, 2, 3) != NULL)\nand (bigint('5') == 5)\nand (binary('Spark SQL') != NULL)\nand (boolean(1))\nand (CAST(5.6 AS DECIMAL (2, 0)) != NULL)\nand (CAST(INTERVAL '1-2' YEAR TO MONTH AS INTEGER) == 12)\nand (date('2021-03-21') != NULL)\nand (decimal('5.2') == 5)\nand (double('5.2') / 2 == 5)\nand (float('5.2') / 2 == 2)\nand (int('5') == 5)\nand (make_date(2013, 7, 15) != NULL)\nand (make_dt_interval(100, 13) != NULL)\nand (make_ym_interval(100, 5) == NULL)\nand (map(1.0, '2', 3.0, '4') IS NOT NULL)\nand (named_struct('a', 1, 'b', 2, 'c', 3) IS NOT NULL)\nand (smallint('5') == 5)\nand (struct(1, 2, 3) IS NOT NULL)\nand (tinyint('12') == 12)\nand (timestamp('2020-04-30 12:25:13.45') != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31 00:12:00') != NULL)\nand (from_csv('1, 0.8', 'a INT, b DOUBLE') != NULL)\nand (schema_of_csv('1,abc') != NULL)\nand (json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') == 5)\nand (json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') != NULL)\nand (schema_of_json('[{\"col\":01}]', map('allowNumericLeadingZeros', 'true')) != NULL)\nand (to_json(named_struct('a', 1, 'b', 2)) != NULL)\nand (to_json(map(named_struct('a', 1), named_struct('b', 2))) != NULL)\nand (to_json(array((map('a', 1)))) != NULL)\nand (xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()') != NULL)\nand (xpath_boolean('<a><b>1</b></a>', 'a/b'))\nand (xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 3)\nand (xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c') != NULL)\nand (\n      assert_true(\n        0 < 1) == NULL\n    )\nand (\n      (\n        CASE\n          WHEN 1 > 0\n            THEN 1\n          WHEN 2 > 0\n            THEN 2.0\n          ELSE 1.2\n        END\n      ) == 1\n    )\nand (\n      (\n        CASE 3\n          WHEN 1\n            THEN 'A'\n          WHEN 2\n            THEN 'B'\n          WHEN 3\n            THEN 'C'\n        END\n      ) != NULL\n    )\nand (coalesce(2, 5 / 0) == 2)\nand (current_catalog() != NULL)\nand (current_database() != NULL)\nand (current_user() != NULL)\nand (decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks') != NULL)\nand (elt(1, 'scala', 'java') != NULL)\nand (greatest(10, 9, 2, 4, 3) == 10)\nand (hash('Spark', array(123), 2) != NULL)\nand (\n      if(\n        1 < 2, \n        'a', \n        'b') != NULL\n    )\nand (ifnull(NULL, array('2')) != NULL)\nand (input_file_block_length() == -1)\nand (input_file_block_start() == -1)\nand (isnull(1))\nand (isnotnull(1))\nand (least(10, 9, 2, 4, 3) == 2)\nand (monotonically_increasing_id() > 10)\nand (nullif(2, 2) == NULL)\nand (nvl(NULL, 2) == 2)\nand (nvl2(NULL, 2, 1) == 1)\nand (typeof(1) != NULL)\nand (uuid() != NULL)\nand (xxhash64('Spark', array(123), 2) != NULL)\nand ('20'::INTEGER == 20)\nand like('Spark', '_park')\nand ('Spark' LIKE SOME('_park', '_ock'))\nand (bitmap_count(x'00') == 10)\nand (charindex('bar', 'abcbarbar') == 1)\nand (decode(x'FEFF0053007000610072006B002000530051004C', 'UTF-16') != NULL)\nand (like('Spark', '_park'))\nand (len('Spark SQL ') > 10)\nand (levenshtein('kitten', 'sitting', 4) > 10)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', 'Z', 'z', '9', 'X') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', lowerChar => 'z', upperChar => 'X') != NULL)\nand (mask('AaBb123-&ASDXYZ921312asd', NULL, NULL, NULL, NULL) != NULL)\nand (overlay('Spark SQL' PLACING '_' FROM 6) != NULL)\nand (overlay('Spark SQL' PLACING 'tructured' FROM 2 FOR 4) != NULL)\nand (overlay(encode('Spark SQL', 'utf-8') PLACING encode('_', 'utf-8') FROM 6) != NULL)\nand (position('bar' IN 'abcbarbar') > 2)\nand (regexp_count('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en') > 2)\nand (regexp_instr('Mary had a little lamb', NULL) != NULL)\nand (regexp_substr(NULL, 'Ste(v|ph)en') != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (string(4) != NULL)\nand (substr('Spark SQL', -3) != NULL)\nand (substr('Spark SQL' FROM 5 FOR 1) != NULL)\nand (substr('Spark SQL' FROM -3) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_char(DATE'2016-04-08', 'y') != NULL)\nand (to_char(encode('abc', 'utf-8'), 'utf-8') != NULL)\nand (to_varchar(454, '999') != NULL)\nand (to_varchar(DATE'2016-04-08', 'y') != NULL)\nand (to_varchar(x'537061726b2053514c', 'hex') != NULL)\nand (TRIM( 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(BOTH 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(LEADING 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(TRAILING 'SL' FROM 'SSparkSQLS') != NULL)\nand (\n      CAST(try_aes_decrypt(\n        unbase64('MTIzNDU2Nzg5MDEyMdXvR41sJqwZ6hnTU8FRTTtXbL8yeChIZA=='), \n        '1234567890abcdef', \n        'GCM', \n        'DEFAULT', \n        'Some AAD') AS STRING) != NULL\n    )\nand (url_decode('http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1') != NULL)\nand (url_encode('http://spark.apache.org/path?query=1') != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' + INTERVAL '3' SECOND) != NULL)\nand (bit_reverse(-1) == -1)\nand (bitmap_bit_position(-32768) == 1)\nand (bitmap_bucket_number(-32768) == 1)\nand (MOD(2, 1.8) == 2)\nand (array_append(array(1, 2, 3), 0) == NULL)\nand (array_compact(array(1, 2, NULL, 3, NULL, 3)) == NULL)\nand (array_insert(array('a', 'b', 'c'), 1, 'z') != NULL)\nand (array_prepend(array(1, 2, 3), 0) != NULL)\nand (get(array(1, 2, 3), 2) != NULL)\nand (\n      reduce(array(1, 2, 3), 0, \n      (acc, x) -> acc + x) == 2\n    )\nand (shuffle(array(1, 20, 3, 5)) != NULL)\nand (map_contains_key(map(1, 'a', 2, 'b'), 2))\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand (date_diff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (date_part('SECONDS', TIMESTAMP'2019-10-01 00:00:01.000001') == 1)\nand (date_part('Week', TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (dateadd('2016-07-30', 1) != NULL)\nand (dateadd(MICROSECOND, 5, TIMESTAMP'2022-02-28 00:00:00') != NULL)\nand (datediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 11:59:59') == 0)\nand (make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887, 'CET') IS NOT NULL)\nand (make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)\nand (now() != NULL)\nand (timediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (timestampdiff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (to_unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 100)\nand (try_to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand ('20'::INTEGER == 20)\nand (make_interval(100, 11) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)\nand (string(5) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_varchar(454, '999') IS NOT NULL)\nand (from_json('{\"a\":1, \"b\":0.8}', 'a INT, b DOUBLE') IS NOT NULL)\nand (get_json_object('{\"a\":\"b\"}', '$.a') IS NOT NULL)\nand (to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), map('timestampFormat', 'dd/MM/yyyy')) IS NOT NULL)\nand (to_csv(named_struct('a', 1, 'b', 2)) IS NOT NULL)\nand (from_xml('<p><time>26/08/2015</time></p>', 'time Timestamp', map('timestampFormat', 'dd/MM/yyyy')) != NULL)\nand (schema_of_xml('<p><a attr=\"2\">1</a><a>3</a></p>', map('excludeAttribute', 'true')) IS NOT NULL)\nand (current_metastore() != NULL)\nand (current_schema() != NULL)\nand (current_version() != NULL)\nand (equal_null(2, 2))\nand (\n      iff(\n        1 < 2, \n        'a', \n        'b') == 'a'\n    )\nand (is_account_group_member('admins'))\nand (is_member('admins'))\nand (luhn_check('12345') == NULL)\nand (user() != NULL)\nand (h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0) != NULL)\nand (h3_coverash3string('{\"type\":\"LineString\",\"coordinates\":[[-122.4194,37.7749],[-118.2437,34.0522],[-74.0060,40.7128]]}', 1) != NULL)\nand (h3_longlatash3(-122.4783, 37.8199, 13) > 0)\nand (h3_longlatash3string(-122.4783, 37.8199, 13) != NULL)\nand (h3_pointash3('POINT(-122.4783 37.8199)', 13) > 0)\nand (h3_pointash3string('{\"type\":\"Point\",\"coordinates\":[]}', 15) == NULL)\nand (h3_pointash3string('POINT(-122.4783 37.8199)', 13) != NULL)\nand (\n      h3_polyfillash3(\n        unhex(\n          '0103000000010000000400000050fc1873d79a5ec0d0d556ec2fe342404182e2c7988f5dc0f46c567dae064140aaf1d24d628052c05e4bc8073d5b444050fc1873d79a5ec0d0d556ec2fe34240'), \n        2) != NULL\n    )\nand (h3_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3('Not-a-valid-rep', 2) == NULL)\nand (h3_try_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_boundaryasgeojson('8009fffffffffff') != NULL)\nand (h3_boundaryasgeojson(599686042433355775) != NULL)\nand (hex(h3_boundaryaswkb(599686042433355775)) != NULL)\nand (h3_boundaryaswkt(599686042433355775) != NULL)\nand (h3_centerasgeojson(599686042433355775) != NULL)\nand (hex(h3_centeraswkb('8009fffffffffff')) == NULL)\nand (h3_centeraswkt('8009fffffffffff') != NULL)\nand (h3_h3tostring(599686042433355775) != NULL)\nand (h3_stringtoh3('85283473fffffff') == NULL)\nand (h3_ischildof('88283471b9fffff', '85283473fffffff'))\nand (h3_ispentagon(590112357393367039))\nand (h3_isvalid('85283473fffffff'))\nand (h3_try_validate(590112357393367039) != NULL)\nand (h3_validate(590112357393367039) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_hexring(599686042433355775, 1) != NULL)\nand (h3_kring(599686042433355775, 1) != NULL)\nand (h3_kringdistances(599686042433355775, 1) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_maxchild(599686042433355775, 10) != NULL)\nand (h3_minchild(599686042433355775, 10) != NULL)\nand (h3_resolution(599686042433355775) == 5)\nand (h3_tochildren(599686042433355775, 6) != NULL)\nand (h3_toparent(599686042433355775, 0) != NULL)\nand (\n      h3_compact(\n        ARRAY(\n          599686042433355775, \n          599686030622195711, \n          599686044580839423, \n          599686038138388479, \n          599686043507097599, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686040285872127, \n          599686041359613951, \n          599686039212130303, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647)) != NULL\n    )\nand (\n      h3_uncompact(\n        ARRAY(\n          599686030622195711, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647, \n          595182446027210751), \n        5) != NULL\n    )"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "mA-bDxdHYJLLi8pRHfohI$$iQ9tT3cvatwqNgD0Isa-j",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "K97HpHPOF5rjAyD1Mq0Ta$$v_r3aDRKAsd32dRQ-Q9MZ",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "OrderBy_2##tn5tX7L3" : {
      "id" : "OrderBy_2##tn5tX7L3",
      "component" : "OrderBy",
      "metadata" : {
        "label" : "OrderBy_2",
        "x" : 1400,
        "y" : 3960,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ ],
        "orders" : [ {
          "expression" : {
            "expression" : "concat(c_string, c_int)"
          },
          "sortType" : "asc"
        }, {
          "expression" : {
            "expression" : "c_tinyint"
          },
          "sortType" : "desc",
          "nullsType" : "nulls first"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "iqSkRogO",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "ZHDyNW2h",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Reformat_1_1##A4Pwhejz" : {
      "id" : "Reformat_1_1##A4Pwhejz",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Reformat_1_1",
        "x" : 1040,
        "y" : 300,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ "cgbutB7H##c_int", "cgbutB7H##c_string" ],
        "expressions" : [ {
          "expression" : {
            "expression" : "CAST(c_int AS string)"
          },
          "alias" : "customer_id"
        }, {
          "expression" : {
            "expression" : "c_string"
          },
          "alias" : "first_name"
        }, {
          "expression" : {
            "expression" : "c_string"
          },
          "alias" : "last_name"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "cgbutB7H",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "X3M1fvLw",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "bFARtp99r2bhG4RfZt2Ow$$YEjDakeTm_6R-djX5pdu8" : {
      "id" : "bFARtp99r2bhG4RfZt2Ow$$YEjDakeTm_6R-djX5pdu8",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_1_1_1_1_34",
        "slug" : "SQLStatement_1_1_1_1_34",
        "x" : 520,
        "y" : -200,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT\n    act1.c_int,\n    act1.c_string::STRING AS perfid\nFROM\n    SQLStatement_2_2 AS act1\nWHERE\n    act1.c_string = 'PERFORM'\n    AND act1.c_int = 1"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "40ZHwSaTnTf4pftVs8QZU$$ZaEtoGU0Kd6wBd-a23XR0",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "SQLStatement_2_2"
        } ],
        "outputs" : [ {
          "id" : "nEHvMzWVRp9VB69KxwK9M$$-p1mRvyUyl2h-vIK5EvrI",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "perfid",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Reformat_2_1##rZXvNepK" : {
      "id" : "Reformat_2_1##rZXvNepK",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Reformat_2_1",
        "x" : 1400,
        "y" : 300,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ ],
        "expressions" : [ {
          "expression" : {
            "expression" : "customer_id"
          },
          "alias" : "customer_id"
        }, {
          "expression" : {
            "expression" : "first_name"
          },
          "alias" : "first_name"
        }, {
          "expression" : {
            "expression" : "last_name"
          },
          "alias" : "last_name"
        }, {
          "expression" : {
            "expression" : "CAST(customer_id AS int) > 5\nand CAST(customer_id AS int) != 0\nor first_name LIKE '%A%'\nor ((1 & 1) == 1)\nor ((2 | 2) == 2)\nand 10 * CAST(customer_id AS int) == 20\nand last_name != first_name\nand (CAST(customer_id AS int) BETWEEN 10 and 20)\nand (array(10, 20, 30)[2] == 30)\nand (map(1, 'Hello', 2, 'World')[1] == 'Hello')\nand (10 ^ 20 == 50)\nand (map('three', 3).four == NULL)\nand (named_struct('a', 5, 'b', 'Spark').a == 5)\nand (1 = 2 and 1 == 2)\nand (1 >= 2 and 1 <= 2 and 1 != 3 or 2 > 4 or 4 < 5)\nand (\n      EXISTS (\n        array(1, NULL, 3),\n        \n        x -> x % 2 == 0\n      )\n    )\nor ilike('Spark', '_PARK')\nor (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\nand (1 IS DISTINCT FROM 5)\nand ('invalid' IS false)\nand isnull(1)\nand ('t' IS NOT true)\nand (1 <=> '1')\nand (1 <> CAST(customer_id AS int))\nand (10 - 2 + 10 == 8)\nand (NOT true)\nand (false or true)\nand (2 % 0 == 0)\nand ('Spark' || 'SQL' == 'SparkSQL')\nand (r'%SystemDrive%\\Users\\John' LIKE r'%SystemDrive%\\\\Users%')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (2L / 2L == 10)\nand (~ 0 == -1)\nand (base64(aes_encrypt('Spark', 'abcdefghijklmnop')) == NULL)\nand (CAST(aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop') AS STRING) == NULL)\nand (ascii('234') == 234)\nand (base64('Spark SQL') == NULL)\nand (bin(13) == NULL)\nand (binary('Spark SQL') == NULL)\nand (btrim('abcaabaSparkSQLabcaaba', 'abc') != NULL)\nand (char(65) != NULL)\nand (char_length('Spark SQL ') == 10)\nand (character_length('Spark SQL ') == 10)\nand (concat(customer_id, 'hello') != NULL)\nand (concat_ws(',', 'Spark', array('S', 'Q', NULL, 'L'), NULL) != NULL)\nand contains('SparkSQL', 'Spork')\nand (crc32('Spark') > 0)\nand chr(65) != NULL\nand (3 ^ 5 == 6)\nand (hex(encode('Spark SQL', 'US-ASCII')) != NULL)\nand endswith('SparkSQL', 'SQL')\nand (find_in_set('ab', 'abc,b,ab,c,def') == 2)\nand (format_number(12332.123456, 4) == 2)\nand (format_number(12332.123456, '#.###') == 10)\nand (format_string('Hello World %d %s', 100, 'days') != NULL)\nand (hex('Spark SQL') != NULL)\nand (r'%SystemDrive%\\Users\\John' LIKE '%SystemDrive%\\\\\\\\Users%')\nand (initcap('sPark sql') != NULL)\nand (instr('SparkSQL', 'R') == 2)\nand (lcase('LowerCase') != NULL)\nand (LEFT('Spark SQL', 3) != NULL)\nand (length('Spark SQL ') > 20)\nand (levenshtein('kitten', 'sitting') > 10)\nand (locate('bar', 'abcbarbar') > 2)\nand (locate('bar', 'abcbarbar', 5) > 2)\nand (lower('LowerCase') != NULL)\nand (lpad('hi', 1, '??') != NULL)\nand (hex(lpad(x'1020', 5, x'05')) != NULL)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (md5('Spark') != NULL)\nand (octet_length('Spark SQL') != NULL)\nand (parse_url('http://spark.apache.org/path?query=1', 'HOST') != NULL)\nand (position('bar', 'abcbarbar') > 10)\nand (position('bar', 'abcbarbar', 5) > 5)\nand (printf('Hello World %d %s', 100, 'days') != NULL)\nand (r'%SystemDrive%\\Users\\John' RLIKE r'%SystemDrive%\\\\Users.*')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) > 10)\nand (regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1) != NULL)\nand (regexp_replace('100-200', '(\\\\d+)', 'num') != NULL)\nand (repeat('123', 2) != NULL)\nand (replace('ABCabc', 'abc', 'DEF') != NULL)\nand (reverse('Spark SQL') != NULL)\nand (RIGHT('Spark SQL', 3) != NULL)\nand (rpad('hi', 5, 'ab') != NULL)\nand (hex(rpad(x'1020', 5, x'05')) != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (sentences('Hi there! Good morning.', 'en', 'US') != NULL)\nand (sha('Spark') != NULL)\nand (sha1('Spark') != NULL)\nand (sha2('Spark', 256) != NULL)\nand (soundex('Miller') != NULL)\nand (concat('1', space(2), '1') != NULL)\nand (('->' || split_part('Hello,world,!', ',', 1) || '<-') != NULL)\nand (('->' || split_part('', ',', 1) || '<-') != NULL)\nand (('->' || split_part('Hello,World,!', ',', 0) || '<-') != NULL)\nand (startswith('SparkSQL', 'Spark'))\nand (startswith(NULL, 'Spark'))\nand (substr('Spark SQL', 5, 1) != NULL)\nand (substring_index('www.apache.org', '.', 2) != NULL)\nand (CAST(to_binary('537061726B') AS STRING) != NULL)\nand (CAST(to_binary('537061726B', 'hex') AS STRING) != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (translate('AaBbCc', 'abc', '123') != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (ucase('SparkSql') != NULL)\nand (CAST(unbase64('U3BhcmsgU1FM') AS STRING) != NULL)\nand (decode(unhex('537061726B2053514C'), 'UTF-8') != NULL)\nand (upper('SparkSql') != NULL)\nand (10 / 2 == 5)\nand ((3 | 5) == 2)\nand ((DATE'2021-03-20' - INTERVAL '2' MONTH) != NULL)\nand (10 - 2 + 2 == 4)\nand (2 % 1.8 == 2)\nand (3 ^ 5 == 3)\nand (3 & 5 == 2)\nand (3 * 2 == 2)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (abs(-1) == 1)\nand (acos(1) == 1)\nand (acosh(1) == 1)\nand (asin(0) == 1)\nand (asinh(0) == 1)\nand (atan(0) == 1)\nand (atan2(0, 0) == 1)\nand (atanh(0) == 1)\nand (bigint(current_timestamp) > 1)\nand (bit_count(-1) > 1)\nand (bit_get(23Y, 1) == 1)\nand (bround(13.5, -1) == 1)\nand (round(13.5, -1) == 1)\nand (cbrt(27.0) == 3)\nand (ceil(3345.1, -2) == 1)\nand (ceiling(5.4) == 6)\nand (ceiling(3345.1, -2) == 1)\nand (conv('100', 2, 10) == 4)\nand (conv('FFFFFFFFFFFFFFFF', 16, 10) == 1)\nand (cos(pi()) == -1)\nand (cosh(0) == 1)\nand (cot(1) == 1)\nand (csc(pi() / 2) == 2)\nand (decimal('5.2') == 5)\nand (degrees(3.141592653589793) == 10)\nand (double('5.2') == 4)\nand (e() == 2)\nand (exp(1) == 2)\nand (expm1(0) == 1)\nand (factorial(2) == 2)\nand (float('5.2') == 5)\nand (floor(-0.1) == -1)\nand (floor(3345.1, -2) == 20)\nand (getbit(23Y, 0) == 1)\nand (hypot(3, 4) == 5)\nand (int(-5.6) == 5)\nand (isnan(CAST('NaN' AS double)))\nand (ln(1) == 1)\nand (log(10, 100) == 2)\nand (log1p(0) == 1)\nand (log2(2) == 1)\nand (log10(10) == 1)\nand (nanvl(CAST('NaN' AS DOUBLE), 123) == 2)\nand (negative(1) == -1)\nand (pmod(-10, 3) == 2)\nand (positive(-1) == -1)\nand (pow(2, 3) * power(2, 3) == 8)\nand (radians(180) == 10)\nand (rand(0) * random(0) == 1)\nand (randn(0) == 1)\nand (rint(12.3456) == 1)\nand (round(2.5, 0) == 3)\nand (sec(pi()) == -1)\nand (sin(0) == 0)\nand (shiftleft(2, 1) == 2)\nand (shiftright(4, 1) == 2)\nand (shiftrightunsigned(4, 1) == 2)\nand (sign(40) == 1)\nand (signum(40) == 1)\nand (sinh(0) == 1)\nand (smallint(-5.6) == 5)\nand (sqrt(4) == 2)\nand (tan(0) == 1)\nand (tanh(0) == 1)\nand (tinyint('12') * tinyint(5.4) == 1)\nand (try_add(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_add(1, 2) == 3)\nand (try_divide(3, 2) == 3)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand (try_subtract(1, 2) == 2)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_subtract(-128Y, 1Y) != NULL)\nand (width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2) == 3)\nand (width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) == 10)\nand (array(10, 20, 30) != NULL)\nand (\n      (\n        aggregate(array(1, 2, 3), 0, \n        (acc, x) -> acc + x, \n        acc -> acc * 10)\n      ) == 1\n    )\nand (array_contains(array(1, 2, 3), 2))\nand (array_distinct(array(1, 2, 3, NULL, 3)) != NULL)\nand (array_except(array(1, 2, 2, 3), array(1, 1, 3, 5)) != NULL)\nand (array_intersect(array(1, 2, 3), array(1, 3, 3, 5)) != NULL)\nand (array_join(array('hello', 'world'), ',') != NULL)\nand (array_join(array('hello', NULL, 'world'), ',', '*') == NULL)\nand (array_max(array(1, 20, NULL, 3)) > 10)\nand (array_min(array(1, 20, NULL, 3)) == 1)\nand (array_position(array(3, 2, 1, 4, 1), 1) == 2)\nand (array_remove(array(1, 2, 3, NULL, 3, 2), 3) != NULL)\nand (array_repeat('123', 2) != NULL)\nand (array_size(array(1, NULL, 3, NULL)) == 2)\nand (array_sort(array('bc', 'ab', 'dc')) != NULL)\nand (array_union(array(1, 2, 2, 3), array(1, 3, 5)) != NULL)\nand (arrays_overlap(array(1, 2, NULL, 3), array(NULL, 4, 5)) == NULL)\nand (arrays_zip(array(1, 2), array('shoe', 'string', 'budget')) == NULL)\nand (cardinality(array('b', 'd', 'c', 'a')) == 2)\nand (concat(array(1, 2, 3), array(4, 5), array(6)) != NULL)\nand (element_at(map(1, 'a', 2, 'b'), 2) == NULL)\nand (\n      EXISTS (\n        array(1, 2, 3),\n        \n        x -> x % 2 == 0\n      )\n    )\nand (\n      EXISTS (\n        array(0, NULL, 2, 3, NULL),\n        \n        x -> x IS NULL\n      )\n    )\nand (\n      filter(array(1, 2, 3), \n      x -> x % 2 == 1) != NULL\n    )\nand (flatten(array(array(1, 2), array(3, 4))) != NULL)\nand (\n      forall(array(1, 2, 3), \n      x -> x % 2 == 0) == NULL\n    )\nand (reverse(array(2, 1, 4, 3)) != NULL)\nand (sequence(5, 1) != NULL)\nand (cardinality(array('b', 'd', 'c', 'a')) == 10)\nand (slice(array(1, 2, 3, 4), 2, 2) != NULL)\nand (sort_array(array('b', 'd', NULL, 'c', 'a'), true) != NULL)\nand (\n      transform(array(1, 2, 3), \n      x -> x + 1) != NULL\n    )\nand (try_element_at(array(1, 2, 3), 2) == 2)\nand (\n      zip_with(array('a', 'b', 'c'), array('d', 'e', 'f'), \n      (x, y) -> concat(x, y)) != NULL\n    )\nand (map(1, 'Hello', 2, 'World')[1] != NULL)\nand (cardinality(map('a', 1, 'b', 2)) == 2)\nand (element_at(map(1, 'a', 2, 'b'), 3) == NULL)\nand (map(1.0, '2', 3.0, '4') IS NOT NULL)\nand (map_concat(map(1, 'a', 2, 'b'), map(3, 'c')) IS NOT NULL)\nand (map_contains_key(map(1, 'a', 2, 'b'), 2))\nand (map_entries(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_filter(map(1, 0, 2, 2, 3, -1), \n      (k, v) -> k > v) IS NOT NULL\n    )\nand (map_from_arrays(array(1.0, 3.0), array('2', '4')) IS NOT NULL)\nand (map_from_entries(array(struct(1, 'a'), struct(2, 'b'))) IS NOT NULL)\nand (map_keys(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (map_values(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_zip_with(map(1, 'a', 2, 'b'), map(1, 'x', 2, 'y'), \n      (k, v1, v2) -> concat(v1, v2)) IS NOT NULL\n    )\nand (cardinality(map('a', 1, 'b', 2)) == 2)\nand (str_to_map('a:1,b:2,c:3', ',', ':') IS NOT NULL)\nand (\n      transform_keys(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n      (k, v) -> k + 1) IS NOT NULL\n    )\nand (\n      transform_values(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n      (k, v) -> k + v) IS NOT NULL\n    )\nand (try_element_at(map(1, 'a', 2, 'b'), 2) IS NOT NULL)\nand ((INTERVAL '3:15' HOUR TO MINUTE / 3) IS NOT NULL)\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand (typeof(current_timestamp - (current_date + INTERVAL '1' DAY)) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (add_months('2016-08-31', -6) != NULL)\nand (current_date() != NULL)\nand (current_timestamp() != NULL)\nand (current_timezone() != NULL)\nand (date('2021-03-21') != NULL)\nand (date_add('2016-07-30', 1) != NULL)\nand (date_format('2016-04-08', 'y') == 2016)\nand (date_from_unix_date(1) != NULL)\nand (date_sub('2016-07-30', 1) != NULL)\nand (date_trunc('YEAR', '2015-03-05T09:32:05.359') != NULL)\nand (datediff('2009-07-31', '2009-07-30') == 1)\nand (day('2009-07-30') == 30)\nand (dayofmonth('2009-07-30') == 30)\nand (dayofweek('2009-07-30') == 5)\nand (dayofyear('2016-04-09') == 100)\nand (EXTRACT(SECONDS FROM INTERVAL '5:00:30.001' HOUR TO SECOND) == 30)\nand (EXTRACT(WEEK FROM TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') != NULL)\nand (from_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (from_utc_timestamp('2016-08-31', 'Asia/Seoul') != NULL)\nand (hour('2009-07-30 12:58:59') == 10)\nand (last_day('2009-01-12') IS NOT NULL)\nand (make_date(2013, 7, 15) IS NOT NULL)\nand (make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)\nand (make_ym_interval(100, 5) IS NOT NULL)\nand (minute('2009-07-30 12:58:59') == 58)\nand (month('2016-07-30') == 7)\nand (months_between('1997-02-28 10:30:00', '1996-10-30') == 3)\nand (months_between('1997-02-28 10:30:00', '1996-10-30', false) == 2)\nand (next_day('2015-01-14', 'TU') != NULL)\nand (now() != NULL)\nand (quarter('2016-08-31') == 3)\nand (second('2009-07-30 12:58:59') == 59)\nand (timestamp(123) != NULL)\nand (timestamp('2020-04-30 12:25:13.45') != NULL)\nand (timestamp_micros(1230219000123123) != NULL)\nand (timestamp_millis(1230219000123) != NULL)\nand (timestamp_seconds(1230219000) != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (trunc('2015-10-27', 'YEAR') != NULL)\nand (trunc('2019-08-04', 'quarter') != NULL)\nand (try_add(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_add(DATE'2021-03-31', INTERVAL '1' MONTH) != NULL)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (try_subtract(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (unix_date(DATE('1970-01-02')) == 1)\nand (unix_micros(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_millis(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 1)\nand (weekday(DATE'2009-07-30') == 1)\nand (EXTRACT(DAYOFWEEK_ISO FROM DATE'2009-07-30') == 4)\nand (weekofyear('2008-02-20') == 8)\nand (year('2016-07-30') == 2016)\nand (array(1, 2, 3) != NULL)\nand (bigint('5') == 5)\nand (binary('Spark SQL') != NULL)\nand (boolean(1))\nand (CAST(5.6 AS DECIMAL (2, 0)) != NULL)\nand (CAST(INTERVAL '1-2' YEAR TO MONTH AS INTEGER) == 12)\nand (date('2021-03-21') != NULL)\nand (decimal('5.2') == 5)\nand (double('5.2') / 2 == 5)\nand (float('5.2') / 2 == 2)\nand (int('5') == 5)\nand (make_date(2013, 7, 15) != NULL)\nand (make_dt_interval(100, 13) != NULL)\nand (make_ym_interval(100, 5) == NULL)\nand (map(1.0, '2', 3.0, '4') IS NOT NULL)\nand (named_struct('a', 1, 'b', 2, 'c', 3) IS NOT NULL)\nand (smallint('5') == 5)\nand (struct(1, 2, 3) IS NOT NULL)\nand (tinyint('12') == 12)\nand (timestamp('2020-04-30 12:25:13.45') != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31 00:12:00') != NULL)\nand (from_csv('1, 0.8', 'a INT, b DOUBLE') != NULL)\nand (schema_of_csv('1,abc') != NULL)\nand (json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') == 5)\nand (json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') != NULL)\nand (schema_of_json('[{\"col\":01}]', map('allowNumericLeadingZeros', 'true')) != NULL)\nand (to_json(named_struct('a', 1, 'b', 2)) != NULL)\nand (to_json(map(named_struct('a', 1), named_struct('b', 2))) != NULL)\nand (to_json(array((map('a', 1)))) != NULL)\nand (xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()') != NULL)\nand (xpath_boolean('<a><b>1</b></a>', 'a/b'))\nand (xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 3)\nand (xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c') != NULL)\nand (\n      assert_true(\n        0 < 1) == NULL\n    )\nand (\n      (\n        CASE\n          WHEN 1 > 0\n            THEN 1\n          WHEN 2 > 0\n            THEN 2.0\n          ELSE 1.2\n        END\n      ) == 1\n    )\nand (\n      (\n        CASE 3\n          WHEN 1\n            THEN 'A'\n          WHEN 2\n            THEN 'B'\n          WHEN 3\n            THEN 'C'\n        END\n      ) != NULL\n    )\nand (coalesce(2, 5 / 0) == 2)\nand (current_catalog() != NULL)\nand (current_database() != NULL)\nand (current_user() != NULL)\nand (decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks') != NULL)\nand (elt(1, 'scala', 'java') != NULL)\nand (greatest(10, 9, 2, 4, 3) == 10)\nand (hash('Spark', array(123), 2) != NULL)\nand (\n      if(\n        1 < 2, \n        'a', \n        'b') != NULL\n    )\nand (ifnull(NULL, array('2')) != NULL)\nand (input_file_block_length() == -1)\nand (input_file_block_start() == -1)\nand (isnull(1))\nand (isnotnull(1))\nand (least(10, 9, 2, 4, 3) == 2)\nand (monotonically_increasing_id() > 10)\nand (nullif(2, 2) == NULL)\nand (nvl(NULL, 2) == 2)\nand (nvl2(NULL, 2, 1) == 1)\nand (typeof(1) != NULL)\nand (uuid() != NULL)\nand (xxhash64('Spark', array(123), 2) != NULL)\nand ('20'::INTEGER == 20)\nand like('Spark', '_park')\nand ('Spark' LIKE SOME('_park', '_ock'))\nand (bitmap_count(x'00') == 10)\nand (charindex('bar', 'abcbarbar') == 1)\nand (decode(x'FEFF0053007000610072006B002000530051004C', 'UTF-16') != NULL)\nand (like('Spark', '_park'))\nand (len('Spark SQL ') > 10)\nand (levenshtein('kitten', 'sitting', 4) > 10)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', 'Z', 'z', '9', 'X') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', lowerChar => 'z', upperChar => 'X') != NULL)\nand (mask('AaBb123-&ASDXYZ921312asd', NULL, NULL, NULL, NULL) != NULL)\nand (overlay('Spark SQL' PLACING '_' FROM 6) != NULL)\nand (overlay('Spark SQL' PLACING 'tructured' FROM 2 FOR 4) != NULL)\nand (overlay(encode('Spark SQL', 'utf-8') PLACING encode('_', 'utf-8') FROM 6) != NULL)\nand (position('bar' IN 'abcbarbar') > 2)\nand (regexp_count('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en') > 2)\nand (regexp_instr('Mary had a little lamb', NULL) != NULL)\nand (regexp_substr(NULL, 'Ste(v|ph)en') != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (string(4) != NULL)\nand (substr('Spark SQL', -3) != NULL)\nand (substr('Spark SQL' FROM 5 FOR 1) != NULL)\nand (substr('Spark SQL' FROM -3) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_char(DATE'2016-04-08', 'y') != NULL)\nand (to_char(encode('abc', 'utf-8'), 'utf-8') != NULL)\nand (to_varchar(454, '999') != NULL)\nand (to_varchar(DATE'2016-04-08', 'y') != NULL)\nand (to_varchar(x'537061726b2053514c', 'hex') != NULL)\nand (TRIM( 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(BOTH 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(LEADING 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(TRAILING 'SL' FROM 'SSparkSQLS') != NULL)\nand (\n      CAST(try_aes_decrypt(\n        unbase64('MTIzNDU2Nzg5MDEyMdXvR41sJqwZ6hnTU8FRTTtXbL8yeChIZA=='), \n        '1234567890abcdef', \n        'GCM', \n        'DEFAULT', \n        'Some AAD') AS STRING) != NULL\n    )\nand (url_decode('http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1') != NULL)\nand (url_encode('http://spark.apache.org/path?query=1') != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' + INTERVAL '3' SECOND) != NULL)\nand (bit_reverse(-1) == -1)\nand (bitmap_bit_position(-32768) == 1)\nand (bitmap_bucket_number(-32768) == 1)\nand (MOD(2, 1.8) == 2)\nand (array_append(array(1, 2, 3), 0) == NULL)\nand (array_compact(array(1, 2, NULL, 3, NULL, 3)) == NULL)\nand (array_insert(array('a', 'b', 'c'), 1, 'z') != NULL)\nand (array_prepend(array(1, 2, 3), 0) != NULL)\nand (get(array(1, 2, 3), 2) != NULL)\nand (\n      reduce(array(1, 2, 3), 0, \n      (acc, x) -> acc + x) == 2\n    )\nand (shuffle(array(1, 20, 3, 5)) != NULL)\nand (map_contains_key(map(1, 'a', 2, 'b'), 2))\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand (date_diff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (date_part('SECONDS', TIMESTAMP'2019-10-01 00:00:01.000001') == 1)\nand (date_part('Week', TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (dateadd('2016-07-30', 1) != NULL)\nand (dateadd(MICROSECOND, 5, TIMESTAMP'2022-02-28 00:00:00') != NULL)\nand (datediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 11:59:59') == 0)\nand (make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887, 'CET') IS NOT NULL)\nand (make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)\nand (now() != NULL)\nand (timediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (timestampdiff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (to_unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 100)\nand (try_to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand ('20'::INTEGER == 20)\nand (make_interval(100, 11) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)\nand (string(5) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_varchar(454, '999') IS NOT NULL)\nand (from_json('{\"a\":1, \"b\":0.8}', 'a INT, b DOUBLE') IS NOT NULL)\nand (get_json_object('{\"a\":\"b\"}', '$.a') IS NOT NULL)\nand (to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), map('timestampFormat', 'dd/MM/yyyy')) IS NOT NULL)\nand (to_csv(named_struct('a', 1, 'b', 2)) IS NOT NULL)\nand (from_xml('<p><time>26/08/2015</time></p>', 'time Timestamp', map('timestampFormat', 'dd/MM/yyyy')) != NULL)\nand (schema_of_xml('<p><a attr=\"2\">1</a><a>3</a></p>', map('excludeAttribute', 'true')) IS NOT NULL)\nand (current_metastore() != NULL)\nand (current_schema() != NULL)\nand (current_version() != NULL)\nand (equal_null(2, 2))\nand (\n      iff(\n        1 < 2, \n        'a', \n        'b') == 'a'\n    )\nand (is_account_group_member('admins'))\nand (is_member('admins'))\nand (luhn_check('12345') == NULL)\nand (user() != NULL)\nand (h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0) != NULL)\nand (h3_coverash3string('{\"type\":\"LineString\",\"coordinates\":[[-122.4194,37.7749],[-118.2437,34.0522],[-74.0060,40.7128]]}', 1) != NULL)\nand (h3_longlatash3(-122.4783, 37.8199, 13) > 0)\nand (h3_longlatash3string(-122.4783, 37.8199, 13) != NULL)\nand (h3_pointash3('POINT(-122.4783 37.8199)', 13) > 0)\nand (h3_pointash3string('{\"type\":\"Point\",\"coordinates\":[]}', 15) == NULL)\nand (h3_pointash3string('POINT(-122.4783 37.8199)', 13) != NULL)\nand (\n      h3_polyfillash3(\n        unhex(\n          '0103000000010000000400000050fc1873d79a5ec0d0d556ec2fe342404182e2c7988f5dc0f46c567dae064140aaf1d24d628052c05e4bc8073d5b444050fc1873d79a5ec0d0d556ec2fe34240'), \n        2) != NULL\n    )\nand (h3_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3('Not-a-valid-rep', 2) == NULL)\nand (h3_try_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_boundaryasgeojson('8009fffffffffff') != NULL)\nand (h3_boundaryasgeojson(599686042433355775) != NULL)\nand (hex(h3_boundaryaswkb(599686042433355775)) != NULL)\nand (h3_boundaryaswkt(599686042433355775) != NULL)\nand (h3_centerasgeojson(599686042433355775) != NULL)\nand (hex(h3_centeraswkb('8009fffffffffff')) == NULL)\nand (h3_centeraswkt('8009fffffffffff') != NULL)\nand (h3_h3tostring(599686042433355775) != NULL)\nand (h3_stringtoh3('85283473fffffff') == NULL)\nand (h3_ischildof('88283471b9fffff', '85283473fffffff'))\nand (h3_ispentagon(590112357393367039))\nand (h3_isvalid('85283473fffffff'))\nand (h3_try_validate(590112357393367039) != NULL)\nand (h3_validate(590112357393367039) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_hexring(599686042433355775, 1) != NULL)\nand (h3_kring(599686042433355775, 1) != NULL)\nand (h3_kringdistances(599686042433355775, 1) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_maxchild(599686042433355775, 10) != NULL)\nand (h3_minchild(599686042433355775, 10) != NULL)\nand (h3_resolution(599686042433355775) == 5)\nand (h3_tochildren(599686042433355775, 6) != NULL)\nand (h3_toparent(599686042433355775, 0) != NULL)\nand (\n      h3_compact(\n        ARRAY(\n          599686042433355775, \n          599686030622195711, \n          599686044580839423, \n          599686038138388479, \n          599686043507097599, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686040285872127, \n          599686041359613951, \n          599686039212130303, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647)) != NULL\n    )\nand (\n      h3_uncompact(\n        ARRAY(\n          599686030622195711, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647, \n          595182446027210751), \n        5) != NULL\n    )"
          },
          "alias" : "c_expressions"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "pnCeMWhu",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "YpmIGqDg",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_expressions",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "raw_customers##UJiOhsXH" : {
      "id" : "raw_customers##UJiOhsXH",
      "component" : "Seed",
      "metadata" : {
        "label" : "raw_customers",
        "x" : 400,
        "y" : 1840,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "raw_customers",
          "sourceType" : "Seed"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "fdTZx2ZE",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "id",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "rTqNSEMqpFtwYBgxl2Tmc$$yODltLa_PtJSNKgLFdOLS" : {
      "id" : "rTqNSEMqpFtwYBgxl2Tmc$$yODltLa_PtJSNKgLFdOLS",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Reformat_4_1",
        "slug" : "Reformat_4_1",
        "x" : 420,
        "y" : 1400,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ "wPZo8ObT3f-PmcSiqUBjK$$Ue4m5F9KvAM15usg85Ki6##customer_id", "wPZo8ObT3f-PmcSiqUBjK$$Ue4m5F9KvAM15usg85Ki6##first_name", "wPZo8ObT3f-PmcSiqUBjK$$Ue4m5F9KvAM15usg85Ki6##last_name" ],
        "expressions" : [ {
          "expression" : {
            "expression" : "customer_id"
          },
          "alias" : "customer_id1"
        }, {
          "expression" : {
            "expression" : "first_name"
          },
          "alias" : "first_name1"
        }, {
          "expression" : {
            "expression" : "last_name"
          },
          "alias" : "last_name1"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "wPZo8ObT3f-PmcSiqUBjK$$Ue4m5F9KvAM15usg85Ki6",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "qYAu-63xuibozkqDZfzWy$$s6s0_11ooZGCoqugKx7_O",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name1",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Join_1_1##yckyF9iu" : {
      "id" : "Join_1_1##yckyF9iu",
      "component" : "Join",
      "metadata" : {
        "label" : "Join_1_1",
        "x" : 1400,
        "y" : 2660,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "conditions" : [ {
          "alias" : "in1",
          "expression" : {
            "expression" : "in0.cc_name != in1.i_item_desc"
          },
          "joinType" : "INNER"
        }, {
          "alias" : "in2",
          "expression" : {
            "expression" : "in1.i_current_price != in2.h8_30_to_9"
          },
          "joinType" : "INNER"
        } ],
        "expressions" : [ {
          "expression" : {
            "expression" : "in0.`substr(w_warehouse_name, 1, 20)`"
          },
          "alias" : "substrw_warehouse_name120"
        }, {
          "expression" : {
            "expression" : "in0.sm_type"
          },
          "alias" : "sm_type"
        }, {
          "expression" : {
            "expression" : "in0.cc_name"
          },
          "alias" : "cc_name"
        }, {
          "expression" : {
            "expression" : "in0.days_30"
          },
          "alias" : "days_30"
        }, {
          "expression" : {
            "expression" : "in0.days_31_60"
          },
          "alias" : "days_31_60"
        }, {
          "expression" : {
            "expression" : "in0.days_61_90"
          },
          "alias" : "days_61_90"
        }, {
          "expression" : {
            "expression" : "in0.days_90_120"
          },
          "alias" : "days_90_120"
        }, {
          "expression" : {
            "expression" : "in0.days_more_than_120"
          },
          "alias" : "days_more_than_120"
        }, {
          "expression" : {
            "expression" : "in1.i_item_id"
          },
          "alias" : "i_item_id"
        }, {
          "expression" : {
            "expression" : "in2.h8_30_to_9"
          },
          "alias" : "h8_30_to_9"
        } ],
        "activeTab" : "conditions",
        "columnsSelector" : [ ],
        "headAlias" : "in0"
      },
      "ports" : {
        "inputs" : [ {
          "id" : "Au335GT2",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "substr(w_warehouse_name, 1, 20)",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "sm_type",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cc_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "days_30",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "days_31_60",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "days_61_90",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "days_90_120",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "days_more_than_120",
              "dataType" : {
                "type" : "Bigint"
              }
            } ]
          },
          "slug" : "in0"
        }, {
          "id" : "LSFvehOu",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "i_item_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "i_item_desc",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "i_category",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "i_class",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "i_current_price",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "itemrevenue",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "revenueratio",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "in1"
        }, {
          "id" : "xwD0BfA6",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "h8_30_to_9",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "h9_to_9_30",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "h9_30_to_10",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "h10_to_10_30",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "h10_30_to_11",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "h11_to_11_30",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "h11_30_to_12",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "h12_to_12_30",
              "dataType" : {
                "type" : "Bigint"
              }
            } ]
          },
          "slug" : "in2"
        } ],
        "outputs" : [ {
          "id" : "pbR7Jfr8",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "substrw_warehouse_name120",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "sm_type",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cc_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "days_30",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "days_31_60",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "days_61_90",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "days_90_120",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "days_more_than_120",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "i_item_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "h8_30_to_9",
              "dataType" : {
                "type" : "Bigint"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatement_2##WFQXW9nZ" : {
      "id" : "SQLStatement_2##WFQXW9nZ",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_2",
        "x" : 1040,
        "y" : 2560,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  i_item_id,\n  i_item_desc,\n  i_category,\n  i_class,\n  i_current_price,\n  sum(ss_ext_sales_price) AS itemrevenue,\n  sum(ss_ext_sales_price) * 100 / sum(sum(ss_ext_sales_price)) OVER (PARTITION BY i_class) AS revenueratio\n\nFROM store_sales, item, date_dim\n\nWHERE ss_item_sk = i_item_sk\n      and i_category IN ('Women', 'Electronics', 'Shoes')\n      and ss_sold_date_sk = d_date_sk\n      and d_date BETWEEN CAST('2002-05-27' AS date)\n      and dateadd(DAY, 30, to_date('2002-05-27'))\n\nGROUP BY \n  i_item_id, i_item_desc, i_category, i_class, i_current_price\n\nORDER BY i_category, i_class, i_item_id, i_item_desc, revenueratio\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "T6BqbnVv",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "SS_SOLD_DATE_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_SOLD_TIME_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_ITEM_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_CUSTOMER_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_CDEMO_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_HDEMO_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_ADDR_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_STORE_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_PROMO_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_TICKET_NUMBER",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_QUANTITY",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_WHOLESALE_COST",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_LIST_PRICE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_SALES_PRICE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_EXT_DISCOUNT_AMT",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_EXT_SALES_PRICE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_EXT_WHOLESALE_COST",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_EXT_LIST_PRICE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_EXT_TAX",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_COUPON_AMT",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_NET_PAID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_NET_PAID_INC_TAX",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_NET_PROFIT",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "store_sales"
        }, {
          "id" : "QV7AhwqK",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "I_ITEM_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "I_ITEM_ID",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_REC_START_DATE",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "I_REC_END_DATE",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "I_ITEM_DESC",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_CURRENT_PRICE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "I_WHOLESALE_COST",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "I_BRAND_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "I_BRAND",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_CLASS_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "I_CLASS",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_CATEGORY_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "I_CATEGORY",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_MANUFACT_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "I_MANUFACT",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_SIZE",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_FORMULATION",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_COLOR",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_UNITS",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_CONTAINER",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_MANAGER_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "I_PRODUCT_NAME",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "item"
        }, {
          "id" : "Z0hGyoIr",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "D_DATE_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_DATE_ID",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_DATE",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "D_MONTH_SEQ",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_WEEK_SEQ",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_QUARTER_SEQ",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_YEAR",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_DOW",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_MOY",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_DOM",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_QOY",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_FY_YEAR",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_FY_QUARTER_SEQ",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_FY_WEEK_SEQ",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_DAY_NAME",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_QUARTER_NAME",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_HOLIDAY",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_WEEKEND",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_FOLLOWING_HOLIDAY",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_FIRST_DOM",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_LAST_DOM",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_SAME_DAY_LY",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_SAME_DAY_LQ",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_CURRENT_DAY",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_CURRENT_WEEK",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_CURRENT_MONTH",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_CURRENT_QUARTER",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_CURRENT_YEAR",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "date_dim"
        } ],
        "outputs" : [ {
          "id" : "E9IXw5H2",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "i_item_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "i_item_desc",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "i_category",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "i_class",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "i_current_price",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "itemrevenue",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "revenueratio",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatement_4_1##iBO6Aot0" : {
      "id" : "SQLStatement_4_1##iBO6Aot0",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_4_1",
        "x" : 680,
        "y" : 3260,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  DISTINCT SR_RETURNED_Date_SK,\n  SR_RETURN_TIME_SK,\n  SR_RETURN_amt_INC_TAX\n\nFROM Store_RETURNS\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "vdEOP7Y5",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "SR_RETURNED_DATE_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_TIME_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_ITEM_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_CUSTOMER_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_CDEMO_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_HDEMO_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_ADDR_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_STORE_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_REASON_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_TICKET_NUMBER",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_QUANTITY",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_AMT",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_TAX",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_AMT_INC_TAX",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_FEE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_SHIP_COST",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_REFUNDED_CASH",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_REVERSED_CHARGE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_STORE_CREDIT",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_NET_LOSS",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "store_returns"
        } ],
        "outputs" : [ {
          "id" : "IKyWOh13",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "SR_RETURNED_Date_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_TIME_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_amt_INC_TAX",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "RwUkJZcN0j_md6VF-bVnG$$oJsWZsDP2SVx-XCy_EN65" : {
      "id" : "RwUkJZcN0j_md6VF-bVnG$$oJsWZsDP2SVx-XCy_EN65",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_6",
        "slug" : "SQLStatement_6",
        "x" : 140,
        "y" : 60,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "select * from SQLStatement_3_2"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "l-gjOwdAkjPyS8CAVdIeE$$tSrV7ZVrQEO5N0NMSnMEA",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "SQLStatement_3_2"
        } ],
        "outputs" : [ {
          "id" : "d0aw4ED62Q-hnHMr9wMp5$$MFS4OVhJtkPqfU0ZO44HG",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "combine_multiple_tables_2##E16CusBx" : {
      "id" : "combine_multiple_tables_2##E16CusBx",
      "component" : "Macro",
      "metadata" : {
        "label" : "combine_multiple_tables_2",
        "x" : 1380,
        "y" : 3540,
        "phase" : 0,
        "macroDependencies" : [ "SQL_DatabricksSharedBasic.combine_multiple_tables" ]
      },
      "properties" : {
        "macroName" : "combine_multiple_tables",
        "parameters" : [ {
          "name" : "table_1",
          "value" : "'Reformat_5'"
        }, {
          "name" : "table_2",
          "value" : "'Reformat_6'"
        }, {
          "name" : "table_3",
          "value" : "'Reformat_4'"
        }, {
          "name" : "table_4",
          "value" : "'Reformat_3'"
        }, {
          "name" : "table_5",
          "value" : "'Reformat_2'"
        }, {
          "name" : "col_table_1",
          "value" : "'IB_LOWER_BOUND'"
        } ],
        "projectName" : "SQL_DatabricksSharedBasic"
      },
      "ports" : {
        "inputs" : [ {
          "id" : "TwrtFNVi",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "IB_INCOME_BAND_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "IB_LOWER_BOUND",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "IB_UPPER_BOUND",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "Reformat_5"
        }, {
          "id" : "qBdQQxNI",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "SR_RETURNED_DATE_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_TIME_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "Reformat_6"
        }, {
          "id" : "NxGqCnY1",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "T_TIME_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_TIME_ID",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "T_TIME",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_HOUR",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_MINUTE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_SECOND",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_AM_PM",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "T_SHIFT",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "T_SUB_SHIFT",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "T_MEAL_TIME",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "Reformat_4"
        }, {
          "id" : "RXAOGoix",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "USER_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "ORDER_DATE",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "STATUS",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "Reformat_3"
        }, {
          "id" : "Eg55knoS",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "ORDER_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "PAYMENT_METHOD",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "AMOUNT",
              "dataType" : {
                "type" : "Float"
              }
            } ]
          },
          "slug" : "Reformat_2"
        } ],
        "outputs" : [ {
          "id" : "Oi9YT5Yy",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "IB_INCOME_BAND_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "IB_LOWER_BOUND",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "IB_UPPER_BOUND",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "W6d_qAb5bk-LsaxrIPlsp$$x7lZIHXDfyCDfMj2s1q8M" : {
      "id" : "W6d_qAb5bk-LsaxrIPlsp$$x7lZIHXDfyCDfMj2s1q8M",
      "component" : "Source",
      "metadata" : {
        "label" : "all_type_parquet_1",
        "slug" : "all_type_parquet_1",
        "x" : 20,
        "y" : 960,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "all_type_parquet",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "Jabs7YhDO6CbGeF85Yaku$$s5zflmLYW1Zv76Isl1_iO",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Reformat_4##oeHN9sfn" : {
      "id" : "Reformat_4##oeHN9sfn",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Reformat_4",
        "x" : 1040,
        "y" : 3460,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ "BB9Ygltc##T_TIME_SK", "BB9Ygltc##T_TIME_ID", "BB9Ygltc##T_TIME", "BB9Ygltc##T_HOUR", "BB9Ygltc##T_MINUTE", "BB9Ygltc##T_SECOND", "BB9Ygltc##T_AM_PM", "BB9Ygltc##T_SHIFT", "BB9Ygltc##T_SUB_SHIFT", "BB9Ygltc##T_MEAL_TIME" ],
        "expressions" : [ {
          "expression" : {
            "expression" : "T_TIME_SK"
          },
          "alias" : "T_TIME_SK"
        }, {
          "expression" : {
            "expression" : "T_TIME_ID"
          },
          "alias" : "T_TIME_ID"
        }, {
          "expression" : {
            "expression" : "T_TIME"
          },
          "alias" : "T_TIME"
        }, {
          "expression" : {
            "expression" : "T_HOUR"
          },
          "alias" : "T_HOUR"
        }, {
          "expression" : {
            "expression" : "T_MINUTE"
          },
          "alias" : "T_MINUTE"
        }, {
          "expression" : {
            "expression" : "T_SECOND"
          },
          "alias" : "T_SECOND"
        }, {
          "expression" : {
            "expression" : "T_AM_PM"
          },
          "alias" : "T_AM_PM"
        }, {
          "expression" : {
            "expression" : "T_SHIFT"
          },
          "alias" : "T_SHIFT"
        }, {
          "expression" : {
            "expression" : "T_SUB_SHIFT"
          },
          "alias" : "T_SUB_SHIFT"
        }, {
          "expression" : {
            "expression" : "T_MEAL_TIME"
          },
          "alias" : "T_MEAL_TIME"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "BB9Ygltc",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "T_TIME_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_TIME_ID",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "T_TIME",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_HOUR",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_MINUTE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_SECOND",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_AM_PM",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "T_SHIFT",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "T_SUB_SHIFT",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "T_MEAL_TIME",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "MM1urAHe",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "T_TIME_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_TIME_ID",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "T_TIME",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_HOUR",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_MINUTE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_SECOND",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_AM_PM",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "T_SHIFT",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "T_SUB_SHIFT",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "T_MEAL_TIME",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "env_uitesting_shared_mid_model_1##ulYD9HMP" : {
      "id" : "env_uitesting_shared_mid_model_1##ulYD9HMP",
      "component" : "Model",
      "metadata" : {
        "label" : "env_uitesting_shared_mid_model_1",
        "x" : 1700,
        "y" : 340,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "env_uitesting_shared_mid_model_1",
          "sourceType" : "Model"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "ddrnHtjQ",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Limit_5##fwKxhZIv" : {
      "id" : "Limit_5##fwKxhZIv",
      "component" : "Limit",
      "metadata" : {
        "label" : "Limit_5",
        "x" : 2180,
        "y" : 1420,
        "phase" : 0
      },
      "properties" : {
        "limit" : {
          "expression" : "10"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "QFNpzYCR",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_bool_expr",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_concat_expr",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_add_expr",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_macro",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_if",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_0",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_2",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_3",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_4",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_databricks_project_main",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_base_project",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_dbt_utils_functions",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "QKP9Qoje",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_bool_expr",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_concat_expr",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_add_expr",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_macro",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_if",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_0",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_2",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_3",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_4",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_databricks_project_main",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_base_project",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_dbt_utils_functions",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Limit_6##ct7gxs0n" : {
      "id" : "Limit_6##ct7gxs0n",
      "component" : "Limit",
      "metadata" : {
        "label" : "Limit_6",
        "x" : 1700,
        "y" : 20,
        "phase" : 0
      },
      "properties" : {
        "limit" : {
          "expression" : "10"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "JI8WnTzy",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "DidjhMf0",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "payments##DKw6BnwY" : {
      "id" : "payments##DKw6BnwY",
      "component" : "Source",
      "metadata" : {
        "label" : "payments",
        "x" : 680,
        "y" : 3860,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "payments",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_suggestion_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "l0X13Mqe",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "ORDER_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "PAYMENT_METHOD",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "AMOUNT",
              "dataType" : {
                "type" : "Float"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Reformat_6##gPFOWxFo" : {
      "id" : "Reformat_6##gPFOWxFo",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Reformat_6",
        "x" : 1040,
        "y" : 3260,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ ],
        "expressions" : [ {
          "expression" : {
            "expression" : "SR_RETURNED_DATE_SK"
          },
          "alias" : "SR_RETURNED_DATE_SK"
        }, {
          "expression" : {
            "expression" : "SR_RETURN_TIME_SK"
          },
          "alias" : "SR_RETURN_TIME_SK"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "orl58slR",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "SR_RETURNED_Date_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_TIME_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_amt_INC_TAX",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "PoSYvB8f",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "SR_RETURNED_DATE_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SR_RETURN_TIME_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "env_uitesting_main_model_databricks_1##LVcodVNp" : {
      "id" : "env_uitesting_main_model_databricks_1##LVcodVNp",
      "component" : "Model",
      "metadata" : {
        "label" : "env_uitesting_main_model_databricks_1",
        "x" : 1040,
        "y" : 2160,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "env_uitesting_main_model_databricks_1",
          "sourceType" : "Model"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "QKMsi9rE",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "c_id",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "env_uitesting_shared_child_model_1##v1E09nnW" : {
      "id" : "env_uitesting_shared_child_model_1##v1E09nnW",
      "component" : "Model",
      "metadata" : {
        "label" : "env_uitesting_shared_child_model_1",
        "x" : 1400,
        "y" : 20,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "env_uitesting_shared_child_model_1",
          "sourceType" : "Model"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "aalC3wCa",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SetOperation_3##n62DNNDw" : {
      "id" : "SetOperation_3##n62DNNDw",
      "component" : "SetOperation",
      "metadata" : {
        "label" : "SetOperation_3",
        "x" : 2180,
        "y" : 4040,
        "phase" : 0
      },
      "properties" : {
        "operationType" : "except",
        "preserveDuplicates" : false,
        "useMinus" : false,
        "inputAliases" : [ "in0", "in1" ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "RnHN032M",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        }, {
          "id" : "u7aH7U4K",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in1"
        } ],
        "outputs" : [ {
          "id" : "FVEm8bDX",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Reformat_5##IkQd1DDf" : {
      "id" : "Reformat_5##IkQd1DDf",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Reformat_5",
        "x" : 1040,
        "y" : 3060,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ ],
        "expressions" : [ {
          "expression" : {
            "expression" : "IB_INCOME_BAND_SK"
          },
          "alias" : "IB_INCOME_BAND_SK"
        }, {
          "expression" : {
            "expression" : "IB_LOWER_BOUND"
          },
          "alias" : "IB_LOWER_BOUND"
        }, {
          "expression" : {
            "expression" : "IB_UPPER_BOUND"
          },
          "alias" : "IB_UPPER_BOUND"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "tH3ENkVw",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "IB_INCOME_BAND_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "IB_Lower_boUND",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "IB_UPPER_BOUND",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "brlV3o5Y",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "IB_INCOME_BAND_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "IB_LOWER_BOUND",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "IB_UPPER_BOUND",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "V8eyfhE5CmHBRs9gFoVT4$$8BD87yZF0blk_c2kv9bdk" : {
      "id" : "V8eyfhE5CmHBRs9gFoVT4$$8BD87yZF0blk_c2kv9bdk",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_1_4",
        "slug" : "SQLStatement_1_4",
        "x" : -460,
        "y" : -60,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "select * from all_type_parquet_2"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "j2TAIhyzd2D9Y6GosmnRE$$8tqHFdCLqlsPR87NHcNJM",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "all_type_parquet_2"
        } ],
        "outputs" : [ {
          "id" : "GBOx_fP9_bBsklFw4dbbl$$UUt2EKOHLn9I4sSyJgMfs",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Ob4ao-9UUr_aQDB7lphdd$$09CToGxHslJbg513gwLxB" : {
      "id" : "Ob4ao-9UUr_aQDB7lphdd$$09CToGxHslJbg513gwLxB",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "pvt",
        "slug" : "pvt",
        "x" : 800,
        "y" : -480,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT d.department_ID as c1\n    FROM departments AS d, LATERAL (SELECT * FROM employees AS e WHERE e.department_ID = d.department_ID) AS iv2\n    ORDER BY employee_ID"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "nMz85fvIbrCb1GSsF3ihH$$SE2689QPOnEPlZAvx7sDb",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "employee_ID",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "department_ID",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "project_names",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            } ]
          },
          "slug" : "employees"
        }, {
          "id" : "iJf9tCmhX5oIpF8d6yd7F$$xEv2E2TdpkD8Jvf3p9EY1",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "department_ID",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "department_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "departments"
        } ],
        "outputs" : [ {
          "id" : "CksExcWiaezsNpSMwkaM-$$1DdsHICXnDrgmnQBdm0UV",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "ox8-d9dFM60gJhjW8tog1$$mAQP-VGEk51PFkntYK3Gq" : {
      "id" : "ox8-d9dFM60gJhjW8tog1$$mAQP-VGEk51PFkntYK3Gq",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_2_1",
        "slug" : "SQLStatement_2_1",
        "x" : 680,
        "y" : 600,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "select \nALL customer_id, \nfirst_name,\nc1, \nc3,\nc6,\nc13,\nc14\nfrom AllExReformat"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "OpoWCcXuNGlrdNaZ_ixkz$$ldYpWIAT_ftEihO8mKH2m",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c2",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "Aggregate_1_1"
        }, {
          "id" : "cPT2svWr6GXcSyQxiKRx-$$J4NWtvQAkDbZp_gUgha2b",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(CAST(customer_id AS INT) > 5)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(customer_id AS INT) = 0))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "first_name LIKE %A%",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((1 & 1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((2 | 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((10 * CAST(customer_id AS INT)) = 20)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (last_name = first_name))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((CAST(customer_id AS INT) >= 10) AND (CAST(customer_id AS INT) <= 20))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array(10, 20, 30)[2] = 30)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map(1, Hello, 2, World)[1] = Hello)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d7",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map(three, 3)[four] = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d8",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((1 = 2) AND (1 = 2))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(((((1 >= 2) AND (1 <= 2)) AND (NOT (1 = 3))) OR (2 > 4)) OR (4 < 5))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col22",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d81",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(named_struct(a, 1, b, 2) IN (named_struct(a, 1, b, 1), named_struct(a, 1, b, 3)))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (1 <=> 5))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(invalid <=> false)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(51 IS NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c46",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(1 <=> 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (1 = CAST(customer_id AS INT)))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(((10 - 2) + 10) = 8)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT true)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(false OR true)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((2 % 0) = 0)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(concat(Spark, SQL) = SparkSQL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "%SystemDrive%\\Users\\John LIKE %System23Drive%\\\\Users%",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "RLIKE(%SystemDr12ive%\\Users\\John, %System23Drive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "REGEXP_LIKE(%Syst2emDrive%\\Users\\John, %SystemD545rive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((2 / 2) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(~0 = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(base64(aes_encrypt(Spark, abcdefghijklmnop, GCM, DEFAULT, , )) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CAST(aes_decrypt(unbase64(4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn), abcdefghijklmnop, GCM, DEFAULT, ) AS STRING) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ascii(234) = 234)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(base64(Spark SQL) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bin(13) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(Spark SQL = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (btrim(abcaabaSparkSQLabcaaba, abc) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (char(65) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(char_length(Spark SQL ) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(character_length(Spark SQL ) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(customer_id, hello) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat_ws(,, Spark, array(S, Q, NULL, L), NULL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "contains(SparkSQL, Spork)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(crc32(Spark) > 0)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (chr(65) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 ^ 5) = 6)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (hex(encode(Spark SQL, US-ASCII)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "endswith(SparkSQL, SQL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(find_in_set(ab, abc,b,ab,c,def) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(format_number(12332.123456, 4) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(format_number(12332.123456, #.###) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (format_string(Hello World %d %s, 100, days) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (hex(Spark SQL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "%SystemDrive%\\Users\\John LIKE %SystemDrive%\\\\Users%",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (initcap(sPark sql) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(instr(SparkSQL, R) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (lcase(LowerCase) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (left(Spark SQL, 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(length(Spark SQL ) > 20)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(levenshtein(kitten, sitting) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col1201",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col1202",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (lower(LowerCase) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (lpad(hi, 1, ??) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (hex(lpad(X'1020', 5, X'05')) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col120",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (md5(Spark) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (octet_length(Spark SQL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (parse_url(http://spark.apache.org/path?query=1, HOST) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(position(bar, abcbarbar, 1) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(position(bar, abcbarbar, 5) > 5)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (printf(Hello World %d %s, 100, days) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "RLIKE(%SystemDarive%\\Users\\John, %SystemDrive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "RLIKE(%System1Drive%\\Users\\John, %SystemDrive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "REGEXP_LIKE(%SystemDa1rive%\\Users\\John, %SystemDrive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(regexp_extract(100-200, (\\d+)-(\\d+), 1) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (regexp_extract_all(100-200, 300-400, (\\d+)-(\\d+), 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (regexp_replace(100-200, (\\d+), num, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (repeat(123, 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (replace(ABCabc, abc, DEF) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (reverse(Spark SQL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (right(Spark SQL, 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (rpad(hi, 5, ab) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (hex(rpad(X'1020', 5, X'05')) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sentences(Hi there! Good morning., en, US) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sha(Spark) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sha1(Spark) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sha2(Spark, 256) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (soundex(Miller) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(1, space(2), 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(concat(->, split_part(Hello,world,!, ,, 1)), <-) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(concat(->, split_part(, ,, 1)), <-) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(concat(->, split_part(Hello,World,!, ,, 0)), <-) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "startswith(SparkSQL, Spark)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "startswith(NULL, Spark)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substr(Spark SQL, 5, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substring_index(www.apache.org, ., 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(to_binary(537061726B) AS STRING) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(to_binary(537061726B, hex) AS STRING) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col50",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (translate(AaBbCc, abc, 123) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(try_to_binary(U3Bhxcms=, base64) AS STRING) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (ucase(SparkSql) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(unbase64(U3BhcmsgU1FM) AS STRING) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (decode(unhex(537061726B2053514C), UTF-8) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (upper(SparkSql) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d9",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 | 5) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (DATE '2021-03-20' - INTERVAL '2' MONTH = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(((10 - 2) + 2) = 4)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((2 % 1.8) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 ^ 5) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 & 5) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 * 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT ((INTERVAL '3' YEAR * 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(abs(-1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ACOS(1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ACOSH(1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ASIN(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ASINH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ATAN(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ATAN2(0, 0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ATANH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(current_timestamp() > 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bit_count(-1) > 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bit_get(23, 1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bround(13.5, -1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(round(13.5, -1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CBRT(27.0) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ceil(3345.1, -2) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ceiling(5.4) = 6)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ceiling(3345.1, -2) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(conv(100, 2, 10) = 4)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(conv(FFFFFFFFFFFFFFFF, 16, 10) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(COS(PI()) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(COSH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(COT(1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CSC((PI() / 2)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d10",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(DEGREES(3.141592653589793) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(5.2 = 4)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(E() = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(EXP(1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(EXPM1(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(factorial(2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d11",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(FLOOR(-0.1) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(floor(3345.1, -2) = 20)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(getbit(23, 0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d12",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d13",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "isnan(CAST(NaN AS DOUBLE))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ln(1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(LOG(10, 100) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(LOG1P(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(LOG2(2) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(LOG10(10) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(nanvl(CAST(NaN AS DOUBLE), 123) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(negative(1) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(pmod(-10, 3) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((+ -1) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((pow(2, 3) * POWER(2, 3)) = 8)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(RADIANS(180) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((rand(0) * rand(0)) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(randn(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(rint(12.3456) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(round(2.5, 0) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SEC(PI()) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SIN(0) = 0)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(shiftleft(2, 1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(shiftright(4, 1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(shiftrightunsigned(4, 1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(sign(40) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SIGNUM(40) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SINH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(-5.6 = 5)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SQRT(4) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(TAN(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(TANH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((12 * 5.4) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_add(DATE '2021-03-20', INTERVAL '2' MONTH) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_add(1, 2) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_divide(3, 2) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col110",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_subtract(1, 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col111",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_subtract(-128, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2)) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array(10, 20, 30) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col21",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "array_contains(array(1, 2, 3), 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_distinct(array(1, 2, 3, NULL, 3)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_except(array(1, 2, 2, 3), array(1, 1, 3, 5)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_intersect(array(1, 2, 3), array(1, 3, 3, 5)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_join(array(hello, world), ,) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_join(array(hello, NULL, world), ,, *) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_max(array(1, 20, NULL, 3)) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_min(array(1, 20, NULL, 3)) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_position(array(3, 2, 1, 4, 1), 1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_remove(array(1, 2, 3, NULL, 3, 2), 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_repeat(123, 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_size(array(1, NULL, 3, NULL)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_sort(array(bc, ab, dc), lambdafunction((IF(((namedlambdavariable() IS NULL) AND (namedlambdavariable() IS NULL)), 0, (IF((namedlambdavariable() IS NULL), 1, (IF((namedlambdavariable() IS NULL), -1, (IF((namedlambdavariable() < namedlambdavariable()), -1, (IF((namedlambdavariable() > namedlambdavariable()), 1, 0)))))))))), namedlambdavariable(), namedlambdavariable())) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_union(array(1, 2, 2, 3), array(1, 3, 5)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(arrays_overlap(array(1, 2, NULL, 3), array(NULL, 4, 5)) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(arrays_zip(array(1, 2), array(shoe, string, budget)) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(cardinality(array(b, d, c, a)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(array(1, 2, 3), array(4, 5), array(6)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(element_at(map(1, a, 2, b), 2) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col20",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col19",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col18",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (flatten(array(array(1, 2), array(3, 4))) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col17",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (reverse(array(2, 1, 4, 3)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sequence(5, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(cardinality(array(b, d, c, a)) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (slice(array(1, 2, 3, 4), 2, 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sort_array(array(b, d, NULL, c, a), true) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col16",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_element_at(array(1, 2, 3), 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (map(1, Hello, 2, World)[1] = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col67",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(element_at(map(1, a, 2, b), 3) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map(1.0, 2, 3.0, 4) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map_concat(map(1, a, 2, b), map(3, c)) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map_entries(map(1, a, 2, b)) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col14",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map_from_arrays(array(1.0, 3.0), array(2, 4)) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map_from_entries(array(struct(1, a), struct(2, b))) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map_keys(map(1, a, 2, b)) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map_values(map(1, a, 2, b)) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col13",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(cardinality(map(a, 1, b, 2)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(str_to_map(a:1,b:2,c:3, ,, :) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col12",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col11",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_element_at(map(1, a, 2, b), 2) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((INTERVAL '03:15' HOUR TO MINUTE / 3) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (typeof((current_timestamp() - date_add(current_date(), extractansiintervaldays(INTERVAL '1' DAY)))) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col124",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col100",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (add_months(2016-08-31, -6) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_date() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_timestamp() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_timezone() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col112",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121d",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (date_from_unix_date(1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121gh",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (date_trunc(YEAR, 2015-03-05T09:32:05.359) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(datediff(2009-07-31, 2009-07-30) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(day(2009-07-30) = 30)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(dayofmonth(2009-07-30) = 30)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d14",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col16121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(extract(SECONDS FROM INTERVAL '05:00:30.001' HOUR TO SECOND) = 30)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(extract(WEEK FROM TIMESTAMP '2019-08-12 01:00:00.123456') = 33)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (from_unixtime(0, yyyy-MM-dd HH:mm:ss) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (from_utc_timestamp(2017-07-14 02:40:00.0, GMT+1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (from_utc_timestamp(2016-08-31, Asia/Seoul) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(hour(2009-07-30 12:58:59) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(last_day(2009-01-12) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_date(2013, 7, 15) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_ym_interval(100, 5) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d15",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121hjh",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(months_between(1997-02-28 10:30:00, 1996-10-30, true) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(months_between(1997-02-28 10:30:00, 1996-10-30, false) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (next_day(2015-01-14, TU) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(quarter(2016-08-31) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d16",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (123 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (2020-04-30 12:25:13.45 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (timestamp_micros(1230219000123123) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (timestamp_millis(1230219000123) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (timestamp_seconds(1230219000) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_date(2016-12-31, yyyy-MM-dd) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_timestamp(2016-12-31, yyyy-MM-dd) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_utc_timestamp(2017-07-14 02:40:00.0, GMT+1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (trunc(2015-10-27, YEAR) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (trunc(2019-08-04, quarter) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_add(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_add(DATE '2021-03-31', INTERVAL '1' MONTH) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_divide(INTERVAL '03:15' HOUR TO MINUTE, 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col101",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_subtract(DATE '2021-03-20', INTERVAL '2' MONTH) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_subtract(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(unix_date(1970-01-02) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(unix_micros(1970-01-01 00:00:01Z) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(unix_millis(1970-01-01 00:00:01Z) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(unix_seconds(1970-01-01 00:00:01Z) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col1123423",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(weekday(DATE '2009-07-30') = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(extract(DAYOFWEEK_ISO FROM DATE '2009-07-30') = 4)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(weekofyear(2008-02-20) = 8)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121rtyr",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array(1, 2, 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d3",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (Spark SQL = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(5.6 AS DECIMAL(2,0)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CAST(INTERVAL '1-2' YEAR TO MONTH AS INT) = 12)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (2021-03-21 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d2",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((5.2 / 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d4",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (make_date(2013, 7, 15) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (make_dt_interval(100, 13, 0, 0.000000) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_ym_interval(100, 5) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col113",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(named_struct(a, 1, b, 2, c, 3) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d5",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(struct(1, 2, 3) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(12 = 12)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col114",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col115",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_timestamp(2016-12-31 00:12:00) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (from_csv(1, 0.8) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (schema_of_csv(1,abc) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(json_array_length([1,2,3,{\"f1\":1,\"f2\":[5,6]},4]) = 5)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (json_object_keys({\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (schema_of_json([{\"col\":01}]) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_json(named_struct(a, 1, b, 2)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_json(map(named_struct(a, 1), named_struct(b, 2))) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_json(array(map(a, 1))) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xpath(<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>, a/b/text()) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "xpath_boolean(<a><b>1</b></a>, a/b)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xpath_double(<a><b>1</b><b>2</b></a>, sum(a/b)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xpath_float(<a><b>1</b><b>2</b></a>, sum(a/b)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col117",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(xpath_long(<a><b>1</b><b>2</b></a>, sum(a/b)) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(xpath_number(<a><b>1</b><b>2</b></a>, sum(a/b)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(xpath_int(<a><b>1</b><b>2</b></a>, sum(a/b)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xpath_string(<a><b>b</b><c>cc</c></a>, a/c) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col10",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col9",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col8",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(coalesce(2, (5 / 0)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_catalog() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c21543123d",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (abhisheks@prophecy.io = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (decode(5, 6, Spark, 5, SQL, 4, rocks) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (elt(1, scala, java) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(greatest(10, 9, 2, 4, 3) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (hash(Spark, array(123), 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col7",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (ifnull(NULL, array(2)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(input_file_block_length() = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(input_file_block_start() = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(1 IS NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(1 IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(least(10, 9, 2, 4, 3) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(monotonically_increasing_id() > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(nullif(2, 2) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(nvl(NULL, 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(nvl2(NULL, 2, 1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (typeof(1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (uuid() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xxhash64(Spark, array(123), 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(20 = 20)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d866",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d889",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bitmap_count(X'00') = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(charindex(bar, abcbarbar, 1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (decode(X'FEFF0053007000610072006B002000530051004C', UTF-16) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d8123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(len(Spark SQL ) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(levenshtein(kitten, sitting, 4) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(concat(+, TRIM(LEADING abc FROM acbabSparkSQL   )), +) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (mask(AaBb123-&^ASDXYZ921312asd, Z, z, 9, X) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (mask(AaBb123-&^ASDXYZ921312asd, X, z, n, NULL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (mask(AaBb123-&ASDXYZ921312asd, NULL, NULL, NULL, NULL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (overlay(Spark SQL, _, 6, -1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (overlay(Spark SQL, tructured, 2, 4) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (overlay(encode(Spark SQL, utf-8), encode(_, utf-8), 6, -1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(locate(bar, abcbarbar, 1) > 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(regexp_count(Steven Jones and Stephen Smith are the best players, Ste(v|ph)en) > 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (regexp_instr(Mary had a little lamb, NULL, 0) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (regexp_substr(NULL, Ste(v|ph)en) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (TRIM(TRAILING ab FROM SparkSQLabcaaba) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (4 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substr(Spark SQL, -3, 2147483647) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substring(Spark SQL, 5, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substring(Spark SQL, -3, 2147483647) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col11112",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (decode(encode(abc, utf-8), utf-8) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_char(454, 999) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col1567812",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_varchar(X'537061726B2053514C') = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15678121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15678123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15678125",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15678127",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col6",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (url_decode(http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (url_encode(http://spark.apache.org/path?query=1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col125",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col156781254",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bit_reverse(-1) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bitmap_bit_position(-32768) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bitmap_bucket_number(-32768) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(mod(2, 1.8) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_append(array(1, 2, 3), 0) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_compact(array(1, 2, NULL, 3, NULL, 3)) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_insert(array(a, b, c), 1, z) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_prepend(array(1, 2, 3), 0) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (get(array(1, 2, 3), 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col5",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (shuffle(array(1, 20, 3, 5)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "map_contains_key(map(1, a, 2, b), 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (DATE '2021-03-31' - INTERVAL '1' MONTH = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (DATE '2021-03-31' + INTERVAL '1' MONTH = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (TIMESTAMP '2021-03-20 12:15:29' - INTERVAL '03' SECOND = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(timestampdiff(MONTH, TIMESTAMP '2021-02-28 12:00:00', TIMESTAMP '2021-03-28 12:00:00') = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(date_part(SECONDS, TIMESTAMP '2019-10-01 00:00:01.000001') = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(date_part(Week, TIMESTAMP '2019-08-12 01:00:00.123456') = 33)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121a1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (timestampadd(MICROSECOND, 5, TIMESTAMP '2022-02-28 00:00:00') = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(timestampdiff(MONTH, TIMESTAMP '2021-02-28 12:00:00', TIMESTAMP '2021-03-28 11:59:59') = 0)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_timestamp(2014, 12, 28, 6, 30, 45.887, CET) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (now() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c45fg6789hgf1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c45fg6789hgf",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c45fg6789hgf2",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_to_timestamp(2016-12-31, yyyy-MM-dd) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_interval(100, 11, 0, 0, 0, 0, 0.000000) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (5 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_char(454, 000.00) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(to_char(454, 999) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(from_json({\"a\":1, \"b\":0.8}) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(get_json_object({\"a\":\"b\"}, $.a) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(to_csv(named_struct(time, to_timestamp(2015-08-26, yyyy-MM-dd))) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(to_csv(named_struct(a, 1, b, 2)) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (from_xml(<p><time>26/08/2015</time></p>) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(schema_of_xml(<p><a attr=\"2\">1</a><a>3</a></p>) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (aws:us-west-1:3fa0cd4e-bf05-4fde-894d-9dc222ae0419 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_database() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_version() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "equal_null(2, 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col4",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(admins IN ('account users'))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1d1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold13412asd",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold13423423",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1f4",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1asd",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1asd12",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1das122",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1test1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1test2",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col3455",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1asd342346",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1j",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1jk",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1jk1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1ghj",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1qwe",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1qweqwe",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1qweq123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold112sas",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1qwe234",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1dasd3456456",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1sdf56456",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1sdf43534523",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1dasd56346435234",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1dasd23414123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1adsasd123412312",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold1adsasd123412312",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold12",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold15",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold17",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold1as",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold1121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1657456cold1yui",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold14565cold1s254fg",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1345cold1dsa23",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d6cold1345cold1dsa23",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold11cold1345cold1dsa231",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold1345cold1dsa23232",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col2",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col1",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "AllExSQL"
        }, {
          "id" : "CtLgd6C6ZCp6WKa6XXUoX$$OcK6s3buCnqLHyXmoiiy_",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c2",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "Reformat_3_1"
        }, {
          "id" : "c-fb-RhfWUWDFe3VSyZ5D$$sNhYcZ2A0MYvLWaBpLe_6",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_expressions",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c2",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c3",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "c4",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c5",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Integer"
                }
              }
            }, {
              "name" : "c6",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c7",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c8",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Integer"
                }
              }
            }, {
              "name" : "c9",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "c10",
              "dataType" : {
                "type" : "Timestamp"
              }
            }, {
              "name" : "c11",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c12",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c13",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c14",
              "dataType" : {
                "type" : "Timestamp"
              }
            }, {
              "name" : "c15",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c16",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Bigint"
                }
              }
            }, {
              "name" : "c17",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c18",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c19",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c20",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c21",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "AllExReformat"
        }, {
          "id" : "niD2Y4b9XoLiSIeJ5F4zM$$TlfRpjYADFnXdc42ASXtB",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "OrderBy_1_1"
        } ],
        "outputs" : [ {
          "id" : "SRWLX-L3GoWGoB7jDMTD-$$MmoHXOPBW7Vzo2LYm_3hP",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c3",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "c6",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c13",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c14",
              "dataType" : {
                "type" : "Timestamp"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatement_4##DlqCpdXf" : {
      "id" : "SQLStatement_4##DlqCpdXf",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_4",
        "x" : 680,
        "y" : 3060,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  DISTINCT IB_INCOME_BAND_SK,\n  IB_Lower_boUND,\n  IB_UPPER_BOUND\n\nFROM Income_BAND\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "eybxt2n8",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "IB_INCOME_BAND_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "IB_LOWER_BOUND",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "IB_UPPER_BOUND",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "income_band"
        } ],
        "outputs" : [ {
          "id" : "lf4uh5qK",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "IB_INCOME_BAND_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "IB_Lower_boUND",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "IB_UPPER_BOUND",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "item##MwOy1r6F" : {
      "id" : "item##MwOy1r6F",
      "component" : "Source",
      "metadata" : {
        "label" : "item",
        "x" : 680,
        "y" : 2440,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "item",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "D0UZszIU",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "I_ITEM_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "I_ITEM_ID",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_REC_START_DATE",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "I_REC_END_DATE",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "I_ITEM_DESC",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_CURRENT_PRICE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "I_WHOLESALE_COST",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "I_BRAND_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "I_BRAND",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_CLASS_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "I_CLASS",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_CATEGORY_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "I_CATEGORY",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_MANUFACT_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "I_MANUFACT",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_SIZE",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_FORMULATION",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_COLOR",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_UNITS",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_CONTAINER",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "I_MANAGER_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "I_PRODUCT_NAME",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "h3ZPq_VCXMd63fGa-weyU$$thDyi79J68_nF2mWyFsmv" : {
      "id" : "h3ZPq_VCXMd63fGa-weyU$$thDyi79J68_nF2mWyFsmv",
      "component" : "Source",
      "metadata" : {
        "label" : "all_type_parquet_2",
        "slug" : "all_type_parquet_2",
        "x" : -660,
        "y" : -60,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "all_type_parquet",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "zpF2jWvbJ4670r_qtkoAA$$J4SAI2Tyx5B3tDN7l08fv",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "IdiUOLEWeYkGn32Rp8fbA$$UirVXr-S6nbTA9r6i4hA4" : {
      "id" : "IdiUOLEWeYkGn32Rp8fbA$$UirVXr-S6nbTA9r6i4hA4",
      "component" : "Reformat",
      "metadata" : {
        "label" : "AllExReformat",
        "slug" : "AllExReformat",
        "x" : 420,
        "y" : 800,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ "nbbU58Fw##customer_id", "nbbU58Fw##first_name", "nbbU58Fw##last_name" ],
        "expressions" : [ {
          "expression" : {
            "expression" : "customer_id"
          },
          "alias" : "customer_id"
        }, {
          "expression" : {
            "expression" : "first_name"
          },
          "alias" : "first_name"
        }, {
          "expression" : {
            "expression" : "last_name"
          },
          "alias" : "last_name"
        }, {
          "expression" : {
            "expression" : "CAST(customer_id AS int) > 5\nand CAST(customer_id AS int) != 0\nor first_name LIKE '%A%'\nor ((1 & 1) == 1)\nor ((2 | 2) == 2)\nand 10 * CAST(customer_id AS int) == 20\nand last_name != first_name\nand (CAST(customer_id AS int) BETWEEN 10 and 20)\nand (array(10, 20, 30)[2] == 30)\nand (map(1, 'Hello', 2, 'World')[1] == 'Hello')\nand (10 ^ 20 == 50)\nand (map('three', 3).four == NULL)\nand (named_struct('a', 5, 'b', 'Spark').a == 5)\nand (1 = 2 and 1 == 2)\nand (1 >= 2 and 1 <= 2 and 1 != 3 or 2 > 4 or 4 < 5)\nand (\n      EXISTS (\n        array(1, NULL, 3),\n        \n        x -> x % 2 == 0\n      )\n    )\nor ilike('Spark', '_PARK')\nor (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\nand (1 IS DISTINCT FROM 5)\nand ('invalid' IS false)\nand isnull(1)\nand ('t' IS NOT true)\nand (1 <=> '1')\nand (1 <> CAST(customer_id AS int))\nand (10 - 2 + 10 == 8)\nand (NOT true)\nand (false or true)\nand (2 % 0 == 0)\nand ('Spark' || 'SQL' == 'SparkSQL')\nand (r'%SystemDrive%\\Users\\John' LIKE r'%SystemDrive%\\\\Users%')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (2L / 2L == 10)\nand (~ 0 == -1)\nand (base64(aes_encrypt('Spark', 'abcdefghijklmnop')) == NULL)\nand (CAST(aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop') AS STRING) == NULL)\nand (ascii('234') == 234)\nand (base64('Spark SQL') == NULL)\nand (bin(13) == NULL)\nand (binary('Spark SQL') == NULL)\nand (btrim('abcaabaSparkSQLabcaaba', 'abc') != NULL)\nand (char(65) != NULL)\nand (char_length('Spark SQL ') == 10)\nand (character_length('Spark SQL ') == 10)\nand (concat(customer_id, 'hello') != NULL)\nand (concat_ws(',', 'Spark', array('S', 'Q', NULL, 'L'), NULL) != NULL)\nand contains('SparkSQL', 'Spork')\nand (crc32('Spark') > 0)\nand chr(65) != NULL\nand (3 ^ 5 == 6)\nand (hex(encode('Spark SQL', 'US-ASCII')) != NULL)\nand endswith('SparkSQL', 'SQL')\nand (find_in_set('ab', 'abc,b,ab,c,def') == 2)\nand (format_number(12332.123456, 4) == 2)\nand (format_number(12332.123456, '#.###') == 10)\nand (format_string('Hello World %d %s', 100, 'days') != NULL)\nand (hex('Spark SQL') != NULL)\nand (r'%SystemDrive%\\Users\\John' LIKE '%SystemDrive%\\\\\\\\Users%')\nand (initcap('sPark sql') != NULL)\nand (instr('SparkSQL', 'R') == 2)\nand (lcase('LowerCase') != NULL)\nand (LEFT('Spark SQL', 3) != NULL)\nand (length('Spark SQL ') > 20)\nand (levenshtein('kitten', 'sitting') > 10)\nand (locate('bar', 'abcbarbar') > 2)\nand (locate('bar', 'abcbarbar', 5) > 2)\nand (lower('LowerCase') != NULL)\nand (lpad('hi', 1, '??') != NULL)\nand (hex(lpad(x'1020', 5, x'05')) != NULL)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (md5('Spark') != NULL)\nand (octet_length('Spark SQL') != NULL)\nand (parse_url('http://spark.apache.org/path?query=1', 'HOST') != NULL)\nand (position('bar', 'abcbarbar') > 10)\nand (position('bar', 'abcbarbar', 5) > 5)\nand (printf('Hello World %d %s', 100, 'days') != NULL)\nand (r'%SystemDrive%\\Users\\John' RLIKE r'%SystemDrive%\\\\Users.*')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) > 10)\nand (regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1) != NULL)\nand (regexp_replace('100-200', '(\\\\d+)', 'num') != NULL)\nand (repeat('123', 2) != NULL)\nand (replace('ABCabc', 'abc', 'DEF') != NULL)\nand (reverse('Spark SQL') != NULL)\nand (RIGHT('Spark SQL', 3) != NULL)\nand (rpad('hi', 5, 'ab') != NULL)\nand (hex(rpad(x'1020', 5, x'05')) != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (sentences('Hi there! Good morning.', 'en', 'US') != NULL)\nand (sha('Spark') != NULL)\nand (sha1('Spark') != NULL)\nand (sha2('Spark', 256) != NULL)\nand (soundex('Miller') != NULL)\nand (concat('1', space(2), '1') != NULL)\nand (('->' || split_part('Hello,world,!', ',', 1) || '<-') != NULL)\nand (('->' || split_part('', ',', 1) || '<-') != NULL)\nand (('->' || split_part('Hello,World,!', ',', 0) || '<-') != NULL)\nand (startswith('SparkSQL', 'Spark'))\nand (startswith(NULL, 'Spark'))\nand (substr('Spark SQL', 5, 1) != NULL)\nand (substring_index('www.apache.org', '.', 2) != NULL)\nand (CAST(to_binary('537061726B') AS STRING) != NULL)\nand (CAST(to_binary('537061726B', 'hex') AS STRING) != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (translate('AaBbCc', 'abc', '123') != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (ucase('SparkSql') != NULL)\nand (CAST(unbase64('U3BhcmsgU1FM') AS STRING) != NULL)\nand (decode(unhex('537061726B2053514C'), 'UTF-8') != NULL)\nand (upper('SparkSql') != NULL)\nand (10 / 2 == 5)\nand ((3 | 5) == 2)\nand ((DATE'2021-03-20' - INTERVAL '2' MONTH) != NULL)\nand (10 - 2 + 2 == 4)\nand (2 % 1.8 == 2)\nand (3 ^ 5 == 3)\nand (3 & 5 == 2)\nand (3 * 2 == 2)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (abs(-1) == 1)\nand (acos(1) == 1)\nand (acosh(1) == 1)\nand (asin(0) == 1)\nand (asinh(0) == 1)\nand (atan(0) == 1)\nand (atan2(0, 0) == 1)\nand (atanh(0) == 1)\nand (bigint(current_timestamp) > 1)\nand (bit_count(-1) > 1)\nand (bit_get(23Y, 1) == 1)\nand (bround(13.5, -1) == 1)\nand (round(13.5, -1) == 1)\nand (cbrt(27.0) == 3)\nand (ceil(3345.1, -2) == 1)\nand (ceiling(5.4) == 6)\nand (ceiling(3345.1, -2) == 1)\nand (conv('100', 2, 10) == 4)\nand (conv('FFFFFFFFFFFFFFFF', 16, 10) == 1)\nand (cos(pi()) == -1)\nand (cosh(0) == 1)\nand (cot(1) == 1)\nand (csc(pi() / 2) == 2)\nand (decimal('5.2') == 5)\nand (degrees(3.141592653589793) == 10)\nand (double('5.2') == 4)\nand (e() == 2)\nand (exp(1) == 2)\nand (expm1(0) == 1)\nand (factorial(2) == 2)\nand (float('5.2') == 5)\nand (floor(-0.1) == -1)\nand (floor(3345.1, -2) == 20)\nand (getbit(23Y, 0) == 1)\nand (hypot(3, 4) == 5)\nand (int(-5.6) == 5)\nand (isnan(CAST('NaN' AS double)))\nand (ln(1) == 1)\nand (log(10, 100) == 2)\nand (log1p(0) == 1)\nand (log2(2) == 1)\nand (log10(10) == 1)\nand (nanvl(CAST('NaN' AS DOUBLE), 123) == 2)\nand (negative(1) == -1)\nand (pmod(-10, 3) == 2)\nand (positive(-1) == -1)\nand (pow(2, 3) * power(2, 3) == 8)\nand (radians(180) == 10)\nand (rand(0) * random(0) == 1)\nand (randn(0) == 1)\nand (rint(12.3456) == 1)\nand (round(2.5, 0) == 3)\nand (sec(pi()) == -1)\nand (sin(0) == 0)\nand (shiftleft(2, 1) == 2)\nand (shiftright(4, 1) == 2)\nand (shiftrightunsigned(4, 1) == 2)\nand (sign(40) == 1)\nand (signum(40) == 1)\nand (sinh(0) == 1)\nand (smallint(-5.6) == 5)\nand (sqrt(4) == 2)\nand (tan(0) == 1)\nand (tanh(0) == 1)\nand (tinyint('12') * tinyint(5.4) == 1)\nand (try_add(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_add(1, 2) == 3)\nand (try_divide(3, 2) == 3)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand (try_subtract(1, 2) == 2)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_subtract(-128Y, 1Y) != NULL)\nand (width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2) == 3)\nand (width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) == 10)\nand (array(10, 20, 30) != NULL)\nand (\n      (\n        aggregate(array(1, 2, 3), 0, \n        (acc, x) -> acc + x, \n        acc -> acc * 10)\n      ) == 1\n    )\nand (array_contains(array(1, 2, 3), 2))\nand (array_distinct(array(1, 2, 3, NULL, 3)) != NULL)\nand (array_except(array(1, 2, 2, 3), array(1, 1, 3, 5)) != NULL)\nand (array_intersect(array(1, 2, 3), array(1, 3, 3, 5)) != NULL)\nand (array_join(array('hello', 'world'), ',') != NULL)\nand (array_join(array('hello', NULL, 'world'), ',', '*') == NULL)\nand (array_max(array(1, 20, NULL, 3)) > 10)\nand (array_min(array(1, 20, NULL, 3)) == 1)\nand (array_position(array(3, 2, 1, 4, 1), 1) == 2)\nand (array_remove(array(1, 2, 3, NULL, 3, 2), 3) != NULL)\nand (array_repeat('123', 2) != NULL)\nand (array_size(array(1, NULL, 3, NULL)) == 2)\nand (array_sort(array('bc', 'ab', 'dc')) != NULL)\nand (array_union(array(1, 2, 2, 3), array(1, 3, 5)) != NULL)\nand (arrays_overlap(array(1, 2, NULL, 3), array(NULL, 4, 5)) == NULL)\nand (arrays_zip(array(1, 2), array('shoe', 'string', 'budget')) == NULL)\nand (cardinality(array('b', 'd', 'c', 'a')) == 2)\nand (concat(array(1, 2, 3), array(4, 5), array(6)) != NULL)\nand (element_at(map(1, 'a', 2, 'b'), 2) == NULL)\nand (\n      EXISTS (\n        array(1, 2, 3),\n        \n        x -> x % 2 == 0\n      )\n    )\nand (\n      EXISTS (\n        array(0, NULL, 2, 3, NULL),\n        \n        x -> x IS NULL\n      )\n    )\nand (\n      filter(array(1, 2, 3), \n      x -> x % 2 == 1) != NULL\n    )\nand (flatten(array(array(1, 2), array(3, 4))) != NULL)\nand (\n      forall(array(1, 2, 3), \n      x -> x % 2 == 0) == NULL\n    )\nand (reverse(array(2, 1, 4, 3)) != NULL)\nand (sequence(5, 1) != NULL)\nand (cardinality(array('b', 'd', 'c', 'a')) == 10)\nand (slice(array(1, 2, 3, 4), 2, 2) != NULL)\nand (sort_array(array('b', 'd', NULL, 'c', 'a'), true) != NULL)\nand (\n      transform(array(1, 2, 3), \n      x -> x + 1) != NULL\n    )\nand (try_element_at(array(1, 2, 3), 2) == 2)\nand (\n      zip_with(array('a', 'b', 'c'), array('d', 'e', 'f'), \n      (x, y) -> concat(x, y)) != NULL\n    )\nand (map(1, 'Hello', 2, 'World')[1] != NULL)\nand (cardinality(map('a', 1, 'b', 2)) == 2)\nand (element_at(map(1, 'a', 2, 'b'), 3) == NULL)\nand (map(1.0, '2', 3.0, '4') IS NOT NULL)\nand (map_concat(map(1, 'a', 2, 'b'), map(3, 'c')) IS NOT NULL)\nand (map_contains_key(map(1, 'a', 2, 'b'), 2))\nand (map_entries(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_filter(map(1, 0, 2, 2, 3, -1), \n      (k, v) -> k > v) IS NOT NULL\n    )\nand (map_from_arrays(array(1.0, 3.0), array('2', '4')) IS NOT NULL)\nand (map_from_entries(array(struct(1, 'a'), struct(2, 'b'))) IS NOT NULL)\nand (map_keys(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (map_values(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_zip_with(map(1, 'a', 2, 'b'), map(1, 'x', 2, 'y'), \n      (k, v1, v2) -> concat(v1, v2)) IS NOT NULL\n    )\nand (cardinality(map('a', 1, 'b', 2)) == 2)\nand (str_to_map('a:1,b:2,c:3', ',', ':') IS NOT NULL)\nand (\n      transform_keys(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n      (k, v) -> k + 1) IS NOT NULL\n    )\nand (\n      transform_values(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n      (k, v) -> k + v) IS NOT NULL\n    )\nand (try_element_at(map(1, 'a', 2, 'b'), 2) IS NOT NULL)\nand ((INTERVAL '3:15' HOUR TO MINUTE / 3) IS NOT NULL)\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand (typeof(current_timestamp - (current_date + INTERVAL '1' DAY)) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (add_months('2016-08-31', -6) != NULL)\nand (current_date() != NULL)\nand (current_timestamp() != NULL)\nand (current_timezone() != NULL)\nand (date('2021-03-21') != NULL)\nand (date_add('2016-07-30', 1) != NULL)\nand (date_format('2016-04-08', 'y') == 2016)\nand (date_from_unix_date(1) != NULL)\nand (date_sub('2016-07-30', 1) != NULL)\nand (date_trunc('YEAR', '2015-03-05T09:32:05.359') != NULL)\nand (datediff('2009-07-31', '2009-07-30') == 1)\nand (day('2009-07-30') == 30)\nand (dayofmonth('2009-07-30') == 30)\nand (dayofweek('2009-07-30') == 5)\nand (dayofyear('2016-04-09') == 100)\nand (EXTRACT(SECONDS FROM INTERVAL '5:00:30.001' HOUR TO SECOND) == 30)\nand (EXTRACT(WEEK FROM TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') != NULL)\nand (from_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (from_utc_timestamp('2016-08-31', 'Asia/Seoul') != NULL)\nand (hour('2009-07-30 12:58:59') == 10)\nand (last_day('2009-01-12') IS NOT NULL)\nand (make_date(2013, 7, 15) IS NOT NULL)\nand (make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)\nand (make_ym_interval(100, 5) IS NOT NULL)\nand (minute('2009-07-30 12:58:59') == 58)\nand (month('2016-07-30') == 7)\nand (months_between('1997-02-28 10:30:00', '1996-10-30') == 3)\nand (months_between('1997-02-28 10:30:00', '1996-10-30', false) == 2)\nand (next_day('2015-01-14', 'TU') != NULL)\nand (now() != NULL)\nand (quarter('2016-08-31') == 3)\nand (second('2009-07-30 12:58:59') == 59)\nand (timestamp(123) != NULL)\nand (timestamp('2020-04-30 12:25:13.45') != NULL)\nand (timestamp_micros(1230219000123123) != NULL)\nand (timestamp_millis(1230219000123) != NULL)\nand (timestamp_seconds(1230219000) != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (trunc('2015-10-27', 'YEAR') != NULL)\nand (trunc('2019-08-04', 'quarter') != NULL)\nand (try_add(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_add(DATE'2021-03-31', INTERVAL '1' MONTH) != NULL)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (try_subtract(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (unix_date(DATE('1970-01-02')) == 1)\nand (unix_micros(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_millis(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 1)\nand (weekday(DATE'2009-07-30') == 1)\nand (EXTRACT(DAYOFWEEK_ISO FROM DATE'2009-07-30') == 4)\nand (weekofyear('2008-02-20') == 8)\nand (year('2016-07-30') == 2016)\nand (array(1, 2, 3) != NULL)\nand (bigint('5') == 5)\nand (binary('Spark SQL') != NULL)\nand (boolean(1))\nand (CAST(5.6 AS DECIMAL (2, 0)) != NULL)\nand (CAST(INTERVAL '1-2' YEAR TO MONTH AS INTEGER) == 12)\nand (date('2021-03-21') != NULL)\nand (decimal('5.2') == 5)\nand (double('5.2') / 2 == 5)\nand (float('5.2') / 2 == 2)\nand (int('5') == 5)\nand (make_date(2013, 7, 15) != NULL)\nand (make_dt_interval(100, 13) != NULL)\nand (make_ym_interval(100, 5) == NULL)\nand (map(1.0, '2', 3.0, '4') IS NOT NULL)\nand (named_struct('a', 1, 'b', 2, 'c', 3) IS NOT NULL)\nand (smallint('5') == 5)\nand (struct(1, 2, 3) IS NOT NULL)\nand (tinyint('12') == 12)\nand (timestamp('2020-04-30 12:25:13.45') != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31 00:12:00') != NULL)\nand (from_csv('1, 0.8', 'a INT, b DOUBLE') != NULL)\nand (schema_of_csv('1,abc') != NULL)\nand (json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') == 5)\nand (json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') != NULL)\nand (schema_of_json('[{\"col\":01}]', map('allowNumericLeadingZeros', 'true')) != NULL)\nand (to_json(named_struct('a', 1, 'b', 2)) != NULL)\nand (to_json(map(named_struct('a', 1), named_struct('b', 2))) != NULL)\nand (to_json(array((map('a', 1)))) != NULL)\nand (xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()') != NULL)\nand (xpath_boolean('<a><b>1</b></a>', 'a/b'))\nand (xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 3)\nand (xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c') != NULL)\nand (\n      assert_true(\n        0 < 1) == NULL\n    )\nand (\n      (\n        CASE\n          WHEN 1 > 0\n            THEN 1\n          WHEN 2 > 0\n            THEN 2.0\n          ELSE 1.2\n        END\n      ) == 1\n    )\nand (\n      (\n        CASE 3\n          WHEN 1\n            THEN 'A'\n          WHEN 2\n            THEN 'B'\n          WHEN 3\n            THEN 'C'\n        END\n      ) != NULL\n    )\nand (coalesce(2, 5 / 0) == 2)\nand (current_catalog() != NULL)\nand (current_database() != NULL)\nand (current_user() != NULL)\nand (decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks') != NULL)\nand (elt(1, 'scala', 'java') != NULL)\nand (greatest(10, 9, 2, 4, 3) == 10)\nand (hash('Spark', array(123), 2) != NULL)\nand (\n      if(\n        1 < 2, \n        'a', \n        'b') != NULL\n    )\nand (ifnull(NULL, array('2')) != NULL)\nand (input_file_block_length() == -1)\nand (input_file_block_start() == -1)\nand (isnull(1))\nand (isnotnull(1))\nand (least(10, 9, 2, 4, 3) == 2)\nand (monotonically_increasing_id() > 10)\nand (nullif(2, 2) == NULL)\nand (nvl(NULL, 2) == 2)\nand (nvl2(NULL, 2, 1) == 1)\nand (typeof(1) != NULL)\nand (uuid() != NULL)\nand (xxhash64('Spark', array(123), 2) != NULL)\nand ('20'::INTEGER == 20)\nand like('Spark', '_park')\nand ('Spark' LIKE SOME('_park', '_ock'))\nand (bitmap_count(x'00') == 10)\nand (charindex('bar', 'abcbarbar') == 1)\nand (decode(x'FEFF0053007000610072006B002000530051004C', 'UTF-16') != NULL)\nand (like('Spark', '_park'))\nand (len('Spark SQL ') > 10)\nand (levenshtein('kitten', 'sitting', 4) > 10)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', 'Z', 'z', '9', 'X') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', lowerChar => 'z', upperChar => 'X') != NULL)\nand (mask('AaBb123-&ASDXYZ921312asd', NULL, NULL, NULL, NULL) != NULL)\nand (overlay('Spark SQL' PLACING '_' FROM 6) != NULL)\nand (overlay('Spark SQL' PLACING 'tructured' FROM 2 FOR 4) != NULL)\nand (overlay(encode('Spark SQL', 'utf-8') PLACING encode('_', 'utf-8') FROM 6) != NULL)\nand (position('bar' IN 'abcbarbar') > 2)\nand (regexp_count('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en') > 2)\nand (regexp_instr('Mary had a little lamb', NULL) != NULL)\nand (regexp_substr(NULL, 'Ste(v|ph)en') != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (string(4) != NULL)\nand (substr('Spark SQL', -3) != NULL)\nand (substr('Spark SQL' FROM 5 FOR 1) != NULL)\nand (substr('Spark SQL' FROM -3) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_char(DATE'2016-04-08', 'y') != NULL)\nand (to_char(encode('abc', 'utf-8'), 'utf-8') != NULL)\nand (to_varchar(454, '999') != NULL)\nand (to_varchar(DATE'2016-04-08', 'y') != NULL)\nand (to_varchar(x'537061726b2053514c', 'hex') != NULL)\nand (TRIM( 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(BOTH 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(LEADING 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(TRAILING 'SL' FROM 'SSparkSQLS') != NULL)\nand (\n      CAST(try_aes_decrypt(\n        unbase64('MTIzNDU2Nzg5MDEyMdXvR41sJqwZ6hnTU8FRTTtXbL8yeChIZA=='), \n        '1234567890abcdef', \n        'GCM', \n        'DEFAULT', \n        'Some AAD') AS STRING) != NULL\n    )\nand (url_decode('http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1') != NULL)\nand (url_encode('http://spark.apache.org/path?query=1') != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' + INTERVAL '3' SECOND) != NULL)\nand (bit_reverse(-1) == -1)\nand (bitmap_bit_position(-32768) == 1)\nand (bitmap_bucket_number(-32768) == 1)\nand (MOD(2, 1.8) == 2)\nand (array_append(array(1, 2, 3), 0) == NULL)\nand (array_compact(array(1, 2, NULL, 3, NULL, 3)) == NULL)\nand (array_insert(array('a', 'b', 'c'), 1, 'z') != NULL)\nand (array_prepend(array(1, 2, 3), 0) != NULL)\nand (get(array(1, 2, 3), 2) != NULL)\nand (\n      reduce(array(1, 2, 3), 0, \n      (acc, x) -> acc + x) == 2\n    )\nand (shuffle(array(1, 20, 3, 5)) != NULL)\nand (map_contains_key(map(1, 'a', 2, 'b'), 2))\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand (date_diff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (date_part('SECONDS', TIMESTAMP'2019-10-01 00:00:01.000001') == 1)\nand (date_part('Week', TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (dateadd('2016-07-30', 1) != NULL)\nand (dateadd(MICROSECOND, 5, TIMESTAMP'2022-02-28 00:00:00') != NULL)\nand (datediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 11:59:59') == 0)\nand (make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887, 'CET') IS NOT NULL)\nand (make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)\nand (now() != NULL)\nand (timediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (timestampdiff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (to_unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 100)\nand (try_to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand ('20'::INTEGER == 20)\nand (make_interval(100, 11) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)\nand (string(5) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_varchar(454, '999') IS NOT NULL)\nand (from_json('{\"a\":1, \"b\":0.8}', 'a INT, b DOUBLE') IS NOT NULL)\nand (get_json_object('{\"a\":\"b\"}', '$.a') IS NOT NULL)\nand (to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), map('timestampFormat', 'dd/MM/yyyy')) IS NOT NULL)\nand (to_csv(named_struct('a', 1, 'b', 2)) IS NOT NULL)\nand (from_xml('<p><time>26/08/2015</time></p>', 'time Timestamp', map('timestampFormat', 'dd/MM/yyyy')) != NULL)\nand (schema_of_xml('<p><a attr=\"2\">1</a><a>3</a></p>', map('excludeAttribute', 'true')) IS NOT NULL)\nand (current_metastore() != NULL)\nand (current_schema() != NULL)\nand (current_version() != NULL)\nand (equal_null(2, 2))\nand (\n      iff(\n        1 < 2, \n        'a', \n        'b') == 'a'\n    )\nand (is_account_group_member('admins'))\nand (is_member('admins'))\nand (luhn_check('12345') == NULL)\nand (user() != NULL)\nand (h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0) != NULL)\nand (h3_coverash3string('{\"type\":\"LineString\",\"coordinates\":[[-122.4194,37.7749],[-118.2437,34.0522],[-74.0060,40.7128]]}', 1) != NULL)\nand (h3_longlatash3(-122.4783, 37.8199, 13) > 0)\nand (h3_longlatash3string(-122.4783, 37.8199, 13) != NULL)\nand (h3_pointash3('POINT(-122.4783 37.8199)', 13) > 0)\nand (h3_pointash3string('{\"type\":\"Point\",\"coordinates\":[]}', 15) == NULL)\nand (h3_pointash3string('POINT(-122.4783 37.8199)', 13) != NULL)\nand (\n      h3_polyfillash3(\n        unhex(\n          '0103000000010000000400000050fc1873d79a5ec0d0d556ec2fe342404182e2c7988f5dc0f46c567dae064140aaf1d24d628052c05e4bc8073d5b444050fc1873d79a5ec0d0d556ec2fe34240'), \n        2) != NULL\n    )\nand (h3_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3('Not-a-valid-rep', 2) == NULL)\nand (h3_try_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_boundaryasgeojson('8009fffffffffff') != NULL)\nand (h3_boundaryasgeojson(599686042433355775) != NULL)\nand (hex(h3_boundaryaswkb(599686042433355775)) != NULL)\nand (h3_boundaryaswkt(599686042433355775) != NULL)\nand (h3_centerasgeojson(599686042433355775) != NULL)\nand (hex(h3_centeraswkb('8009fffffffffff')) == NULL)\nand (h3_centeraswkt('8009fffffffffff') != NULL)\nand (h3_h3tostring(599686042433355775) != NULL)\nand (h3_stringtoh3('85283473fffffff') == NULL)\nand (h3_ischildof('88283471b9fffff', '85283473fffffff'))\nand (h3_ispentagon(590112357393367039))\nand (h3_isvalid('85283473fffffff'))\nand (h3_try_validate(590112357393367039) != NULL)\nand (h3_validate(590112357393367039) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_hexring(599686042433355775, 1) != NULL)\nand (h3_kring(599686042433355775, 1) != NULL)\nand (h3_kringdistances(599686042433355775, 1) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_maxchild(599686042433355775, 10) != NULL)\nand (h3_minchild(599686042433355775, 10) != NULL)\nand (h3_resolution(599686042433355775) == 5)\nand (h3_tochildren(599686042433355775, 6) != NULL)\nand (h3_toparent(599686042433355775, 0) != NULL)\nand (\n      h3_compact(\n        ARRAY(\n          599686042433355775, \n          599686030622195711, \n          599686044580839423, \n          599686038138388479, \n          599686043507097599, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686040285872127, \n          599686041359613951, \n          599686039212130303, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647)) != NULL\n    )\nand (\n      h3_uncompact(\n        ARRAY(\n          599686030622195711, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647, \n          595182446027210751), \n        5) != NULL\n    )"
          },
          "alias" : "c_expressions"
        }, {
          "alias" : "c1",
          "expression" : {
            "expression" : "conv('100', 2, 10)"
          }
        }, {
          "alias" : "c2",
          "expression" : {
            "expression" : "conv('FFFFFFFFFFFFFFFF', 16, 10)"
          }
        }, {
          "alias" : "c3",
          "expression" : {
            "expression" : "try_add(DATE'2021-03-20', INTERVAL '2' MONTH)"
          }
        }, {
          "alias" : "c4",
          "expression" : {
            "expression" : "width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11)"
          }
        }, {
          "alias" : "c5",
          "expression" : {
            "expression" : "array_except(array(1, 2, 2, 3), array(1, 1, 3, 5))"
          }
        }, {
          "alias" : "c6",
          "expression" : {
            "expression" : "cardinality(array('b', 'd', 'c', 'a'))"
          }
        }, {
          "alias" : "c7",
          "expression" : {
            "expression" : "EXISTS (\n        array(0, NULL, 2, 3, NULL),\n        \n        x -> x IS NULL\n      )"
          }
        }, {
          "alias" : "c8",
          "expression" : {
            "expression" : "slice(array(1, 2, 3, 4), 2, 2)"
          }
        }, {
          "alias" : "c9",
          "expression" : {
            "expression" : "add_months('2016-08-31', -6)"
          }
        }, {
          "alias" : "c10",
          "expression" : {
            "expression" : "timestamp_millis(1230219000123)"
          }
        }, {
          "alias" : "c11",
          "expression" : {
            "expression" : "json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}')"
          }
        }, {
          "alias" : "c12",
          "expression" : {
            "expression" : "xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)')"
          }
        }, {
          "alias" : "c13",
          "expression" : {
            "expression" : "'20'::INTEGER"
          }
        }, {
          "alias" : "c14",
          "expression" : {
            "expression" : "TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND"
          }
        }, {
          "alias" : "c15",
          "expression" : {
            "expression" : "to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), map('timestampFormat', 'dd/MM/yyyy'))"
          }
        }, {
          "alias" : "c16",
          "expression" : {
            "expression" : "h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0)"
          }
        }, {
          "alias" : "c17",
          "expression" : {
            "expression" : "1 IS DISTINCT FROM 5"
          }
        }, {
          "alias" : "c18",
          "expression" : {
            "expression" : "'Spark' || 'SQL'"
          }
        }, {
          "alias" : "c19",
          "expression" : {
            "expression" : "base64(aes_encrypt('Spark', 'abcdefghijklmnop'))"
          }
        }, {
          "alias" : "c20",
          "expression" : {
            "expression" : "char_length('Spark SQL ')"
          }
        }, {
          "alias" : "c21",
          "expression" : {
            "expression" : "endswith('SparkSQL', 'SQL')"
          }
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "cyTf5kLDS4vhncf05X7pO$$qbLcjFBNCDGZzWXcaACud",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "s3NZqNvHNSdwwkLQnZY62$$phLB5PqAJuF4Su_D51jKq",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_expressions",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c2",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c3",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "c4",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c5",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Integer"
                }
              }
            }, {
              "name" : "c6",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c7",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c8",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Integer"
                }
              }
            }, {
              "name" : "c9",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "c10",
              "dataType" : {
                "type" : "Timestamp"
              }
            }, {
              "name" : "c11",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c12",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c13",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c14",
              "dataType" : {
                "type" : "Timestamp"
              }
            }, {
              "name" : "c15",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c16",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Bigint"
                }
              }
            }, {
              "name" : "c17",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c18",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c19",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c20",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c21",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SetOperation_1##Z9favNvy" : {
      "id" : "SetOperation_1##Z9favNvy",
      "component" : "SetOperation",
      "metadata" : {
        "label" : "SetOperation_1",
        "x" : 1700,
        "y" : 4140,
        "phase" : 0
      },
      "properties" : {
        "operationType" : "intersect",
        "preserveDuplicates" : false,
        "useMinus" : false,
        "inputAliases" : [ "in0", "in1" ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "H5Qg6FUQ",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        }, {
          "id" : "pmEwr5WG",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in1"
        } ],
        "outputs" : [ {
          "id" : "k0XRbkWx",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "combine_multiple_tables_1##CFzGW1Jp" : {
      "id" : "combine_multiple_tables_1##CFzGW1Jp",
      "component" : "Macro",
      "metadata" : {
        "label" : "combine_multiple_tables_1",
        "x" : 2480,
        "y" : 1740,
        "phase" : 0,
        "macroDependencies" : [ "SQL_DatabricksSharedBasic.combine_multiple_tables" ]
      },
      "properties" : {
        "macroName" : "combine_multiple_tables",
        "parameters" : [ {
          "name" : "table_1",
          "value" : "'Limit_2'"
        }, {
          "name" : "table_2",
          "value" : "'Limit_5'"
        }, {
          "name" : "table_3",
          "value" : "'Limit_4'"
        }, {
          "name" : "table_4",
          "value" : "'Limit_3'"
        }, {
          "name" : "table_5",
          "value" : "'SetOperation_3'"
        }, {
          "name" : "col_table_1",
          "value" : "'c_int'"
        } ],
        "projectName" : "SQL_DatabricksSharedBasic"
      },
      "ports" : {
        "inputs" : [ {
          "id" : "yp0ScvjS",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "Limit_2"
        }, {
          "id" : "S5DCCTgJ",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_bool_expr",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_concat_expr",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_add_expr",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_macro",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_if",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_0",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_2",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_3",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_4",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_databricks_project_main",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_base_project",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_dbt_utils_functions",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "Limit_5"
        }, {
          "id" : "PEm9ff6s",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "id",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "Limit_4"
        }, {
          "id" : "Ra04YYAT",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "c_struct_city",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_struct_state",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_struct_pin",
              "dataType" : {
                "type" : "Bigint"
              }
            } ]
          },
          "slug" : "Limit_3"
        }, {
          "id" : "fhjpTjgP",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "SetOperation_3"
        } ],
        "outputs" : [ {
          "id" : "bHDan6Ra",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "time_dim##ppttbbpc" : {
      "id" : "time_dim##ppttbbpc",
      "component" : "Source",
      "metadata" : {
        "label" : "time_dim",
        "x" : 680,
        "y" : 3460,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "time_dim",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_suggestion_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "GuNcQUZc",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "T_TIME_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_TIME_ID",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "T_TIME",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_HOUR",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_MINUTE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_SECOND",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "T_AM_PM",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "T_SHIFT",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "T_SUB_SHIFT",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "T_MEAL_TIME",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "mKXp8sjz3TYCty39kh8nh$$uZ9Tj7Vws_Yt_vlCWtNZU" : {
      "id" : "mKXp8sjz3TYCty39kh8nh$$uZ9Tj7Vws_Yt_vlCWtNZU",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Reformat_1_2",
        "slug" : "Reformat_1_2",
        "x" : 220,
        "y" : 960,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ "TR6b19GN##c_int", "TR6b19GN##c_string" ],
        "expressions" : [ {
          "expression" : {
            "expression" : "CAST(c_int AS string)"
          },
          "alias" : "customer_id"
        }, {
          "expression" : {
            "expression" : "c_string"
          },
          "alias" : "first_name"
        }, {
          "expression" : {
            "expression" : "c_string"
          },
          "alias" : "last_name"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "dt7b0-pRZgs6uOY76MLYO$$OdIDrshh7GQ1w-tE0RXjZ",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "7N5n8cnP89-QCAGViGPAU$$52RFdrBSXiSPABkCpRHWb",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "income_band##QZ88c0ni" : {
      "id" : "income_band##QZ88c0ni",
      "component" : "Source",
      "metadata" : {
        "label" : "income_band",
        "x" : 420,
        "y" : 3060,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "income_band",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_suggestion_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "tEPkns1l",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "IB_INCOME_BAND_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "IB_LOWER_BOUND",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "IB_UPPER_BOUND",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "5bK-0P_bbnAej8hjWsHNr$$oLWV4A3UEpaN3juZ_nAwj" : {
      "id" : "5bK-0P_bbnAej8hjWsHNr$$oLWV4A3UEpaN3juZ_nAwj",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_3_1",
        "slug" : "SQLStatement_3_1",
        "x" : 1020,
        "y" : 1300,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "select DISTINCT customer_id, first_name, c1,c2,c3,c4,c5,c6,c7,c8,c10,c15 from AllExReformat where customer_id not like '%1%'"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "-y1d_vfHpZY0B5mlgpC5p$$IPa-e6nR0qc2ch0G_22at",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_expressions",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c2",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c3",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "c4",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c5",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Integer"
                }
              }
            }, {
              "name" : "c6",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c7",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c8",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Integer"
                }
              }
            }, {
              "name" : "c9",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "c10",
              "dataType" : {
                "type" : "Timestamp"
              }
            }, {
              "name" : "c11",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c12",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c13",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c14",
              "dataType" : {
                "type" : "Timestamp"
              }
            }, {
              "name" : "c15",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c16",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Bigint"
                }
              }
            }, {
              "name" : "c17",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c18",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c19",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c20",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c21",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "AllExReformat"
        }, {
          "id" : "RAfm-Njhe_6x62YwoZ3i9$$AFZ6y-KLEwQGLbEzqmUM9",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "OrderBy_1_1"
        }, {
          "id" : "X_RyXA5MVF85TwN8jw1Xw$$zGH5R4X1oi4OiWb8b1a1z",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "Filter_1_1"
        }, {
          "id" : "pKNZqmrIMc9FJ5HQaTxpr$$Wq0lDtYPsMMJitZ0E2StZ",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c2",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "Join_2"
        }, {
          "id" : "bboXLz5yOuPoWkaqQCkuz$$fyba9HA-pP7jA6wVSUepX",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "SQLStatement_1_3"
        } ],
        "outputs" : [ {
          "id" : "YIbh8vWs-f3WyS6nzHgpK$$7qPiN7dg_ehqpjYtyqnJQ",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c2",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c3",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "c4",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c5",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Integer"
                }
              }
            }, {
              "name" : "c6",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c7",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c8",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Integer"
                }
              }
            }, {
              "name" : "c10",
              "dataType" : {
                "type" : "Timestamp"
              }
            }, {
              "name" : "c15",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "nxXdAzcE9uWwuUhiXyvKf$$q5Gfa-2JHT3OWys4HlwY8" : {
      "id" : "nxXdAzcE9uWwuUhiXyvKf$$q5Gfa-2JHT3OWys4HlwY8",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_1_1_1_1",
        "slug" : "SQLStatement_1_1_1_1",
        "x" : 80,
        "y" : -240,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "select distinct c_tinyint from SQLStatement_1_1_1"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "vBUWTvZkTw2UK3Lvnw0-l$$Eu95OTxt888IkMbQeJj_P",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "SQLStatement_1_1_1"
        } ],
        "outputs" : [ {
          "id" : "prpTjLun0gluHDDBQNETe$$4n_9yXOMYsQDaMaz5GVwN",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "kFRxtasDg77vJkIjTedAK$$E_H3Z5FG_JGBOgCQ_jhz_" : {
      "id" : "kFRxtasDg77vJkIjTedAK$$E_H3Z5FG_JGBOgCQ_jhz_",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_2_2",
        "slug" : "SQLStatement_2_2",
        "x" : 280,
        "y" : -100,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT *  \nFROM SQLStatement_1_1_1 AS in1\nWHERE {% if  var('DATASET_ID', '') %}\n    c_string = '{{ var(\"DATASET_ID\", \"\")}}'\n{% else %}\n    true\n{% endif %}"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "B7O38zNuxIGns5xwsk8c9$$CK3fjudXCOMWZBCHtx5T4",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            } ]
          },
          "slug" : "SQLStatement_1_1_1_1"
        }, {
          "id" : "eaRb4eOQNqJ9XcvBX_Nj4$$UJcDSvrcJ8aoqL3q2vqoG",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "SQLStatement_1_1_1"
        }, {
          "id" : "kK5GOTikplkSayyo9ZG6z$$_UrZt8z3wAnNAH15y34B_",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "SQLStatement_6"
        } ],
        "outputs" : [ {
          "id" : "OdJVe7j5fyZdozqyCEj1Q$$zcAnEwSLxGVti0YuQ3PQ9",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatement_3##fkV3oU0W" : {
      "id" : "SQLStatement_3##fkV3oU0W",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_3",
        "x" : 1040,
        "y" : 2760,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT *\n\nFROM (\n  SELECT count(*) AS h8_30_to_9\n  \n  FROM spark_catalog.qa_database.store_sales, spark_catalog.qa_database.household_demographics, spark_catalog.qa_database.time_dim, spark_catalog.qa_database.store\n  \n  WHERE ss_sold_time_sk = time_dim.t_time_sk\n        and ss_hdemo_sk = household_demographics.hd_demo_sk\n        and ss_store_sk = s_store_sk\n        and time_dim.t_hour = 8\n        and time_dim.t_minute >= 30\n        and (\n              (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count <= 0 + 2)\n              or (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count <= 1 + 2)\n              or (household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count <= -1 + 2)\n            )\n        and store.s_store_name = 'ese'\n) AS s1, (\n  SELECT count(*) AS h9_to_9_30\n  \n  FROM spark_catalog.qa_database.store_sales, spark_catalog.qa_database.household_demographics, spark_catalog.qa_database.time_dim, spark_catalog.qa_database.store\n  \n  WHERE ss_sold_time_sk = time_dim.t_time_sk\n        and ss_hdemo_sk = household_demographics.hd_demo_sk\n        and ss_store_sk = s_store_sk\n        and time_dim.t_hour = 9\n        and time_dim.t_minute < 30\n        and (\n              (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count <= 0 + 2)\n              or (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count <= 1 + 2)\n              or (household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count <= -1 + 2)\n            )\n        and store.s_store_name = 'ese'\n) AS s2, (\n  SELECT count(*) AS h9_30_to_10\n  \n  FROM spark_catalog.qa_database.store_sales, spark_catalog.qa_database.household_demographics, spark_catalog.qa_database.time_dim, spark_catalog.qa_database.store\n  \n  WHERE ss_sold_time_sk = time_dim.t_time_sk\n        and ss_hdemo_sk = household_demographics.hd_demo_sk\n        and ss_store_sk = s_store_sk\n        and time_dim.t_hour = 9\n        and time_dim.t_minute >= 30\n        and (\n              (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count <= 0 + 2)\n              or (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count <= 1 + 2)\n              or (household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count <= -1 + 2)\n            )\n        and store.s_store_name = 'ese'\n) AS s3, (\n  SELECT count(*) AS h10_to_10_30\n  \n  FROM store_sales, spark_catalog.qa_database.household_demographics, spark_catalog.qa_database.time_dim, spark_catalog.qa_database.store\n  \n  WHERE ss_sold_time_sk = time_dim.t_time_sk\n        and ss_hdemo_sk = household_demographics.hd_demo_sk\n        and ss_store_sk = s_store_sk\n        and time_dim.t_hour = 10\n        and time_dim.t_minute < 30\n        and (\n              (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count <= 0 + 2)\n              or (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count <= 1 + 2)\n              or (household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count <= -1 + 2)\n            )\n        and store.s_store_name = 'ese'\n) AS s4, (\n  SELECT count(*) AS h10_30_to_11\n  \n  FROM spark_catalog.qa_database.store_sales, spark_catalog.qa_database.household_demographics, spark_catalog.qa_database.time_dim, spark_catalog.qa_database.store\n  \n  WHERE ss_sold_time_sk = time_dim.t_time_sk\n        and ss_hdemo_sk = household_demographics.hd_demo_sk\n        and ss_store_sk = s_store_sk\n        and time_dim.t_hour = 10\n        and time_dim.t_minute >= 30\n        and (\n              (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count <= 0 + 2)\n              or (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count <= 1 + 2)\n              or (household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count <= -1 + 2)\n            )\n        and store.s_store_name = 'ese'\n) AS s5, (\n  SELECT count(*) AS h11_to_11_30\n  \n  FROM spark_catalog.qa_database.store_sales, spark_catalog.qa_database.household_demographics, spark_catalog.qa_database.time_dim, spark_catalog.qa_database.store\n  \n  WHERE ss_sold_time_sk = time_dim.t_time_sk\n        and ss_hdemo_sk = household_demographics.hd_demo_sk\n        and ss_store_sk = s_store_sk\n        and time_dim.t_hour = 11\n        and time_dim.t_minute < 30\n        and (\n              (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count <= 0 + 2)\n              or (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count <= 1 + 2)\n              or (household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count <= -1 + 2)\n            )\n        and store.s_store_name = 'ese'\n) AS s6, (\n  SELECT count(*) AS h11_30_to_12\n  \n  FROM hive_metastore.qa_database.store_sales, hive_metastore.qa_database.household_demographics, hive_metastore.qa_database.time_dim, hive_metastore.qa_database.store\n  \n  WHERE ss_sold_time_sk = time_dim.t_time_sk\n        and ss_hdemo_sk = household_demographics.hd_demo_sk\n        and ss_store_sk = s_store_sk\n        and time_dim.t_hour = 11\n        and time_dim.t_minute >= 30\n        and (\n              (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count <= 0 + 2)\n              or (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count <= 1 + 2)\n              or (household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count <= -1 + 2)\n            )\n        and store.s_store_name = 'ese'\n) AS s7, (\n  SELECT count(*) AS h12_to_12_30\n  \n  FROM hive_metastore.qa_database.store_sales, hive_metastore.qa_database.household_demographics, hive_metastore.qa_database.time_dim, hive_metastore.qa_database.store\n  \n  WHERE ss_sold_time_sk = time_dim.t_time_sk\n        and ss_hdemo_sk = household_demographics.hd_demo_sk\n        and ss_store_sk = s_store_sk\n        and time_dim.t_hour = 12\n        and time_dim.t_minute < 30\n        and (\n              (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count <= 0 + 2)\n              or (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count <= 1 + 2)\n              or (household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count <= -1 + 2)\n            )\n        and store.s_store_name = 'ese'\n) AS s8\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "MEcq8jFh",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "SS_SOLD_DATE_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_SOLD_TIME_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_ITEM_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_CUSTOMER_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_CDEMO_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_HDEMO_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_ADDR_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_STORE_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_PROMO_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_TICKET_NUMBER",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_QUANTITY",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_WHOLESALE_COST",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_LIST_PRICE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_SALES_PRICE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_EXT_DISCOUNT_AMT",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_EXT_SALES_PRICE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_EXT_WHOLESALE_COST",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_EXT_LIST_PRICE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_EXT_TAX",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_COUPON_AMT",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_NET_PAID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_NET_PAID_INC_TAX",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_NET_PROFIT",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "store_sales"
        } ],
        "outputs" : [ {
          "id" : "wpqGKFNl",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "h8_30_to_9",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "h9_to_9_30",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "h9_30_to_10",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "h10_to_10_30",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "h10_30_to_11",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "h11_to_11_30",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "h11_30_to_12",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "h12_to_12_30",
              "dataType" : {
                "type" : "Bigint"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "9Mp_c6bRdpPSJ8bOzxiac$$7x4oLn_ETLgAz98wpz0p0" : {
      "id" : "9Mp_c6bRdpPSJ8bOzxiac$$7x4oLn_ETLgAz98wpz0p0",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Reformat_3_1",
        "slug" : "Reformat_3_1",
        "x" : 420,
        "y" : 600,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ "YvBAnk9cfC3mW56FrAvqj$$levU_S5l9WRA1CE7QDcWi##customer_id" ],
        "expressions" : [ {
          "expression" : {
            "expression" : "CAST(customer_id AS int) > 5"
          },
          "alias" : "c1"
        }, {
          "expression" : {
            "expression" : "CAST(customer_id AS int) != 0"
          },
          "alias" : "c2"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "YvBAnk9cfC3mW56FrAvqj$$levU_S5l9WRA1CE7QDcWi",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "8J24N72fNjVtljwfnemis$$jtscL17RoeP1jim_PQaTu",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c2",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "OrderBy_1##Nov0PI7m" : {
      "id" : "OrderBy_1##Nov0PI7m",
      "component" : "OrderBy",
      "metadata" : {
        "label" : "OrderBy_1",
        "x" : 1980,
        "y" : 1760,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ ],
        "orders" : [ {
          "expression" : {
            "expression" : "first_name"
          },
          "sortType" : "asc",
          "nullsType" : "nulls first"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "Hvj7Ktw5",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "id",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "pLbI7JNq",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "id",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "l-JaVggNmg8hDHWAHBk6l$$rtBfhlbxrxS59PBelfC-T" : {
      "id" : "l-JaVggNmg8hDHWAHBk6l$$rtBfhlbxrxS59PBelfC-T",
      "component" : "OrderBy",
      "metadata" : {
        "label" : "OrderBy_1_1",
        "slug" : "OrderBy_1_1",
        "x" : 420,
        "y" : 1000,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ "yjJzOtIaMYrFghSTjYOLy$$c8X4JxfsiJGyYmDZTa1Qg##customer_id" ],
        "orders" : [ {
          "expression" : {
            "expression" : "customer_id"
          },
          "sortType" : "desc",
          "nullsType" : "nulls last"
        }, {
          "expression" : {
            "expression" : "CAST(customer_id AS int) > 5"
          },
          "sortType" : "asc",
          "nullsType" : "nulls first"
        }, {
          "expression" : {
            "expression" : "CAST(customer_id AS int) != 0"
          },
          "sortType" : "asc",
          "nullsType" : "nulls first"
        }, {
          "expression" : {
            "expression" : "floor(-0.1)"
          },
          "sortType" : "desc",
          "nullsType" : "nulls last"
        }, {
          "expression" : {
            "expression" : "pow(2, 3)"
          },
          "sortType" : "asc",
          "nullsType" : "nulls last"
        }, {
          "expression" : {
            "expression" : "try_add(DATE'2021-03-20', INTERVAL '2' MONTH)"
          },
          "sortType" : "desc",
          "nullsType" : "nulls last"
        }, {
          "expression" : {
            "expression" : "CAST(customer_id AS int) > 5\nand CAST(customer_id AS int) != 0\nor first_name LIKE '%A%'\nor ((1 & 1) == 1)\nor ((2 | 2) == 2)\nand 10 * CAST(customer_id AS int) == 20\nand last_name != first_name\nand (CAST(customer_id AS int) BETWEEN 10 and 20)\nand (array(10, 20, 30)[2] == 30)\nand (map(1, 'Hello', 2, 'World')[1] == 'Hello')\nand (10 ^ 20 == 50)\nand (map('three', 3).four == NULL)\nand (named_struct('a', 5, 'b', 'Spark').a == 5)\nand (1 = 2 and 1 == 2)\nand (1 >= 2 and 1 <= 2 and 1 != 3 or 2 > 4 or 4 < 5)\nand (\n      EXISTS (\n        array(1, NULL, 3),\n        \n        x -> x % 2 == 0\n      )\n    )\nor ilike('Spark', '_PARK')\nor (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\nand (1 IS DISTINCT FROM 5)\nand ('invalid' IS false)\nand isnull(1)\nand ('t' IS NOT true)\nand (1 <=> '1')\nand (1 <> CAST(customer_id AS int))\nand (10 - 2 + 10 == 8)\nand (NOT true)\nand (false or true)\nand (2 % 0 == 0)\nand ('Spark' || 'SQL' == 'SparkSQL')\nand (r'%SystemDrive%\\Users\\John' LIKE r'%SystemDrive%\\\\Users%')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (2L / 2L == 10)\nand (~ 0 == -1)\nand (base64(aes_encrypt('Spark', 'abcdefghijklmnop')) == NULL)\nand (CAST(aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop') AS STRING) == NULL)\nand (ascii('234') == 234)\nand (base64('Spark SQL') == NULL)\nand (bin(13) == NULL)\nand (binary('Spark SQL') == NULL)\nand (btrim('abcaabaSparkSQLabcaaba', 'abc') != NULL)\nand (char(65) != NULL)\nand (char_length('Spark SQL ') == 10)\nand (character_length('Spark SQL ') == 10)\nand (concat(customer_id, 'hello') != NULL)\nand (concat_ws(',', 'Spark', array('S', 'Q', NULL, 'L'), NULL) != NULL)\nand contains('SparkSQL', 'Spork')\nand (crc32('Spark') > 0)\nand chr(65) != NULL\nand (3 ^ 5 == 6)\nand (hex(encode('Spark SQL', 'US-ASCII')) != NULL)\nand endswith('SparkSQL', 'SQL')\nand (find_in_set('ab', 'abc,b,ab,c,def') == 2)\nand (format_number(12332.123456, 4) == 2)\nand (format_number(12332.123456, '#.###') == 10)\nand (format_string('Hello World %d %s', 100, 'days') != NULL)\nand (hex('Spark SQL') != NULL)\nand (r'%SystemDrive%\\Users\\John' LIKE '%SystemDrive%\\\\\\\\Users%')\nand (initcap('sPark sql') != NULL)\nand (instr('SparkSQL', 'R') == 2)\nand (lcase('LowerCase') != NULL)\nand (LEFT('Spark SQL', 3) != NULL)\nand (length('Spark SQL ') > 20)\nand (levenshtein('kitten', 'sitting') > 10)\nand (locate('bar', 'abcbarbar') > 2)\nand (locate('bar', 'abcbarbar', 5) > 2)\nand (lower('LowerCase') != NULL)\nand (lpad('hi', 1, '??') != NULL)\nand (hex(lpad(x'1020', 5, x'05')) != NULL)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (md5('Spark') != NULL)\nand (octet_length('Spark SQL') != NULL)\nand (parse_url('http://spark.apache.org/path?query=1', 'HOST') != NULL)\nand (position('bar', 'abcbarbar') > 10)\nand (position('bar', 'abcbarbar', 5) > 5)\nand (printf('Hello World %d %s', 100, 'days') != NULL)\nand (r'%SystemDrive%\\Users\\John' RLIKE r'%SystemDrive%\\\\Users.*')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) > 10)\nand (regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1) != NULL)\nand (regexp_replace('100-200', '(\\\\d+)', 'num') != NULL)\nand (repeat('123', 2) != NULL)\nand (replace('ABCabc', 'abc', 'DEF') != NULL)\nand (reverse('Spark SQL') != NULL)\nand (RIGHT('Spark SQL', 3) != NULL)\nand (rpad('hi', 5, 'ab') != NULL)\nand (hex(rpad(x'1020', 5, x'05')) != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (sentences('Hi there! Good morning.', 'en', 'US') != NULL)\nand (sha('Spark') != NULL)\nand (sha1('Spark') != NULL)\nand (sha2('Spark', 256) != NULL)\nand (soundex('Miller') != NULL)\nand (concat('1', space(2), '1') != NULL)\nand (('->' || split_part('Hello,world,!', ',', 1) || '<-') != NULL)\nand (('->' || split_part('', ',', 1) || '<-') != NULL)\nand (('->' || split_part('Hello,World,!', ',', 0) || '<-') != NULL)\nand (startswith('SparkSQL', 'Spark'))\nand (startswith(NULL, 'Spark'))\nand (substr('Spark SQL', 5, 1) != NULL)\nand (substring_index('www.apache.org', '.', 2) != NULL)\nand (CAST(to_binary('537061726B') AS STRING) != NULL)\nand (CAST(to_binary('537061726B', 'hex') AS STRING) != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (translate('AaBbCc', 'abc', '123') != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (ucase('SparkSql') != NULL)\nand (CAST(unbase64('U3BhcmsgU1FM') AS STRING) != NULL)\nand (decode(unhex('537061726B2053514C'), 'UTF-8') != NULL)\nand (upper('SparkSql') != NULL)\nand (10 / 2 == 5)\nand ((3 | 5) == 2)\nand ((DATE'2021-03-20' - INTERVAL '2' MONTH) != NULL)\nand (10 - 2 + 2 == 4)\nand (2 % 1.8 == 2)\nand (3 ^ 5 == 3)\nand (3 & 5 == 2)\nand (3 * 2 == 2)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (abs(-1) == 1)\nand (acos(1) == 1)\nand (acosh(1) == 1)\nand (asin(0) == 1)\nand (asinh(0) == 1)\nand (atan(0) == 1)\nand (atan2(0, 0) == 1)\nand (atanh(0) == 1)\nand (bigint(current_timestamp) > 1)\nand (bit_count(-1) > 1)\nand (bit_get(23Y, 1) == 1)\nand (bround(13.5, -1) == 1)\nand (round(13.5, -1) == 1)\nand (cbrt(27.0) == 3)\nand (ceil(3345.1, -2) == 1)\nand (ceiling(5.4) == 6)\nand (ceiling(3345.1, -2) == 1)\nand (conv('100', 2, 10) == 4)\nand (conv('FFFFFFFFFFFFFFFF', 16, 10) == 1)\nand (cos(pi()) == -1)\nand (cosh(0) == 1)\nand (cot(1) == 1)\nand (csc(pi() / 2) == 2)\nand (decimal('5.2') == 5)\nand (degrees(3.141592653589793) == 10)\nand (double('5.2') == 4)\nand (e() == 2)\nand (exp(1) == 2)\nand (expm1(0) == 1)\nand (factorial(2) == 2)\nand (float('5.2') == 5)\nand (floor(-0.1) == -1)\nand (floor(3345.1, -2) == 20)\nand (getbit(23Y, 0) == 1)\nand (hypot(3, 4) == 5)\nand (int(-5.6) == 5)\nand (isnan(CAST('NaN' AS double)))\nand (ln(1) == 1)\nand (log(10, 100) == 2)\nand (log1p(0) == 1)\nand (log2(2) == 1)\nand (log10(10) == 1)\nand (nanvl(CAST('NaN' AS DOUBLE), 123) == 2)\nand (negative(1) == -1)\nand (pmod(-10, 3) == 2)\nand (positive(-1) == -1)\nand (pow(2, 3) * power(2, 3) == 8)\nand (radians(180) == 10)\nand (rand(0) * random(0) == 1)\nand (randn(0) == 1)\nand (rint(12.3456) == 1)\nand (round(2.5, 0) == 3)\nand (sec(pi()) == -1)\nand (sin(0) == 0)\nand (shiftleft(2, 1) == 2)\nand (shiftright(4, 1) == 2)\nand (shiftrightunsigned(4, 1) == 2)\nand (sign(40) == 1)\nand (signum(40) == 1)\nand (sinh(0) == 1)\nand (smallint(-5.6) == 5)\nand (sqrt(4) == 2)\nand (tan(0) == 1)\nand (tanh(0) == 1)\nand (tinyint('12') * tinyint(5.4) == 1)\nand (try_add(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_add(1, 2) == 3)\nand (try_divide(3, 2) == 3)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand (try_subtract(1, 2) == 2)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_subtract(-128Y, 1Y) != NULL)\nand (width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2) == 3)\nand (width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) == 10)\nand (array(10, 20, 30) != NULL)\nand (\n      (\n        aggregate(array(1, 2, 3), 0, \n        (acc, x) -> acc + x, \n        acc -> acc * 10)\n      ) == 1\n    )\nand (array_contains(array(1, 2, 3), 2))\nand (array_distinct(array(1, 2, 3, NULL, 3)) != NULL)\nand (array_except(array(1, 2, 2, 3), array(1, 1, 3, 5)) != NULL)\nand (array_intersect(array(1, 2, 3), array(1, 3, 3, 5)) != NULL)\nand (array_join(array('hello', 'world'), ',') != NULL)\nand (array_join(array('hello', NULL, 'world'), ',', '*') == NULL)\nand (array_max(array(1, 20, NULL, 3)) > 10)\nand (array_min(array(1, 20, NULL, 3)) == 1)\nand (array_position(array(3, 2, 1, 4, 1), 1) == 2)\nand (array_remove(array(1, 2, 3, NULL, 3, 2), 3) != NULL)\nand (array_repeat('123', 2) != NULL)\nand (array_size(array(1, NULL, 3, NULL)) == 2)\nand (array_sort(array('bc', 'ab', 'dc')) != NULL)\nand (array_union(array(1, 2, 2, 3), array(1, 3, 5)) != NULL)\nand (arrays_overlap(array(1, 2, NULL, 3), array(NULL, 4, 5)) == NULL)\nand (arrays_zip(array(1, 2), array('shoe', 'string', 'budget')) == NULL)\nand (cardinality(array('b', 'd', 'c', 'a')) == 2)\nand (concat(array(1, 2, 3), array(4, 5), array(6)) != NULL)\nand (element_at(map(1, 'a', 2, 'b'), 2) == NULL)\nand (\n      EXISTS (\n        array(1, 2, 3),\n        \n        x -> x % 2 == 0\n      )\n    )\nand (\n      EXISTS (\n        array(0, NULL, 2, 3, NULL),\n        \n        x -> x IS NULL\n      )\n    )\nand (\n      filter(array(1, 2, 3), \n      x -> x % 2 == 1) != NULL\n    )\nand (flatten(array(array(1, 2), array(3, 4))) != NULL)\nand (\n      forall(array(1, 2, 3), \n      x -> x % 2 == 0) == NULL\n    )\nand (reverse(array(2, 1, 4, 3)) != NULL)\nand (sequence(5, 1) != NULL)\nand (cardinality(array('b', 'd', 'c', 'a')) == 10)\nand (slice(array(1, 2, 3, 4), 2, 2) != NULL)\nand (sort_array(array('b', 'd', NULL, 'c', 'a'), true) != NULL)\nand (\n      transform(array(1, 2, 3), \n      x -> x + 1) != NULL\n    )\nand (try_element_at(array(1, 2, 3), 2) == 2)\nand (\n      zip_with(array('a', 'b', 'c'), array('d', 'e', 'f'), \n      (x, y) -> concat(x, y)) != NULL\n    )\nand (map(1, 'Hello', 2, 'World')[1] != NULL)\nand (cardinality(map('a', 1, 'b', 2)) == 2)\nand (element_at(map(1, 'a', 2, 'b'), 3) == NULL)\nand (map(1.0, '2', 3.0, '4') IS NOT NULL)\nand (map_concat(map(1, 'a', 2, 'b'), map(3, 'c')) IS NOT NULL)\nand (map_contains_key(map(1, 'a', 2, 'b'), 2))\nand (map_entries(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_filter(map(1, 0, 2, 2, 3, -1), \n      (k, v) -> k > v) IS NOT NULL\n    )\nand (map_from_arrays(array(1.0, 3.0), array('2', '4')) IS NOT NULL)\nand (map_from_entries(array(struct(1, 'a'), struct(2, 'b'))) IS NOT NULL)\nand (map_keys(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (map_values(map(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_zip_with(map(1, 'a', 2, 'b'), map(1, 'x', 2, 'y'), \n      (k, v1, v2) -> concat(v1, v2)) IS NOT NULL\n    )\nand (cardinality(map('a', 1, 'b', 2)) == 2)\nand (str_to_map('a:1,b:2,c:3', ',', ':') IS NOT NULL)\nand (\n      transform_keys(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n      (k, v) -> k + 1) IS NOT NULL\n    )\nand (\n      transform_values(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n      (k, v) -> k + v) IS NOT NULL\n    )\nand (try_element_at(map(1, 'a', 2, 'b'), 2) IS NOT NULL)\nand ((INTERVAL '3:15' HOUR TO MINUTE / 3) IS NOT NULL)\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand (typeof(current_timestamp - (current_date + INTERVAL '1' DAY)) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (add_months('2016-08-31', -6) != NULL)\nand (current_date() != NULL)\nand (current_timestamp() != NULL)\nand (current_timezone() != NULL)\nand (date('2021-03-21') != NULL)\nand (date_add('2016-07-30', 1) != NULL)\nand (date_format('2016-04-08', 'y') == 2016)\nand (date_from_unix_date(1) != NULL)\nand (date_sub('2016-07-30', 1) != NULL)\nand (date_trunc('YEAR', '2015-03-05T09:32:05.359') != NULL)\nand (datediff('2009-07-31', '2009-07-30') == 1)\nand (day('2009-07-30') == 30)\nand (dayofmonth('2009-07-30') == 30)\nand (dayofweek('2009-07-30') == 5)\nand (dayofyear('2016-04-09') == 100)\nand (EXTRACT(SECONDS FROM INTERVAL '5:00:30.001' HOUR TO SECOND) == 30)\nand (EXTRACT(WEEK FROM TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') != NULL)\nand (from_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (from_utc_timestamp('2016-08-31', 'Asia/Seoul') != NULL)\nand (hour('2009-07-30 12:58:59') == 10)\nand (last_day('2009-01-12') IS NOT NULL)\nand (make_date(2013, 7, 15) IS NOT NULL)\nand (make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)\nand (make_ym_interval(100, 5) IS NOT NULL)\nand (minute('2009-07-30 12:58:59') == 58)\nand (month('2016-07-30') == 7)\nand (months_between('1997-02-28 10:30:00', '1996-10-30') == 3)\nand (months_between('1997-02-28 10:30:00', '1996-10-30', false) == 2)\nand (next_day('2015-01-14', 'TU') != NULL)\nand (now() != NULL)\nand (quarter('2016-08-31') == 3)\nand (second('2009-07-30 12:58:59') == 59)\nand (timestamp(123) != NULL)\nand (timestamp('2020-04-30 12:25:13.45') != NULL)\nand (timestamp_micros(1230219000123123) != NULL)\nand (timestamp_millis(1230219000123) != NULL)\nand (timestamp_seconds(1230219000) != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (trunc('2015-10-27', 'YEAR') != NULL)\nand (trunc('2019-08-04', 'quarter') != NULL)\nand (try_add(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_add(DATE'2021-03-31', INTERVAL '1' MONTH) != NULL)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (try_subtract(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (unix_date(DATE('1970-01-02')) == 1)\nand (unix_micros(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_millis(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 1)\nand (weekday(DATE'2009-07-30') == 1)\nand (EXTRACT(DAYOFWEEK_ISO FROM DATE'2009-07-30') == 4)\nand (weekofyear('2008-02-20') == 8)\nand (year('2016-07-30') == 2016)\nand (array(1, 2, 3) != NULL)\nand (bigint('5') == 5)\nand (binary('Spark SQL') != NULL)\nand (boolean(1))\nand (CAST(5.6 AS DECIMAL (2, 0)) != NULL)\nand (CAST(INTERVAL '1-2' YEAR TO MONTH AS INTEGER) == 12)\nand (date('2021-03-21') != NULL)\nand (decimal('5.2') == 5)\nand (double('5.2') / 2 == 5)\nand (float('5.2') / 2 == 2)\nand (int('5') == 5)\nand (make_date(2013, 7, 15) != NULL)\nand (make_dt_interval(100, 13) != NULL)\nand (make_ym_interval(100, 5) == NULL)\nand (map(1.0, '2', 3.0, '4') IS NOT NULL)\nand (named_struct('a', 1, 'b', 2, 'c', 3) IS NOT NULL)\nand (smallint('5') == 5)\nand (struct(1, 2, 3) IS NOT NULL)\nand (tinyint('12') == 12)\nand (timestamp('2020-04-30 12:25:13.45') != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31 00:12:00') != NULL)\nand (from_csv('1, 0.8', 'a INT, b DOUBLE') != NULL)\nand (schema_of_csv('1,abc') != NULL)\nand (json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') == 5)\nand (json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') != NULL)\nand (schema_of_json('[{\"col\":01}]', map('allowNumericLeadingZeros', 'true')) != NULL)\nand (to_json(named_struct('a', 1, 'b', 2)) != NULL)\nand (to_json(map(named_struct('a', 1), named_struct('b', 2))) != NULL)\nand (to_json(array((map('a', 1)))) != NULL)\nand (xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()') != NULL)\nand (xpath_boolean('<a><b>1</b></a>', 'a/b'))\nand (xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 3)\nand (xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c') != NULL)\nand (\n      assert_true(\n        0 < 1) == NULL\n    )\nand (\n      (\n        CASE\n          WHEN 1 > 0\n            THEN 1\n          WHEN 2 > 0\n            THEN 2.0\n          ELSE 1.2\n        END\n      ) == 1\n    )\nand (\n      (\n        CASE 3\n          WHEN 1\n            THEN 'A'\n          WHEN 2\n            THEN 'B'\n          WHEN 3\n            THEN 'C'\n        END\n      ) != NULL\n    )\nand (coalesce(2, 5 / 0) == 2)\nand (current_catalog() != NULL)\nand (current_database() != NULL)\nand (current_user() != NULL)\nand (decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks') != NULL)\nand (elt(1, 'scala', 'java') != NULL)\nand (greatest(10, 9, 2, 4, 3) == 10)\nand (hash('Spark', array(123), 2) != NULL)\nand (\n      if(\n        1 < 2, \n        'a', \n        'b') != NULL\n    )\nand (ifnull(NULL, array('2')) != NULL)\nand (input_file_block_length() == -1)\nand (input_file_block_start() == -1)\nand (isnull(1))\nand (isnotnull(1))\nand (least(10, 9, 2, 4, 3) == 2)\nand (monotonically_increasing_id() > 10)\nand (nullif(2, 2) == NULL)\nand (nvl(NULL, 2) == 2)\nand (nvl2(NULL, 2, 1) == 1)\nand (typeof(1) != NULL)\nand (uuid() != NULL)\nand (xxhash64('Spark', array(123), 2) != NULL)\nand ('20'::INTEGER == 20)\nand like('Spark', '_park')\nand ('Spark' LIKE SOME('_park', '_ock'))\nand (bitmap_count(x'00') == 10)\nand (charindex('bar', 'abcbarbar') == 1)\nand (decode(x'FEFF0053007000610072006B002000530051004C', 'UTF-16') != NULL)\nand (like('Spark', '_park'))\nand (len('Spark SQL ') > 10)\nand (levenshtein('kitten', 'sitting', 4) > 10)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', 'Z', 'z', '9', 'X') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', lowerChar => 'z', upperChar => 'X') != NULL)\nand (mask('AaBb123-&ASDXYZ921312asd', NULL, NULL, NULL, NULL) != NULL)\nand (overlay('Spark SQL' PLACING '_' FROM 6) != NULL)\nand (overlay('Spark SQL' PLACING 'tructured' FROM 2 FOR 4) != NULL)\nand (overlay(encode('Spark SQL', 'utf-8') PLACING encode('_', 'utf-8') FROM 6) != NULL)\nand (position('bar' IN 'abcbarbar') > 2)\nand (regexp_count('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en') > 2)\nand (regexp_instr('Mary had a little lamb', NULL) != NULL)\nand (regexp_substr(NULL, 'Ste(v|ph)en') != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (string(4) != NULL)\nand (substr('Spark SQL', -3) != NULL)\nand (substr('Spark SQL' FROM 5 FOR 1) != NULL)\nand (substr('Spark SQL' FROM -3) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_char(DATE'2016-04-08', 'y') != NULL)\nand (to_char(encode('abc', 'utf-8'), 'utf-8') != NULL)\nand (to_varchar(454, '999') != NULL)\nand (to_varchar(DATE'2016-04-08', 'y') != NULL)\nand (to_varchar(x'537061726b2053514c', 'hex') != NULL)\nand (TRIM( 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(BOTH 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(LEADING 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(TRAILING 'SL' FROM 'SSparkSQLS') != NULL)\nand (\n      CAST(try_aes_decrypt(\n        unbase64('MTIzNDU2Nzg5MDEyMdXvR41sJqwZ6hnTU8FRTTtXbL8yeChIZA=='), \n        '1234567890abcdef', \n        'GCM', \n        'DEFAULT', \n        'Some AAD') AS STRING) != NULL\n    )\nand (url_decode('http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1') != NULL)\nand (url_encode('http://spark.apache.org/path?query=1') != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' + INTERVAL '3' SECOND) != NULL)\nand (bit_reverse(-1) == -1)\nand (bitmap_bit_position(-32768) == 1)\nand (bitmap_bucket_number(-32768) == 1)\nand (MOD(2, 1.8) == 2)\nand (array_append(array(1, 2, 3), 0) == NULL)\nand (array_compact(array(1, 2, NULL, 3, NULL, 3)) == NULL)\nand (array_insert(array('a', 'b', 'c'), 1, 'z') != NULL)\nand (array_prepend(array(1, 2, 3), 0) != NULL)\nand (get(array(1, 2, 3), 2) != NULL)\nand (\n      reduce(array(1, 2, 3), 0, \n      (acc, x) -> acc + x) == 2\n    )\nand (shuffle(array(1, 20, 3, 5)) != NULL)\nand (map_contains_key(map(1, 'a', 2, 'b'), 2))\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand (date_diff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (date_part('SECONDS', TIMESTAMP'2019-10-01 00:00:01.000001') == 1)\nand (date_part('Week', TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (dateadd('2016-07-30', 1) != NULL)\nand (dateadd(MICROSECOND, 5, TIMESTAMP'2022-02-28 00:00:00') != NULL)\nand (datediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 11:59:59') == 0)\nand (make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887, 'CET') IS NOT NULL)\nand (make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)\nand (now() != NULL)\nand (timediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (timestampdiff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (to_unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 100)\nand (try_to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand ('20'::INTEGER == 20)\nand (make_interval(100, 11) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)\nand (string(5) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_varchar(454, '999') IS NOT NULL)\nand (from_json('{\"a\":1, \"b\":0.8}', 'a INT, b DOUBLE') IS NOT NULL)\nand (get_json_object('{\"a\":\"b\"}', '$.a') IS NOT NULL)\nand (to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), map('timestampFormat', 'dd/MM/yyyy')) IS NOT NULL)\nand (to_csv(named_struct('a', 1, 'b', 2)) IS NOT NULL)\nand (from_xml('<p><time>26/08/2015</time></p>', 'time Timestamp', map('timestampFormat', 'dd/MM/yyyy')) != NULL)\nand (schema_of_xml('<p><a attr=\"2\">1</a><a>3</a></p>', map('excludeAttribute', 'true')) IS NOT NULL)\nand (current_metastore() != NULL)\nand (current_schema() != NULL)\nand (current_version() != NULL)\nand (equal_null(2, 2))\nand (\n      iff(\n        1 < 2, \n        'a', \n        'b') == 'a'\n    )\nand (is_account_group_member('admins'))\nand (is_member('admins'))\nand (luhn_check('12345') == NULL)\nand (user() != NULL)\nand (h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0) != NULL)\nand (h3_coverash3string('{\"type\":\"LineString\",\"coordinates\":[[-122.4194,37.7749],[-118.2437,34.0522],[-74.0060,40.7128]]}', 1) != NULL)\nand (h3_longlatash3(-122.4783, 37.8199, 13) > 0)\nand (h3_longlatash3string(-122.4783, 37.8199, 13) != NULL)\nand (h3_pointash3('POINT(-122.4783 37.8199)', 13) > 0)\nand (h3_pointash3string('{\"type\":\"Point\",\"coordinates\":[]}', 15) == NULL)\nand (h3_pointash3string('POINT(-122.4783 37.8199)', 13) != NULL)\nand (\n      h3_polyfillash3(\n        unhex(\n          '0103000000010000000400000050fc1873d79a5ec0d0d556ec2fe342404182e2c7988f5dc0f46c567dae064140aaf1d24d628052c05e4bc8073d5b444050fc1873d79a5ec0d0d556ec2fe34240'), \n        2) != NULL\n    )\nand (h3_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3('Not-a-valid-rep', 2) == NULL)\nand (h3_try_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_boundaryasgeojson('8009fffffffffff') != NULL)\nand (h3_boundaryasgeojson(599686042433355775) != NULL)\nand (hex(h3_boundaryaswkb(599686042433355775)) != NULL)\nand (h3_boundaryaswkt(599686042433355775) != NULL)\nand (h3_centerasgeojson(599686042433355775) != NULL)\nand (hex(h3_centeraswkb('8009fffffffffff')) == NULL)\nand (h3_centeraswkt('8009fffffffffff') != NULL)\nand (h3_h3tostring(599686042433355775) != NULL)\nand (h3_stringtoh3('85283473fffffff') == NULL)\nand (h3_ischildof('88283471b9fffff', '85283473fffffff'))\nand (h3_ispentagon(590112357393367039))\nand (h3_isvalid('85283473fffffff'))\nand (h3_try_validate(590112357393367039) != NULL)\nand (h3_validate(590112357393367039) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_hexring(599686042433355775, 1) != NULL)\nand (h3_kring(599686042433355775, 1) != NULL)\nand (h3_kringdistances(599686042433355775, 1) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_maxchild(599686042433355775, 10) != NULL)\nand (h3_minchild(599686042433355775, 10) != NULL)\nand (h3_resolution(599686042433355775) == 5)\nand (h3_tochildren(599686042433355775, 6) != NULL)\nand (h3_toparent(599686042433355775, 0) != NULL)\nand (\n      h3_compact(\n        ARRAY(\n          599686042433355775, \n          599686030622195711, \n          599686044580839423, \n          599686038138388479, \n          599686043507097599, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686040285872127, \n          599686041359613951, \n          599686039212130303, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647)) != NULL\n    )\nand (\n      h3_uncompact(\n        ARRAY(\n          599686030622195711, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647, \n          595182446027210751), \n        5) != NULL\n    )"
          },
          "sortType" : "asc",
          "nullsType" : "nulls last"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "yjJzOtIaMYrFghSTjYOLy$$c8X4JxfsiJGyYmDZTa1Qg",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "IwvYuixHVo2mVEkmh7Tnx$$dDtCmlwhzvTjyw1sqZJQn",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "YEvBlBE-carjnDzreM_VM$$_dM9DIffx5URPd3zWrSQ_" : {
      "id" : "YEvBlBE-carjnDzreM_VM$$_dM9DIffx5URPd3zWrSQ_",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_4_2",
        "slug" : "SQLStatement_4_2",
        "x" : 340,
        "y" : 60,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "-- SELECT *\n--     FROM SQLStatement_2 UNPIVOT INCLUDE NULLS\n--     (SQLStatement_2 FOR string_value \n--     IN (c_tinyint       AS `tiny_int_val`,\n--         c_smallint       AS `small_int_val`,\n--         c_int       AS `int_val`,\n--         SQLStatement_2.c_bigint AS `bigint_val`))\n\n\n-- WITH src AS (\n--     SELECT * FROM SQLStatement_2\n-- ),\n\n-- reformat_1 AS (\n--     SELECT * FROM src\n-- ),\n\n-- unpvt AS (\n--     SELECT * FROM (SELECT * FROM reformat_1)\n--     UNPIVOT INCLUDE NULLS (\n--         SQLStatement_2 FOR string_value IN (\n--                 c_tinyint       AS `tiny_int_val`,\n--                 c_smallint       AS `small_int_val`,\n--                 c_int       AS `int_val`,\n--                 c_bigint AS `bigint_val`\n--             )\n--         )\n-- )\n\n-- SELECT *\n-- FROM unpvt\n\nSELECT * FROM (SELECT * FROM SQLStatement_6)\n    UNPIVOT INCLUDE NULLS (\n        SQLStatement_6 FOR string_value IN (\n                c_tinyint       AS `tiny_int_val`,\n                c_smallint       AS `small_int_val`,\n                c_int       AS `int_val`,\n                c_bigint AS `bigint_val`\n            )\n        )"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "tatPRoAt27j2NbSPZ6EaK$$o0WuL1ZG8L9FqJ_s6hIHQ",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "SQLStatement_6"
        } ],
        "outputs" : [ {
          "id" : "YZv46c37b4hE73k0dEFuf$$nQjIb2NqTY55B14bOlJam",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "string_value",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "SQLStatement_6",
              "dataType" : {
                "type" : "Bigint"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "AllStunningOne##v8vW5b75" : {
      "id" : "AllStunningOne##v8vW5b75",
      "component" : "Reformat",
      "metadata" : {
        "label" : "AllStunningOne",
        "x" : 1700,
        "y" : 1420,
        "phase" : 0,
        "macroDependencies" : [ "SQL_DatabricksSharedBasic.qa_concat_function_main", "SQL_DatabricksParentProjectMain.qa_boolean_macro", "SQL_BaseGitDepProjectAllFinal.qa_concat_macro_base_column" ]
      },
      "properties" : {
        "columnsSelector" : [ ],
        "expressions" : [ {
          "expression" : {
            "expression" : "(1 != 2)\nor (true != NULL)\nor (NULL != NULL)\nor (1 < 2)\nor (2 <= 2)\nor (2 <=> 2)\nor ((2 % 1.8) == 1)\nor (to_date('2009-07-30 04:17:52') < to_date('2009-07-30 04:17:52'))\nor (add_months('2016-08-31', 1) < add_months('2017-08-31', 3))\nor (true and false)\nor array_contains(array_distinct(array(1, 2, 3)), 2)\nor array_contains(array_except(array(1, 2, 3), array(1, 3, 5)), 2)\nor array_contains(array_intersect(array(1, 2, 3), array(1, 3, 5)), 10)\nor (array_join(array('hello', NULL, 'world'), ' ', ',') LIKE '%hello%')\nor (array_max(array(1, 20, NULL, 3)) > 10)\nor (array_min(array(1, 20, NULL, 3)) > 20)\nor array_contains(array_remove(array(1, 2, 3, NULL, 3), 3), 3)\nor array_contains(array_repeat(5, 2), 6)\nor array_contains(array_union(array(1, 2, 3), array(1, 3, 5)), 10)\nor arrays_overlap(array(1, 2, 3), array(3, 4, 5))\nor (10 BETWEEN 2 and 20)\nor contains('Spark SQL', 'Spark')\nor endswith('Spark SQL', 'SQL')\nor (\n     EXISTS (\n       array(1, 2, 3),\n       \n       x -> x % 2 == 0\n     )\n   )\nor array_contains(filter(array(1, 2, 3), \n   x -> x % 2 == 1), 5)\nor array_contains(flatten(array(array(1, 2), array(3, 4))), 10)\nor forall(array(1, 2, 3), \n   x -> x % 2 == 0)\nor ilike('Spark', '_Park')\nor (1 IN (2, 3, 4))\nor (isnan(CAST('NaN' AS double)))\nor isnotnull(1)\nor isnull(1)\nor array_contains(json_object_keys('{\"key\": \"value\"}'), 'key1')\nor like('Spark', '_park')\nor map_contains_key(map(1, 'a', 2, 'b'), 1)\nor map_contains_key(map_concat(map(1, 'a', 2, 'b'), map(3, 'c')), 4)\nor map_contains_key(map_filter(map(1, 0, 2, 2, 3, -1), \n   (k, v) -> k > v), 3)\nor map_contains_key(map_from_arrays(array(1.0, 3.0), array('2', '4')), 2)\nor map_contains_key(map_from_entries(array(struct(1, 'a'), struct(2, 'b'))), 1)\nor array_contains(map_keys(map(1, 'a', 2, 'b')), 2)\nor array_contains(map_values(map(1, 'a', 2, 'b')), 'a')\nor map_contains_key(map_zip_with(map(1, 'a', 2, 'b'), map(1, 'x', 2, 'y'), \n   (k, v1, v2) -> concat(v1, v2)), 1)\nor (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\nor (NOT true)\nor array_contains(regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1), '100')\nor array_contains(sequence(1, 5), 4)\nor array_contains(shuffle(array(1, 20, 3, 5)), 10)\nor array_contains(slice(array(1, 2, 3, 4), 2, 2), 4)\nor array_contains(sort_array(array('b', 'd', NULL, 'c', 'a'), true), 'b')\nor array_contains(split('oneAtwoBthreeC', '[ABC]'), 'one')\nor startswith('Spark SQL', 'Spark')\nor map_contains_key(str_to_map('a:1,b:2,c:3', ',', ':'), 'a')\nor array_contains(transform(array(1, 2, 3), \n   x -> x + 1), 1)\nor map_contains_key(transform_keys(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n   (k, v) -> k + 1), 1)\nor map_contains_key(transform_values(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n   (k, v) -> v + 1), 2)\nor array_contains(xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()'), 'a')\nor xpath_boolean('<a><b>1</b></a>', 'a/b')\nor array_contains(zip_with(array(1, 2), array(3, 4), \n   (x, y) -> x + y), 1)"
          },
          "alias" : "c_bool_expr"
        }, {
          "expression" : {
            "expression" : "concat(\n  c_array[0], \n  c_struct.city, \n  aes_decrypt(unhex('83F16B2AA704794132802D248E6BFD4E380078182D1544813898AC97E709B28A94'), '0000111122223333'), \n  base64(aes_encrypt('Spark SQL', '1234567890abcdef', 'ECB', 'PKCS')), \n  bin(13), \n  btrim('    SparkSQL   '), \n  char(65), \n  chr(65), \n  concat('Spark', 'SQL'), \n  concat_ws(' ', 'Spark', 'SQL'), \n  crc32('Spark'), \n  current_catalog(), \n  current_database(), \n  current_date(), \n  current_timestamp(), \n  current_timezone(), \n  current_user(), \n  date_add('2016-07-30', 1), \n  date_sub('2016-07-30', 1), \n  date_format('2016-04-08', 'y'), \n  date_from_unix_date(1), \n  date_part('YEAR', TIMESTAMP'2019-08-12 01:00:00.123456'), \n  date_part('MONTH', INTERVAL '2021-11' YEAR TO MONTH), \n  date_part('MINUTE', INTERVAL '123 23:55:59.002001' DAY TO SECOND), \n  date_trunc('HOUR', '2015-03-05T09:32:05.359'), \n  date_trunc('DD', '2015-03-05T09:32:05.359'), \n  datediff('2009-07-31', '2009-07-30'), \n  decode(encode('abc', 'utf-8'), 'utf-8'), \n  e(), \n  elt(1, 'scala', 'java'), \n  format_number(12332.123456, '##################.###'), \n  format_string('Hello World %d %s', 100, 'days'), \n  CAST(from_csv('1, 0.8', 'a INT, b DOUBLE') AS string), \n  CAST(from_json(\n    '{\"teacher\": \"Alice\", \"student\": [{\"name\": \"Bob\", \"rank\": 1}, {\"name\": \"Charlie\", \"rank\": 2}]}', \n    'STRUCT<teacher: STRING, student: ARRAY<STRUCT<name: STRING, rank: INT>>>') AS string), \n  CAST(from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') AS string), \n  CAST(from_utc_timestamp('2016-08-31', 'Asia/Seoul') AS string), \n  CAST(get_json_object('{\"a\":\"b\"}', '$.a') AS string), \n  hash('Spark', array(123), 2), \n  hex(17), \n  CAST(hour('2009-07-30 12:58:59') AS string), \n  CAST(hypot(3, 4) AS string), \n  CAST(ilike('Spark', '_Park') AS string), \n  CAST(initcap('sPark sql') AS string), \n  CAST(last_day('2009-01-12') AS string), \n  CAST(lcase('SparkSql') AS string), \n  CAST(if(\n    1 < 2, \n    'a', \n    'b') AS string), \n  CAST(ifnull(NULL, array('2')) AS string), \n  LEFT('Spark SQL', 3), \n  lower('SparkSql'), \n  lpad('hi', 5, '??'), \n  ltrim('    SparkSQL   '), \n  CAST(make_date(2013, 7, 15) AS string), \n  CAST(make_dt_interval(1, 12, 30, 1.001001) AS string), \n  CAST(make_interval(100, 11, 1, 1, 12, 30, 1.001001) AS string), \n  CAST(make_timestamp(2019, 6, 30, 23, 59, 60) AS string), \n  CAST(make_ym_interval(1, 2) AS string), \n  md5('Spark'), \n  next_day('2015-01-14', 'TU'), \n  now(), \n  nullif(2, 2), \n  nvl(NULL, 'hello'), \n  CAST(overlay('Spark SQL' PLACING '_' FROM 6) AS string), \n  CAST(parse_url('http://spark.apache.org/path?query=1', 'HOST') AS string), \n  printf('Hello World %d %s', 100, 'days'), \n  CAST(regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) AS string), \n  CAST(regexp_replace('100-200', '(\\\\d+)', 'num') AS string), \n  repeat('123', 2), \n  replace('ABCabc', 'abc', 'DEF'), \n  reverse('Spark SQL'), \n  RIGHT('Spark SQL', 3), \n  rpad('hi', 5, '??'), \n  rtrim('    SparkSQL   '), \n  CAST(schema_of_json('[{\"col\":0}]') AS string), \n  sha('Spark'), \n  sha1('Spark'), \n  sha2('Spark', 256), \n  concat(space(2), '1'), \n  split_part('11.12.13', '.', 3), \n  substr('Spark SQL', 5), \n  substring('Spark SQL', 5), \n  substring_index('www.apache.org', '.', 2), \n  timestamp_micros(1230219000123123), \n  timestamp_millis(1230219000123), \n  timestamp_seconds(1.230219000123E9), \n  to_csv(named_struct('a', 1, 'b', 2)), \n  to_date('2009-07-30 04:17:52'), \n  to_timestamp('2016-12-31 00:12:00'), \n  to_unix_timestamp('2016-04-08', 'yyyy-MM-dd'), \n  to_utc_timestamp('2016-08-31', 'Asia/Seoul'), \n  translate('AaBbCc', 'abc', '123'), \n  trunc('2019-08-04', 'week'), \n  try_to_binary('abc', 'utf-8'), \n  try_to_number('454', '999'), \n  typeof(1), \n  ucase('SparkSql'), \n  unbase64('U3BhcmsgU1FM'), \n  decode(unhex('537061726B2053514C'), 'UTF-8'), \n  unix_date(DATE(\"1970-01-02\")), \n  unix_micros(TIMESTAMP('1970-01-01 00:00:01Z')), \n  unix_millis(TIMESTAMP('1970-01-01 00:00:01Z')), \n  unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z')), \n  unix_timestamp('2016-04-08', 'yyyy-MM-dd'), \n  upper('SparkSql'), \n  uuid(), \n  xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c'), \n  xxhash64('Spark', array(123), 2), \n  YEAR ('2016-07-30'), \n  to_json(array(named_struct('a', 1, 'b', 2))))"
          },
          "alias" : "c_concat_expr"
        }, {
          "expression" : {
            "expression" : "(2 % 1.8)\n+ '20'::INTEGER\n+ (MOD(2, 1.8))\n+ (3 & 5)\n+ (2 * 3)\n+ (5 + 10)\n- (100 + 45)\n+ (3 / 2)\n+ (3 ^ 5)\n+ abs(-1)\n+ acos(1)\n+ acosh(1)\n+ array_position(array(3, 2, 1), 1)\n+ array_size(array('b', 'd', 'c', 'a'))\n+ ascii(2)\n+ asin(0)\n+ asinh(0)\n+ atan(0)\n+ atan2(0, 0)\n+ atanh(0)\n+ bit_count(0)\n+ bit_get(11, 0)\n+ bit_length('Spark SQL')\n+ bround(25, -1)\n+ cardinality(array('b', 'd', 'c', 'a'))\n+ cardinality(map('a', 1, 'b', 2))\n+ CAST('10' AS int)\n+ cbrt(27.0)\n+ ceil(3.1411, 3)\n+ ceiling(3.1411, 3)\n+ char_length('Spark SQL ')\n+ coalesce(NULL, 1, NULL)\n+ conv('100', 2, 10)\n+ cos(0)\n+ cosh(0)\n+ cot(1)\n+ csc(1)\n+ day('2009-07-30')\n+ dayofmonth('2009-07-30')\n+ dayofweek('2009-07-30')\n+ dayofyear('2016-04-09')\n+ degrees(3.141592653589793)\n+ element_at(array(1, 2, 3), 2)\n+ exp(0)\n+ expm1(0)\n+ EXTRACT(SECONDS FROM TIMESTAMP'2019-10-01 00:00:01.000001')\n+ EXTRACT(MINUTE FROM INTERVAL '123 23:55:59.002001' DAY TO SECOND)\n+ factorial(2)\n+ find_in_set('ab', 'abc,b,ab,c,def')\n+ floor(-0.1)\n+ getbit(11, 0)\n+ greatest(10, 9, 2, 4, 3)\n+ instr('SparkSQL', 'SQL')\n+ json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]')\n+ least(10, 9, 2, 4, 3)\n+ length('Spark SQL ')\n+ levenshtein('kitten', 'sitting')\n+ ln(10)\n+ locate('bar', 'foobarbar')\n+ log(10, 100)\n+ log10(10)\n+ log1p(0)\n+ log2(2)\n+ minute('2009-07-30 12:58:59')\n+ (2 % 1.8)\n+ month('2016-07-30')\n+ months_between('1997-02-28 10:30:00', '1996-10-30', false)\n+ nanvl(CAST('NaN' AS double), 123)\n+ negative(100)\n+ nvl2(NULL, 2, 1)\n+ octet_length('Spark SQL')\n+ pi()\n+ pmod(10, 3)\n+ position('bar', 'foobarbar')\n+ positive(1)\n+ pow(2, 3)\n+ power(2, 3)\n+ quarter('2016-08-31')\n+ radians(180)\n+ rand()\n+ randn()\n+ random()\n+ rint(12.3456)\n+ round(2.5, 0)\n+ sec(0)\n+ second('2009-07-30 12:58:59')\n+ shiftleft(2, 1)\n+ shiftright(4, 1)\n+ shiftrightunsigned(4, 1)\n+ sign(40)\n+ signum(40)\n+ sin(0)\n+ sinh(0)\n+ size(array('b', 'd', 'c', 'a'))\n+ sqrt(4)\n+ tan(0)\n+ tanh(0)\n+ to_number('454.00', '000.00')\n+ try_add(1, 2)\n+ try_divide(2L, 2L)\n+ try_element_at(array(1, 2, 3), 2)\n+ try_multiply(2, 3)\n+ try_subtract(2, 1)\n+ weekday('2009-07-30')\n+ weekofyear('2008-02-20')\n+ (\n    CASE\n      WHEN 1 > 0\n        THEN 1\n      WHEN 2 > 0\n        THEN 2.0\n      ELSE 1.2\n    END\n  )\n+ width_bucket(5.3, 0.2, 10.6, 5)\n+ xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)')\n+ xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)')\n+ xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)')\n+ xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)')\n+ xpath_short('<a><b>1</b><b>2</b></a>', 'sum(a/b)')\n+ (~ 0)"
          },
          "alias" : "`c_add_expr`"
        }, {
          "expression" : {
            "expression" : "c_tinyint"
          },
          "alias" : "c_tinyint"
        }, {
          "expression" : {
            "expression" : "c_smallint"
          },
          "alias" : "`c_smallint`"
        }, {
          "expression" : {
            "expression" : "c_int"
          },
          "alias" : "c_int"
        }, {
          "expression" : {
            "expression" : "c_bigint"
          },
          "alias" : "c_bigint"
        }, {
          "expression" : {
            "expression" : "c_float"
          },
          "alias" : "c_float"
        }, {
          "expression" : {
            "expression" : "c_double"
          },
          "alias" : "c_double"
        }, {
          "expression" : {
            "expression" : "c_string"
          },
          "alias" : "c_string"
        }, {
          "expression" : {
            "expression" : "c_boolean"
          },
          "alias" : "c_boolean"
        }, {
          "expression" : {
            "expression" : "c_array"
          },
          "alias" : "c_array"
        }, {
          "expression" : {
            "expression" : "c_struct"
          },
          "alias" : "c_struct"
        }, {
          "expression" : {
            "expression" : "{{ SQL_DatabricksSharedBasic.qa_concat_function_main('c_string', 'c_boolean') }}"
          },
          "alias" : "c_macro"
        }, {
          "rowType" : "ifGroup",
          "children" : [ {
            "rowType" : "if",
            "condition" : {
              "expression" : "v_int > 20"
            },
            "children" : [ {
              "expression" : {
                "expression" : "concat(c_string, c_float)"
              },
              "alias" : "c_if"
            } ]
          }, {
            "rowType" : "elseIf",
            "condition" : {
              "expression" : " var('v_project_dict')['b'] == 'hello'"
            },
            "children" : [ {
              "expression" : {
                "expression" : "concat(c_string, c_int)"
              },
              "alias" : "c_if"
            } ]
          }, {
            "rowType" : "else",
            "children" : [ {
              "expression" : {
                "expression" : "concat(c_string, c_bigint)"
              },
              "alias" : "c_if"
            } ]
          } ]
        }, {
          "rowType" : "for",
          "variable" : {
            "expression" : "c_i"
          },
          "iterable" : {
            "expression" : "range(0, 5)"
          },
          "children" : [ {
            "expression" : {
              "expression" : "concat(c_string, {{c_i}})"
            },
            "alias" : "cfor_col_{{c_i}}"
          } ]
        }, {
          "expression" : {
            "expression" : "{{ SQL_DatabricksParentProjectMain.qa_boolean_macro('c_string') }}"
          },
          "alias" : "c_databricks_project_main"
        }, {
          "expression" : {
            "expression" : "{{ SQL_BaseGitDepProjectAllFinal.qa_concat_macro_base_column('c_string') }}"
          },
          "alias" : "c_base_project"
        }, {
          "expression" : {
            "expression" : "concat('{{ dbt_utils.pretty_time() }}', '{{ dbt_utils.pretty_log_format(\"my pretty message\") }}')"
          },
          "alias" : "c_dbt_utils_functions"
        }, {
          "expression" : {
            "expression" : "{{v_expression}}"
          },
          "alias" : "c_use_config_expression"
        }, {
          "expression" : {
            "expression" : "area(c_int, c_int)"
          },
          "alias" : "c_use_databricks_function"
        }, {
          "expression" : {
            "expression" : "to_json(named_struct('a', 1, 'b', 2))"
          },
          "alias" : "c_to_json"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "I78sSQUC",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "NiR5hs8S",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_bool_expr",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_concat_expr",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_add_expr",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "c_macro",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_if",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_0",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_2",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_3",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_4",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_databricks_project_main",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_base_project",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_dbt_utils_functions",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_use_config_expression",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_use_databricks_function",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_to_json",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "EPe4orQ_A0uy5uLNbIw_V$$_27SHh1El0JM4vTamx3-b" : {
      "id" : "EPe4orQ_A0uy5uLNbIw_V$$_27SHh1El0JM4vTamx3-b",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "pvt1",
        "slug" : "pvt1",
        "x" : 800,
        "y" : -220,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT emp.employee_ID as c1\n    FROM employees AS emp, LATERAL (SELECT * FROM departments AS d WHERE emp.department_ID = d.department_ID) AS iv2\n    ORDER BY employee_ID"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "1l0GDSONBNqBuSD1E5UI8$$qvYsc9QOIt9TMOcz8vNTd",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "employee_ID",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "department_ID",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "project_names",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            } ]
          },
          "slug" : "employees"
        }, {
          "id" : "h3uJ2FgVBLbGvxh7fRr6P$$vEeINHmjoNJJe2fb3v71z",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "department_ID",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "department_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "departments"
        }, {
          "id" : "9O3njWvalAwvR4-yi06Pq$$mdHQGH7d6oS6EuaDx0PG6",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "perfid",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "SQLStatement_1_1_1_1_34"
        } ],
        "outputs" : [ {
          "id" : "Q_KvrFqWc-ZV06lBam8w6$$6wJ40wPfNiiuueAXs3SIY",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Limit_7##sID6H5hk" : {
      "id" : "Limit_7##sID6H5hk",
      "component" : "Limit",
      "metadata" : {
        "label" : "Limit_7",
        "x" : 1400,
        "y" : 2160,
        "phase" : 0
      },
      "properties" : {
        "limit" : {
          "expression" : "10"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "tbVrnk6W",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "c_id",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "MliIlQcW",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "c_id",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "n3NKUmEIaVMtN91cS1kPQ$$s1Yga8Ex3ZCAfPXxLi3uz" : {
      "id" : "n3NKUmEIaVMtN91cS1kPQ$$s1Yga8Ex3ZCAfPXxLi3uz",
      "component" : "Join",
      "metadata" : {
        "label" : "Join_1_3",
        "slug" : "Join_1_3",
        "x" : 1400,
        "y" : 900,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "conditions" : [ {
          "alias" : "in1",
          "expression" : {
            "expression" : "in0.customer_id != in1.customer_id"
          },
          "joinType" : "INNER"
        } ],
        "expressions" : [ {
          "expression" : {
            "expression" : "in0.customer_id"
          },
          "alias" : "customer_id"
        }, {
          "expression" : {
            "expression" : "in1.first_name"
          },
          "alias" : "first_name"
        }, {
          "expression" : {
            "expression" : "in0.first_name"
          },
          "alias" : "last_name"
        }, {
          "expression" : {
            "expression" : "concat('expression', in0.c1)"
          },
          "alias" : "c_expressions"
        }, {
          "expression" : {
            "expression" : "in1.c1"
          },
          "alias" : "c1"
        } ],
        "activeTab" : "expressions",
        "columnsSelector" : [ "avZnel9L##customer_id", "Jqjak2V6##customer_id", "avZnel9L##customer_id", "Jqjak2V6##first_name", "avZnel9L##first_name", "avZnel9L##c1", "Jqjak2V6##c1" ],
        "headAlias" : "in0"
      },
      "ports" : {
        "inputs" : [ {
          "id" : "hpJGBz2MRalwZnxakPpzb$$kr42ohUpzykVQKQodQkj-",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c3",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "c6",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c13",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c14",
              "dataType" : {
                "type" : "Timestamp"
              }
            } ]
          },
          "slug" : "in0"
        }, {
          "id" : "TKY2aKiXkd-92F2R1XuLV$$b4Dt05YmjSU-hAv0qMewx",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c2",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c3",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "c4",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c5",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Integer"
                }
              }
            }, {
              "name" : "c6",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c7",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c8",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "Integer"
                }
              }
            }, {
              "name" : "c10",
              "dataType" : {
                "type" : "Timestamp"
              }
            }, {
              "name" : "c15",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in1"
        } ],
        "outputs" : [ {
          "id" : "UKBJHwCgWU8ygAn6fUuTu$$miO0O1MmjBYJ6gzN1MpSE",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_expressions",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c1",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "l94-33GFG9ZO7EnrFdVtN$$-NP3p_xMkE7JIBA034QCo" : {
      "id" : "l94-33GFG9ZO7EnrFdVtN$$-NP3p_xMkE7JIBA034QCo",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_1_1_1",
        "slug" : "SQLStatement_1_1_1",
        "x" : -200,
        "y" : -200,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "select distinct * from SQLStatement_1_4"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "OKyBSyTTYsxmM9kGWOQYH$$Q8eK9XQaXw-FhKff5Rwtx",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "SQLStatement_1_4"
        } ],
        "outputs" : [ {
          "id" : "OlCpopT5D5idkearGoLzE$$Br3g7ON89e6azyy4xunSR",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Filter_1##zGXiYYi7" : {
      "id" : "Filter_1##zGXiYYi7",
      "component" : "Filter",
      "metadata" : {
        "label" : "Filter_1",
        "x" : 1400,
        "y" : 1760,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ ],
        "condition" : {
          "expression" : "true"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "SwioPJPy",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "id",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "GCEUIp4D",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "id",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "date_dim##SwqkB2Ms" : {
      "id" : "date_dim##SwqkB2Ms",
      "component" : "Source",
      "metadata" : {
        "label" : "date_dim",
        "x" : 680,
        "y" : 2840,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "date_dim",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "Fyi3c8nA",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "D_DATE_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_DATE_ID",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_DATE",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "D_MONTH_SEQ",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_WEEK_SEQ",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_QUARTER_SEQ",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_YEAR",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_DOW",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_MOY",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_DOM",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_QOY",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_FY_YEAR",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_FY_QUARTER_SEQ",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_FY_WEEK_SEQ",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_DAY_NAME",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_QUARTER_NAME",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_HOLIDAY",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_WEEKEND",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_FOLLOWING_HOLIDAY",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_FIRST_DOM",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_LAST_DOM",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_SAME_DAY_LY",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_SAME_DAY_LQ",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "D_CURRENT_DAY",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_CURRENT_WEEK",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_CURRENT_MONTH",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_CURRENT_QUARTER",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "D_CURRENT_YEAR",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Limit_1##EOyLADxS" : {
      "id" : "Limit_1##EOyLADxS",
      "component" : "Limit",
      "metadata" : {
        "label" : "Limit_1",
        "x" : 1700,
        "y" : 1760,
        "phase" : 0
      },
      "properties" : {
        "limit" : {
          "expression" : "100"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "u2bN9XKv",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "id",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "J4VY8q9l",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "id",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "env_uitesting_shared_parent_model_1##jwFiFwLQ" : {
      "id" : "env_uitesting_shared_parent_model_1##jwFiFwLQ",
      "component" : "Model",
      "metadata" : {
        "label" : "env_uitesting_shared_parent_model_1",
        "x" : 1400,
        "y" : 1440,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "env_uitesting_shared_parent_model_1",
          "sourceType" : "Model"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "RDcJ7veI",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Aggregate_1##Z3cD0YF5" : {
      "id" : "Aggregate_1##Z3cD0YF5",
      "component" : "Aggregate",
      "metadata" : {
        "label" : "Aggregate_1",
        "x" : 1980,
        "y" : 1420,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "aggregate" : [ {
          "expression" : {
            "expression" : "any_value(c_bool_expr)"
          },
          "alias" : "c_bool_expr"
        }, {
          "expression" : {
            "expression" : "any_value(c_concat_expr)"
          },
          "alias" : "c_concat_expr"
        }, {
          "expression" : {
            "expression" : "any_value(c_add_expr)"
          },
          "alias" : "c_add_expr"
        }, {
          "expression" : {
            "expression" : "any_value(c_tinyint)"
          },
          "alias" : "c_tinyint"
        }, {
          "expression" : {
            "expression" : "any_value(c_smallint)"
          },
          "alias" : "c_smallint"
        }, {
          "expression" : {
            "expression" : "any_value(c_int)"
          },
          "alias" : "c_int"
        }, {
          "expression" : {
            "expression" : "any_value(c_bigint)"
          },
          "alias" : "c_bigint"
        }, {
          "expression" : {
            "expression" : "any_value(c_float)"
          },
          "alias" : "c_float"
        }, {
          "expression" : {
            "expression" : "any_value(c_double)"
          },
          "alias" : "c_double"
        }, {
          "expression" : {
            "expression" : "any_value(c_string)"
          },
          "alias" : "c_string"
        }, {
          "expression" : {
            "expression" : "any_value(c_boolean)"
          },
          "alias" : "c_boolean"
        }, {
          "expression" : {
            "expression" : "any_value(c_macro)"
          },
          "alias" : "c_macro"
        }, {
          "expression" : {
            "expression" : "any_value(c_if)"
          },
          "alias" : "c_if"
        }, {
          "expression" : {
            "expression" : "any_value(cfor_col_0)"
          },
          "alias" : "cfor_col_0"
        }, {
          "expression" : {
            "expression" : "any_value(cfor_col_1)"
          },
          "alias" : "cfor_col_1"
        }, {
          "expression" : {
            "expression" : "any_value(cfor_col_2)"
          },
          "alias" : "cfor_col_2"
        }, {
          "expression" : {
            "expression" : "any_value(cfor_col_3)"
          },
          "alias" : "cfor_col_3"
        }, {
          "expression" : {
            "expression" : "any_value(cfor_col_4)"
          },
          "alias" : "cfor_col_4"
        }, {
          "expression" : {
            "expression" : "any_value(c_databricks_project_main)"
          },
          "alias" : "c_databricks_project_main"
        }, {
          "expression" : {
            "expression" : "any_value(c_base_project)"
          },
          "alias" : "c_base_project"
        }, {
          "expression" : {
            "expression" : "any_value(c_dbt_utils_functions)"
          },
          "alias" : "c_dbt_utils_functions"
        } ],
        "allowSelection" : true,
        "condition" : {
          "expression" : ""
        },
        "activeTab" : "aggregate",
        "columnsSelector" : [ ],
        "groupBy" : [ {
          "expression" : {
            "expression" : "c_boolean"
          }
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "aOg91JKA",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_bool_expr",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_concat_expr",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_add_expr",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "c_macro",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_if",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_0",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_2",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_3",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_4",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_databricks_project_main",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_base_project",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_dbt_utils_functions",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_use_config_expression",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_use_databricks_function",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_to_json",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "xkTGmy43",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_bool_expr",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_concat_expr",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_add_expr",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_macro",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_if",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_0",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_2",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_3",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cfor_col_4",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_databricks_project_main",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_base_project",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_dbt_utils_functions",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Limit_4_1##hp96M7T4" : {
      "id" : "Limit_4_1##hp96M7T4",
      "component" : "Limit",
      "metadata" : {
        "label" : "Limit_4_1",
        "x" : 1400,
        "y" : 4160,
        "phase" : 0
      },
      "properties" : {
        "limit" : {
          "expression" : "5"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "SuyaY1ba",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "xVSNxtte",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "model_with_only_seed_base##GxpLQniE" : {
      "id" : "model_with_only_seed_base##GxpLQniE",
      "component" : "Model",
      "metadata" : {
        "label" : "model_with_only_seed_base",
        "x" : 1400,
        "y" : 1960,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "model_with_only_seed_base",
          "sourceType" : "Model"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "LQmomZ89",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "country_code",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "country_label",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "code_1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "service_label_1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_macro2",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "1NraXu90VXy1ym-CYP0MT$$ahN2bn632JHu6jNmK0s76" : {
      "id" : "1NraXu90VXy1ym-CYP0MT$$ahN2bn632JHu6jNmK0s76",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_3_1_1",
        "slug" : "SQLStatement_3_1_1",
        "x" : -260,
        "y" : 60,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT * FROM SQLStatement_1_4"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "ECrOw7SuatDdwzXjGadKH$$nnBY3E649f4zcEfVkch0W",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "SQLStatement_1_4"
        } ],
        "outputs" : [ {
          "id" : "5CMNLU9QQVrWTJmf7YnBT$$oYzHRfdWTP9bXBu6IXgdh",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "all_type_partitioned##F3f0AZjC" : {
      "id" : "all_type_partitioned##F3f0AZjC",
      "component" : "Source",
      "metadata" : {
        "label" : "all_type_partitioned",
        "x" : 680,
        "y" : 4060,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "all_type_partitioned",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "c85vCaDW",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatement_1_1##MJyK7YWK" : {
      "id" : "SQLStatement_1_1##MJyK7YWK",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_1_1",
        "x" : 1040,
        "y" : 2360,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  substr(w_warehouse_name, 1, 20),\n  sm_type,\n  cc_name,\n  sum(CASE\n    WHEN (cs_ship_date_sk - cs_sold_date_sk <= 30)\n      THEN 1\n    ELSE 0\n  END) AS days_30,\n  sum(\n    CASE\n      WHEN (cs_ship_date_sk - cs_sold_date_sk > 30) and (cs_ship_date_sk - cs_sold_date_sk <= 60)\n        THEN 1\n      ELSE 0\n    END) AS days_31_60,\n  sum(\n    CASE\n      WHEN (cs_ship_date_sk - cs_sold_date_sk > 60) and (cs_ship_date_sk - cs_sold_date_sk <= 90)\n        THEN 1\n      ELSE 0\n    END) AS days_61_90,\n  sum(\n    CASE\n      WHEN (cs_ship_date_sk - cs_sold_date_sk > 90) and (cs_ship_date_sk - cs_sold_date_sk <= 120)\n        THEN 1\n      ELSE 0\n    END) AS days_90_120,\n  sum(CASE\n    WHEN (cs_ship_date_sk - cs_sold_date_sk > 120)\n      THEN 1\n    ELSE 0\n  END) AS days_more_than_120\n\nFROM hive_metastore.qa_database.catalog_sales, hive_metastore.qa_database.warehouse, hive_metastore.qa_database.ship_mode, hive_metastore.qa_database.call_center, hive_metastore.qa_database.date_dim\n\nWHERE d_month_seq BETWEEN 1200\n      and 1200 + 11\n      and cs_ship_date_sk = d_date_sk\n      and cs_warehouse_sk = w_warehouse_sk\n      and cs_ship_mode_sk = sm_ship_mode_sk\n      and cs_call_center_sk = cc_call_center_sk\n\nGROUP BY \n  substr(w_warehouse_name, 1, 20), sm_type, cc_name\n\nORDER BY substr(w_warehouse_name, 1, 20), sm_type, cc_name\n\nLIMIT 100\n"
        } ]
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "q5yxoy3Y",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "substr(w_warehouse_name, 1, 20)",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "sm_type",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cc_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "days_30",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "days_31_60",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "days_61_90",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "days_90_120",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "days_more_than_120",
              "dataType" : {
                "type" : "Bigint"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "all_type_parquet##lwMehyur" : {
      "id" : "all_type_parquet##lwMehyur",
      "component" : "Source",
      "metadata" : {
        "label" : "all_type_parquet",
        "x" : 680,
        "y" : 300,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "all_type_parquet",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "ilYjUTr3",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "f0k1aV1_vFJpxY8ixbEYO$$xnFHECv3nLd4FiKcRpyDf" : {
      "id" : "f0k1aV1_vFJpxY8ixbEYO$$xnFHECv3nLd4FiKcRpyDf",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_3_2",
        "slug" : "SQLStatement_3_2",
        "x" : -60,
        "y" : 60,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT * FROM SQLStatement_3_1_1 WHERE c_smallint > 10"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "o07H8q7ux7ys119IFGz-r$$HcpkeyfWeStvJNCDayKNy",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "SQLStatement_3_1_1"
        } ],
        "outputs" : [ {
          "id" : "oVBdsqFnH_cN_ZDa7V97B$$ecrt3SKXs_EKsfBNZX7As",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatement_1_2##RIyxZJgF" : {
      "id" : "SQLStatement_1_2##RIyxZJgF",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_1_2",
        "x" : 1400,
        "y" : 700,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT cast(ANY (col1) FILTER (  \n         WHERE col2 = 1\n       ) AS string) AS c1\n\nFROM VALUES\n      (false, 1),\n      (false, 2),\n      (true, 2),\n      (NULL, 1) AS tab(col1, col2)\n\nUNION\n\nSELECT cast(ANY (col) AS string) AS c1\n\nFROM VALUES\n      (true),\n      (false),\n      (false) AS tab(col)\n\nUNION\n\nSELECT CAST(approx_count_distinct(col1) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2),\n      (2),\n      (3) AS tab(col1)\n\nUNION\n\nSELECT cast(approx_count_distinct(col1) FILTER (  \n         WHERE col2 = 10\n       ) AS string) AS c1\n\nFROM VALUES\n      (1, 10),\n      (1, 10),\n      (2, 10),\n      (2, 10),\n      (3, 10),\n      (1, 12) AS tab(col1, col2)\n\nUNION\n\nSELECT CAST(approx_percentile(col, array(0.5, 0.4, 0.1), 100) AS string) AS c1\n\nFROM VALUES\n      (0),\n      (1),\n      (2),\n      (10) AS tab(col)\n\nUNION\n\nSELECT CAST(approx_percentile(DISTINCT col, 0.5, 100) AS string) AS c1\n\nFROM VALUES\n      (0),\n      (6),\n      (6),\n      (7),\n      (9),\n      (10) AS tab(col)\n\nUNION\n\nSELECT CAST(array_agg(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (NULL),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(array_agg(DISTINCT col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (NULL),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(avg(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(try_avg(col) AS string) AS c1\n\nFROM VALUES\n      (10),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(bit_and(col) AS string) AS c1\n\nFROM VALUES\n      (3),\n      (5) AS tab(col)\n\nUNION\n\nSELECT cast(bit_and(col) FILTER (  \n         WHERE col < 6\n       ) AS string) AS c1\n\nFROM VALUES\n      (3),\n      (5),\n      (6) AS tab(col)\n\nUNION\n\nSELECT CAST(bit_or(col) AS string) AS c1\n\nFROM VALUES\n      (3),\n      (5) AS tab(col)\n\nUNION\n\nSELECT cast(bit_or(col) FILTER (  \n         WHERE col < 8\n       ) AS string) AS c1\n\nFROM VALUES\n      (3),\n      (5),\n      (8) AS tab(col)\n\nUNION\n\nSELECT CAST(bit_xor(col) AS string) AS c1\n\nFROM VALUES\n      (3),\n      (3),\n      (5) AS tab(col)\n\nUNION\n\nSELECT CAST(bool_and(col) AS string) AS c1\n\nFROM VALUES\n      (true),\n      (true),\n      (true) AS tab(col)\n\nUNION\n\nSELECT CAST(bool_or(col) AS string) AS c1\n\nFROM VALUES\n      (true),\n      (false),\n      (false) AS tab(col)\n\nUNION\n\nSELECT CAST(collect_list(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (NULL),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(collect_set(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (NULL),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(corr(c1, c2) AS string) AS c1\n\nFROM VALUES\n      (3, 2),\n      (3, 3),\n      (3, 3),\n      (6, 4) AS tab(c1, c2)\n\nUNION\n\nSELECT cast(corr(DISTINCT c1, c2) FILTER (  \n         WHERE c1 != c2\n       ) AS string) AS c1\n\nFROM VALUES\n      (3, 2),\n      (3, 3),\n      (3, 3),\n      (6, 4) AS tab(c1, c2)\n\nUNION\n\nSELECT CAST(count(*) AS string) AS c1\n\nFROM VALUES\n      (NULL),\n      (5),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(count(*) AS string) AS c1\n\nFROM VALUES\n      (NULL),\n      (5),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT cast(count(col) FILTER (  \n         WHERE col < 10\n       ) AS string) AS c1\n\nFROM VALUES\n      (NULL),\n      (5),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(count_if(\n         col % 2 = 0) AS string) AS c1\n\nFROM VALUES\n      (NULL),\n      (0),\n      (1),\n      (2),\n      (2),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(covar_pop(c1, c2) AS string) AS c1\n\nFROM VALUES\n      (1, 1),\n      (2, 2),\n      (2, 2),\n      (3, 3) AS tab(c1, c2)\n\nUNION\n\nSELECT CAST(covar_samp(c1, c2) AS string) AS c1\n\nFROM VALUES\n      (1, 1),\n      (2, 2),\n      (2, 2),\n      (3, 3) AS tab(c1, c2)\n\nUNION\n\nSELECT CAST(every(col) AS string) AS c1\n\nFROM VALUES\n      (true),\n      (true),\n      (true) AS tab(col)\n\nUNION\n\nSELECT CAST(first(col, true) AS string) AS c1\n\nFROM VALUES\n      (NULL),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(first_value(col) AS string) AS c1\n\nFROM VALUES\n      (10),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(kurtosis(col) AS string) AS c1\n\nFROM VALUES\n      (-10),\n      (-20),\n      (100),\n      (100),\n      (1000) AS tab(col)\n\nUNION\n\nSELECT CAST(last(col) AS string) AS c1\n\nFROM VALUES\n      (10),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(last_value(col) AS string) AS c1\n\nFROM VALUES\n      (10),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(max(col) AS string) AS c1\n\nFROM VALUES\n      (10),\n      (50),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(max_by(x, y) AS string) AS c1\n\nFROM VALUES\n      (('a', 10)),\n      (('b', 50)),\n      (('c', 20)) AS tab(x, y)\n\nUNION\n\nSELECT CAST(mean(DISTINCT col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2),\n      (NULL) AS tab(col)\n\nUNION\n\nSELECT CAST(min(col) AS string) AS c1\n\nFROM VALUES\n      (10),\n      (50),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(min_by(x, y) AS string) AS c1\n\nFROM VALUES\n      (('a', 10)),\n      (('b', 50)),\n      (('c', 20)) AS tab(x, y)\n\nUNION\n\nSELECT CAST(percentile(col, 0.3) AS string) AS c1\n\nFROM VALUES\n      (0),\n      (10),\n      (10) AS tab(col)\n\nUNION\n\nSELECT CAST(percentile_approx(col, 0.5, 100) AS string) AS c1\n\nFROM VALUES\n      (0),\n      (6),\n      (7),\n      (9),\n      (10),\n      (10),\n      (10) AS tab(col)\n\nUNION\n\nSELECT CAST(regr_avgx(y, x) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_avgy(y, x) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_count(y, x) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 2),\n      (2, 3),\n      (2, 4) AS t(y, x)\n\nUNION\n\nSELECT CAST(regr_r2(y, x) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(skewness(col) AS string) AS c1\n\nFROM VALUES\n      (-10),\n      (-20),\n      (100),\n      (1000),\n      (1000) AS tab(col)\n\nUNION\n\nSELECT CAST(some(col) AS string) AS c1\n\nFROM VALUES\n      (true),\n      (false),\n      (false) AS tab(col)\n\nUNION\n\nSELECT CAST(std(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(stddev(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(stddev_pop(DISTINCT col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(stddev_samp(DISTINCT col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(sum(col) AS string) AS c1\n\nFROM VALUES\n      (NULL),\n      (NULL) AS tab(col)\n\nUNION\n\nSELECT CAST(try_avg(DISTINCT col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2) AS tab(col)\n\nUNION\n\nSELECT CAST(try_sum(col) AS string) AS c1\n\nFROM VALUES\n      (NULL),\n      (10),\n      (15) AS tab(col)\n\nUNION\n\nSELECT CAST(var_pop(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(var_samp(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(variance(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(a AS string) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    dense_rank() OVER (PARTITION BY a ORDER BY b),\n    rank() OVER (PARTITION BY a ORDER BY b),\n    row_number() OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS string) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    ntile(2) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS string) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    percent_rank(b) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A1', 3),\n        ('A1', 6),\n        ('A1', 7),\n        ('A1', 7),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS string) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    dense_rank() OVER (PARTITION BY a ORDER BY b),\n    rank() OVER (PARTITION BY a ORDER BY b),\n    row_number() OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS string) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    cume_dist() OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS string) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    lag(b) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS string) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    lead(b) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS string) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    nth_value(b, 2) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(num AS string) AS c1\n\nFROM (\n  SELECT \n    explode(map(1, 'a', 2, 'b')) AS (num, val),\n    'Spark'\n)\n\nUNION\n\nSELECT CAST(elem AS string) AS c1\n\nFROM (\n  SELECT \n    explode_outer(array(10, 20)) AS elem,\n    'Spark'\n)\n\nUNION\n\nSELECT CAST(name AS string) AS c1\n\nFROM (\n  SELECT \n    name,\n    age,\n    count(*)\n  \n  FROM VALUES\n        (2, 'Alice'),\n        (5, 'Bob') AS people(age, name)\n  \n  GROUP BY CUBE(name, age)\n)\n\nUNION\n\nSELECT CAST(name AS string) AS c1\n\nFROM (\n  SELECT \n    name,\n    grouping(name),\n    sum(age)\n  \n  FROM VALUES\n        (2, 'Alice'),\n        (5, 'Bob') AS people(age, name)\n  \n  GROUP BY CUBE(name)\n)\n\nUNION\n\nSELECT CAST(name AS string) AS c1\n\nFROM (\n  SELECT \n    name,\n    age,\n    grouping_id(name, age),\n    conv(CAST(grouping_id(name, age) AS STRING), 10, 2),\n    avg(height)\n  \n  FROM VALUES\n        (2, 'Alice', 165),\n        (5, 'Bob', 180) AS people(age, name, height)\n  \n  GROUP BY CUBE(name, age)\n)\n\nUNION\n\nSELECT CAST(col1 AS string) AS c1\n\nFROM (\n  SELECT \n    'hello' AS col1,\n    stack(2, 1, 2, 3) AS (first, second),\n    'world'\n)\n\nUNION\n\nSELECT CAST(any_value(col) AS string) AS c1\n\nFROM VALUES\n      (10),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(approx_top_k(expr) AS string) AS c1\n\nFROM VALUES\n      (0),\n      (0),\n      (1),\n      (1),\n      (2),\n      (3),\n      (4),\n      (4) AS tab(expr)\n\nUNION\n\nSELECT CAST(hll_sketch_estimate(hll_sketch_agg(col, 12)) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2),\n      (2),\n      (3) AS tab(col)\n\nUNION\n\n-- SELECT CAST(a AS string) AS c1\n-- FROM (\n--   SELECT hll_sketch_estimate(hll_union(hll_sketch_agg(col1, 4), hll_sketch_agg(col2, 21))) AS a\n--   FROM VALUES\n--         (1, 4),\n--         (1, 4),\n--         (2, 5),\n--         (2, 5),\n--         (3, 6) AS tab(col1, col2)\n-- )\n-- UNION\nSELECT CAST(median(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (2),\n      (3),\n      (4),\n      (NULL) AS tab(col)\n\nUNION\n\nSELECT CAST(regr_intercept(y, x) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_slope(y, x) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(typeof(regr_sxx(y, x)) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_sxy(y, x) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_syy(y, x) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(mode(col) AS string) AS c1\n\nFROM VALUES\n      (array(1, 2)),\n      (array(1, 2)),\n      (array(2, 3)) AS tab(col)\n\nUNION\n\nSELECT CAST(approx_top_k(expr, 10, 100) AS string) AS c1\n\nFROM VALUES\n      (0),\n      (1),\n      (1),\n      (2),\n      (2),\n      (2) AS tab(expr)\n\nUNION\n\nSELECT CAST(hll_sketch_estimate(hll_sketch_agg(col, 12)) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2),\n      (2),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(hll_sketch_estimate(hll_union_agg(sketch, true)) AS string) AS c1\n\nFROM (\n  SELECT hll_sketch_agg(col) AS sketch\n  \n  FROM VALUES\n        (1) AS tab(col)\n  \n  UNION ALL\n  \n  SELECT hll_sketch_agg(col, 20) AS sketch\n  \n  FROM VALUES\n        (1) AS tab(col)\n)\n\nUNION\n\nSELECT CAST(hex(TRIM(TRAILING x'00' FROM bitmap_construct_agg(val))) AS string) AS c1\n\nFROM VALUES\n      (0) AS T(val)\n\nUNION\n\nSELECT CAST(num_distinct AS string) AS c1\n\nFROM (\n  SELECT sum(num_distinct) AS num_distinct\n  \n  FROM (\n    SELECT \n      bitmap_bucket_number(val),\n      bitmap_count(bitmap_construct_agg(bitmap_bit_position(val)))\n    \n    FROM VALUES\n          (1),\n          (2),\n          (1),\n          (-1),\n          (5),\n          (0),\n          (5) AS t(val)\n    \n    GROUP BY ALL  \n  ) AS distinct_vals_by_bucket(bucket, num_distinct)\n)\n\nUNION\n\nSELECT CAST(hex(count_min_sketch(column => col, confidence => 0.5d, epsilon => 0.5d, seed => 1)) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(num_distinct AS string) AS c1\n\nFROM (\n  SELECT sum(num_distinct) AS num_distinct\n  \n  FROM (\n    SELECT \n      bucket,\n      bitmap_count(bitmap_or_agg(num_distinct)) AS num_distinct\n    \n    FROM (\n      (SELECT \n        bitmap_bucket_number(val) AS bucket,\n        bitmap_construct_agg(bitmap_bit_position(val)) AS num_distinct\n      \n      FROM VALUES\n            (1),\n            (2),\n            (1),\n            (-1),\n            (5),\n            (0),\n            (5) AS t(val)\n      \n      GROUP BY ALL)\n      \n      UNION ALL\n      \n      (SELECT \n        bitmap_bucket_number(val) AS bucket,\n        bitmap_construct_agg(bitmap_bit_position(val)) AS num_distinct\n      \n      FROM VALUES\n            (3),\n            (1),\n            (-1),\n            (6),\n            (5),\n            (1),\n            (5),\n            (8) AS t(val)\n      \n      GROUP BY ALL)\n    )\n    \n    GROUP BY ALL  \n  )\n)\n"
        } ]
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "s64hjpvb",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SQLStatement_1##jwlMFSCm" : {
      "id" : "SQLStatement_1##jwlMFSCm",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_1",
        "x" : 1040,
        "y" : 4060,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT *\n\nFROM all_type_partitioned\n\nWHERE c_int != (\n        SELECT count(*)\n        \n        FROM hive_metastore.qa_database.tpcds_uitesting_shared_1\n       )\n\nLIMIT 100\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "E50iwdAV",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Double"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "all_type_partitioned"
        } ],
        "outputs" : [ {
          "id" : "dYvQ1Hez",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "ZCfsndMhaytWYpv2UzsYW$$i7IAGLLHxmEY1__p4zkDh" : {
      "id" : "ZCfsndMhaytWYpv2UzsYW$$i7IAGLLHxmEY1__p4zkDh",
      "component" : "Reformat",
      "metadata" : {
        "label" : "employees",
        "slug" : "employees",
        "x" : 500,
        "y" : -380,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ "KucpMY1Uq0qUiO8iEloLg$$eDiNN5UKB_S7KLr5keo3z##c_int", "KucpMY1Uq0qUiO8iEloLg$$eDiNN5UKB_S7KLr5keo3z##c_string" ],
        "expressions" : [ {
          "expression" : {
            "expression" : "c_int*2"
          },
          "alias" : "employee_ID"
        }, {
          "expression" : {
            "expression" : "c_string"
          },
          "alias" : "last_name"
        }, {
          "expression" : {
            "expression" : "concat(c_string, c_string)"
          },
          "alias" : "first_name"
        }, {
          "expression" : {
            "expression" : "c_int*2"
          },
          "alias" : "department_ID"
        }, {
          "expression" : {
            "expression" : "array('p1', 'p2')"
          },
          "alias" : "project_names"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "KucpMY1Uq0qUiO8iEloLg$$eDiNN5UKB_S7KLr5keo3z",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "JiOa7X8BotUzbssnuxi7c$$1Y8tEzU7XRPCQBKs98EOE",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "employee_ID",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "department_ID",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "project_names",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "qa_complex_macro_1##Lpp5HwrM" : {
      "id" : "qa_complex_macro_1##Lpp5HwrM",
      "component" : "Macro",
      "metadata" : {
        "label" : "qa_complex_macro_1",
        "x" : 680,
        "y" : 1760,
        "phase" : 0,
        "macroDependencies" : [ "SQL_DatabricksParentProjectMain.qa_complex_macro" ]
      },
      "properties" : {
        "macroName" : "qa_complex_macro",
        "parameters" : [ {
          "name" : "model",
          "value" : "'raw_customers'"
        }, {
          "name" : "column_name_int",
          "value" : "'id'"
        }, {
          "name" : "accepted_values",
          "value" : "[1, 2, 3, 4, 5]"
        } ],
        "projectName" : "SQL_DatabricksParentProjectMain"
      },
      "ports" : {
        "inputs" : [ {
          "id" : "oDlSHpjt",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "id",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "raw_customers"
        } ],
        "outputs" : [ {
          "id" : "Xbo8qlXW",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "col_int",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "zSm6B_o4_AB_i3lQgylua$$FsWyRroFx1UyX1sM5vcfg" : {
      "id" : "zSm6B_o4_AB_i3lQgylua$$FsWyRroFx1UyX1sM5vcfg",
      "component" : "Reformat",
      "metadata" : {
        "label" : "departments",
        "slug" : "departments",
        "x" : 560,
        "y" : -40,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ "gMMlP1InsymdDbb3v5NYT$$hagMr7VK14aXOmbvQQ4j8##c_int", "gMMlP1InsymdDbb3v5NYT$$hagMr7VK14aXOmbvQQ4j8##c_string" ],
        "expressions" : [ {
          "alias" : "department_ID",
          "expression" : {
            "expression" : "c_int*2"
          }
        }, {
          "alias" : "department_name",
          "expression" : {
            "expression" : "c_string"
          }
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "gMMlP1InsymdDbb3v5NYT$$hagMr7VK14aXOmbvQQ4j8",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "B9NeKX9Qb51YQa8C1-ZVd$$2couGb5-xe6sTPk4qeZKH",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "department_ID",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "department_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "env_uitesting_shared_useallmodel_1##K7nUaggS" : {
      "id" : "env_uitesting_shared_useallmodel_1##K7nUaggS",
      "component" : "TargetModel",
      "metadata" : {
        "label" : "env_uitesting_shared_useallmodel_1",
        "x" : 2720,
        "y" : 1760,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "customQueryDisabled" : true,
        "customQuery" : false,
        "incrementalEditorDisabled" : false,
        "query" : "SELECT * \n\nFROM combine_multiple_tables_1\n\n{% if is_incremental() %}\n  WHERE \n    c_bigint > 10\n{% endif %}",
        "incrementalKey" : true,
        "incremental" : {
          "expression" : "c_bigint > 10"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "Vq5Cc9hh",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "combine_multiple_tables_1"
        } ],
        "outputs" : [ {
          "id" : "WXgWkTdj",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "SetOperation_2##dW4xwIho" : {
      "id" : "SetOperation_2##dW4xwIho",
      "component" : "SetOperation",
      "metadata" : {
        "label" : "SetOperation_2",
        "x" : 1980,
        "y" : 4100,
        "phase" : 0
      },
      "properties" : {
        "operationType" : "union",
        "preserveDuplicates" : false,
        "useMinus" : false,
        "inputAliases" : [ "in0", "in1" ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "Q1cRRy6y",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        }, {
          "id" : "uYIamlyQ",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in1"
        } ],
        "outputs" : [ {
          "id" : "hJHiNTgd",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Limit_2##ekcIMiZ5" : {
      "id" : "Limit_2##ekcIMiZ5",
      "component" : "Limit",
      "metadata" : {
        "label" : "Limit_2",
        "x" : 2180,
        "y" : 500,
        "phase" : 0
      },
      "properties" : {
        "limit" : {
          "expression" : "25"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "mFzdmMJg",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "BviBYCZp",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "yWqyHE3vULF-kgbcyWxi3$$ozRGF9r-CNY7l0CsfL5TM" : {
      "id" : "yWqyHE3vULF-kgbcyWxi3$$ozRGF9r-CNY7l0CsfL5TM",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "pvt2",
        "slug" : "pvt2",
        "x" : 800,
        "y" : 80,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT d.department_ID as c1\n    FROM departments AS d INNER JOIN LATERAL (SELECT * FROM employees AS e WHERE e.department_ID = d.department_ID) AS iv2\n    ORDER BY employee_ID"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "vwQhYMvHlgKv3lhLinGvM$$k0OyC-p750xIqG23GQgOa",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "employee_ID",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "department_ID",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "project_names",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            } ]
          },
          "slug" : "employees"
        }, {
          "id" : "NmQbM4yZRnrKeRO3RRipy$$OUAbmtQeErWYdQshX4l6p",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "department_ID",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "department_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "departments"
        }, {
          "id" : "fyieseuUKIkEcQI8aZ05k$$APpdw8yTNumon1ISB3Hvi",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "string_value",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "SQLStatement_6",
              "dataType" : {
                "type" : "Bigint"
              }
            } ]
          },
          "slug" : "SQLStatement_4_2"
        } ],
        "outputs" : [ {
          "id" : "3CM1alyGrNThKH72oITot$$EpKQW0qTxvDxgbADNx7iq",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Join_3##ETdbPKmj" : {
      "id" : "Join_3##ETdbPKmj",
      "component" : "Join",
      "metadata" : {
        "label" : "Join_3",
        "x" : 1680,
        "y" : 2580,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "conditions" : [ {
          "alias" : "in1",
          "expression" : {
            "expression" : "in0.country_code != in1.p_string"
          },
          "joinType" : "INNER"
        }, {
          "alias" : "in2",
          "expression" : {
            "expression" : "in1.p_string != in2.sm_type"
          },
          "joinType" : "LEFT"
        }, {
          "alias" : "in3",
          "expression" : {
            "expression" : "in2.sm_type != in3.p_string"
          },
          "joinType" : "RIGHT"
        }, {
          "alias" : "in4",
          "expression" : {
            "expression" : "in3.p_string != CAST(in4.IB_INCOME_BAND_SK AS string)"
          },
          "joinType" : "SEMI"
        } ],
        "expressions" : [ {
          "expression" : {
            "expression" : "in1.p_int"
          },
          "alias" : "p_int"
        }, {
          "expression" : {
            "expression" : "in1.p_string"
          },
          "alias" : "p_string"
        }, {
          "expression" : {
            "expression" : "in1.c_string"
          },
          "alias" : "c_string"
        }, {
          "expression" : {
            "expression" : "in1.c_int"
          },
          "alias" : "c_int"
        }, {
          "expression" : {
            "expression" : "in1.c_bigint"
          },
          "alias" : "c_bigint"
        }, {
          "expression" : {
            "expression" : "in1.c_smallint"
          },
          "alias" : "c_smallint"
        }, {
          "expression" : {
            "expression" : "in1.c_tinyint"
          },
          "alias" : "c_tinyint"
        }, {
          "expression" : {
            "expression" : "in1.c_float"
          },
          "alias" : "c_float"
        }, {
          "expression" : {
            "expression" : "in1.c_boolean"
          },
          "alias" : "c_boolean"
        }, {
          "expression" : {
            "expression" : "in1.c_array"
          },
          "alias" : "c_array"
        }, {
          "expression" : {
            "expression" : "in1.c_double"
          },
          "alias" : "c_double"
        }, {
          "expression" : {
            "expression" : "in1.c_struct"
          },
          "alias" : "c_struct"
        }, {
          "expression" : {
            "expression" : "in1.c_struct.city"
          },
          "alias" : "c_struct_city"
        }, {
          "expression" : {
            "expression" : "in1.c_struct.state"
          },
          "alias" : "c_struct_state"
        }, {
          "expression" : {
            "expression" : "in1.c_struct.pin"
          },
          "alias" : "c_struct_pin"
        } ],
        "activeTab" : "conditions",
        "columnsSelector" : [ "sMzEAFmO##country_code" ],
        "headAlias" : "in0"
      },
      "ports" : {
        "inputs" : [ {
          "id" : "sMzEAFmO",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "country_code",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "country_label",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "code_1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "service_label_1",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_macro2",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        }, {
          "id" : "bIp0j6rS",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "c_id",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "in1"
        }, {
          "id" : "OrUSthAG",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "substrw_warehouse_name120",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "sm_type",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "cc_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "days_30",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "days_31_60",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "days_61_90",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "days_90_120",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "days_more_than_120",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "i_item_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "h8_30_to_9",
              "dataType" : {
                "type" : "Bigint"
              }
            } ]
          },
          "slug" : "in2"
        }, {
          "id" : "r8QvGEUU",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in3"
        }, {
          "id" : "Faggny9K",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "IB_INCOME_BAND_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "IB_LOWER_BOUND",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "IB_UPPER_BOUND",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "in4"
        } ],
        "outputs" : [ {
          "id" : "EqLq0w8e",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "c_struct_city",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_struct_state",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_struct_pin",
              "dataType" : {
                "type" : "Bigint"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Tkk8wxQknKN8zZDBOxfbQ$$SBgC6geH0WTyM3DXu7YuY" : {
      "id" : "Tkk8wxQknKN8zZDBOxfbQ$$SBgC6geH0WTyM3DXu7YuY",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_1_3",
        "slug" : "SQLStatement_1_3",
        "x" : 680,
        "y" : 1560,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT cast(ANY (col1) FILTER (  \n         WHERE col2 = 1\n       ) AS string) AS c1\n\nFROM VALUES\n      (false, 1),\n      (false, 2),\n      (true, 2),\n      (NULL, 1) AS tab(col1, col2)\n\nUNION\n\nSELECT cast(ANY (col) AS string) AS c1\n\nFROM VALUES\n      (true),\n      (false),\n      (false) AS tab(col)\n\nUNION\n\nSELECT CAST(approx_count_distinct(col1) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2),\n      (2),\n      (3) AS tab(col1)\n\nUNION\n\nSELECT cast(approx_count_distinct(col1) FILTER (  \n         WHERE col2 = 10\n       ) AS string) AS c1\n\nFROM VALUES\n      (1, 10),\n      (1, 10),\n      (2, 10),\n      (2, 10),\n      (3, 10),\n      (1, 12) AS tab(col1, col2)\n\nUNION\n\nSELECT CAST(approx_percentile(col, array(0.5, 0.4, 0.1), 100) AS string) AS c1\n\nFROM VALUES\n      (0),\n      (1),\n      (2),\n      (10) AS tab(col)\n\nUNION\n\nSELECT CAST(approx_percentile(DISTINCT col, 0.5, 100) AS string) AS c1\n\nFROM VALUES\n      (0),\n      (6),\n      (6),\n      (7),\n      (9),\n      (10) AS tab(col)\n\nUNION\n\nSELECT CAST(array_agg(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (NULL),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(array_agg(DISTINCT col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (NULL),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(avg(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(try_avg(col) AS string) AS c1\n\nFROM VALUES\n      (10),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(bit_and(col) AS string) AS c1\n\nFROM VALUES\n      (3),\n      (5) AS tab(col)\n\nUNION\n\nSELECT cast(bit_and(col) FILTER (  \n         WHERE col < 6\n       ) AS string) AS c1\n\nFROM VALUES\n      (3),\n      (5),\n      (6) AS tab(col)\n\nUNION\n\nSELECT CAST(bit_or(col) AS string) AS c1\n\nFROM VALUES\n      (3),\n      (5) AS tab(col)\n\nUNION\n\nSELECT cast(bit_or(col) FILTER (  \n         WHERE col < 8\n       ) AS string) AS c1\n\nFROM VALUES\n      (3),\n      (5),\n      (8) AS tab(col)\n\nUNION\n\nSELECT CAST(bit_xor(col) AS string) AS c1\n\nFROM VALUES\n      (3),\n      (3),\n      (5) AS tab(col)\n\nUNION\n\nSELECT CAST(bool_and(col) AS string) AS c1\n\nFROM VALUES\n      (true),\n      (true),\n      (true) AS tab(col)\n\nUNION\n\nSELECT CAST(bool_or(col) AS string) AS c1\n\nFROM VALUES\n      (true),\n      (false),\n      (false) AS tab(col)\n\nUNION\n\nSELECT CAST(collect_list(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (NULL),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(collect_set(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (NULL),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(corr(c1, c2) AS string) AS c1\n\nFROM VALUES\n      (3, 2),\n      (3, 3),\n      (3, 3),\n      (6, 4) AS tab(c1, c2)\n\nUNION\n\nSELECT cast(corr(DISTINCT c1, c2) FILTER (  \n         WHERE c1 != c2\n       ) AS string) AS c1\n\nFROM VALUES\n      (3, 2),\n      (3, 3),\n      (3, 3),\n      (6, 4) AS tab(c1, c2)\n\nUNION\n\nSELECT CAST(count(*) AS string) AS c1\n\nFROM VALUES\n      (NULL),\n      (5),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(count(*) AS string) AS c1\n\nFROM VALUES\n      (NULL),\n      (5),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT cast(count(col) FILTER (  \n         WHERE col < 10\n       ) AS string) AS c1\n\nFROM VALUES\n      (NULL),\n      (5),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(count_if(\n         col % 2 = 0) AS string) AS c1\n\nFROM VALUES\n      (NULL),\n      (0),\n      (1),\n      (2),\n      (2),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(covar_pop(c1, c2) AS string) AS c1\n\nFROM VALUES\n      (1, 1),\n      (2, 2),\n      (2, 2),\n      (3, 3) AS tab(c1, c2)\n\nUNION\n\nSELECT CAST(covar_samp(c1, c2) AS string) AS c1\n\nFROM VALUES\n      (1, 1),\n      (2, 2),\n      (2, 2),\n      (3, 3) AS tab(c1, c2)\n\nUNION\n\nSELECT CAST(every(col) AS string) AS c1\n\nFROM VALUES\n      (true),\n      (true),\n      (true) AS tab(col)\n\nUNION\n\nSELECT CAST(first(col, true) AS string) AS c1\n\nFROM VALUES\n      (NULL),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(first_value(col) AS string) AS c1\n\nFROM VALUES\n      (10),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(kurtosis(col) AS string) AS c1\n\nFROM VALUES\n      (-10),\n      (-20),\n      (100),\n      (100),\n      (1000) AS tab(col)\n\nUNION\n\nSELECT CAST(last(col) AS string) AS c1\n\nFROM VALUES\n      (10),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(last_value(col) AS string) AS c1\n\nFROM VALUES\n      (10),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(max(col) AS string) AS c1\n\nFROM VALUES\n      (10),\n      (50),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(max_by(x, y) AS string) AS c1\n\nFROM VALUES\n      (('a', 10)),\n      (('b', 50)),\n      (('c', 20)) AS tab(x, y)\n\nUNION\n\nSELECT CAST(mean(DISTINCT col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2),\n      (NULL) AS tab(col)\n\nUNION\n\nSELECT CAST(min(col) AS string) AS c1\n\nFROM VALUES\n      (10),\n      (50),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(min_by(x, y) AS string) AS c1\n\nFROM VALUES\n      (('a', 10)),\n      (('b', 50)),\n      (('c', 20)) AS tab(x, y)\n\nUNION\n\nSELECT CAST(percentile(col, 0.3) AS string) AS c1\n\nFROM VALUES\n      (0),\n      (10),\n      (10) AS tab(col)\n\nUNION\n\nSELECT CAST(percentile_approx(col, 0.5, 100) AS string) AS c1\n\nFROM VALUES\n      (0),\n      (6),\n      (7),\n      (9),\n      (10),\n      (10),\n      (10) AS tab(col)\n\nUNION\n\nSELECT CAST(regr_avgx(y, x) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_avgy(y, x) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_count(y, x) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 2),\n      (2, 3),\n      (2, 4) AS t(y, x)\n\nUNION\n\nSELECT CAST(regr_r2(y, x) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(skewness(col) AS string) AS c1\n\nFROM VALUES\n      (-10),\n      (-20),\n      (100),\n      (1000),\n      (1000) AS tab(col)\n\nUNION\n\nSELECT CAST(some(col) AS string) AS c1\n\nFROM VALUES\n      (true),\n      (false),\n      (false) AS tab(col)\n\nUNION\n\nSELECT CAST(std(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(stddev(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(stddev_pop(DISTINCT col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(stddev_samp(DISTINCT col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(sum(col) AS string) AS c1\n\nFROM VALUES\n      (NULL),\n      (NULL) AS tab(col)\n\nUNION\n\nSELECT CAST(try_avg(DISTINCT col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2) AS tab(col)\n\nUNION\n\nSELECT CAST(try_sum(col) AS string) AS c1\n\nFROM VALUES\n      (NULL),\n      (10),\n      (15) AS tab(col)\n\nUNION\n\nSELECT CAST(var_pop(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(var_samp(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(variance(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(a AS string) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    dense_rank() OVER (PARTITION BY a ORDER BY b),\n    rank() OVER (PARTITION BY a ORDER BY b),\n    row_number() OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS string) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    ntile(2) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS string) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    percent_rank(b) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A1', 3),\n        ('A1', 6),\n        ('A1', 7),\n        ('A1', 7),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS string) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    dense_rank() OVER (PARTITION BY a ORDER BY b),\n    rank() OVER (PARTITION BY a ORDER BY b),\n    row_number() OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS string) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    cume_dist() OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS string) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    lag(b) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS string) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    lead(b) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS string) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    nth_value(b, 2) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(num AS string) AS c1\n\nFROM (\n  SELECT \n    explode(map(1, 'a', 2, 'b')) AS (num, val),\n    'Spark'\n)\n\nUNION\n\nSELECT CAST(elem AS string) AS c1\n\nFROM (\n  SELECT \n    explode_outer(array(10, 20)) AS elem,\n    'Spark'\n)\n\nUNION\n\nSELECT CAST(name AS string) AS c1\n\nFROM (\n  SELECT \n    name,\n    age,\n    count(*)\n  \n  FROM VALUES\n        (2, 'Alice'),\n        (5, 'Bob') AS people(age, name)\n  \n  GROUP BY CUBE(name, age)\n)\n\nUNION\n\nSELECT CAST(name AS string) AS c1\n\nFROM (\n  SELECT \n    name,\n    grouping(name),\n    sum(age)\n  \n  FROM VALUES\n        (2, 'Alice'),\n        (5, 'Bob') AS people(age, name)\n  \n  GROUP BY CUBE(name)\n)\n\nUNION\n\nSELECT CAST(name AS string) AS c1\n\nFROM (\n  SELECT \n    name,\n    age,\n    grouping_id(name, age),\n    conv(CAST(grouping_id(name, age) AS STRING), 10, 2),\n    avg(height)\n  \n  FROM VALUES\n        (2, 'Alice', 165),\n        (5, 'Bob', 180) AS people(age, name, height)\n  \n  GROUP BY CUBE(name, age)\n)\n\nUNION\n\nSELECT CAST(col1 AS string) AS c1\n\nFROM (\n  SELECT \n    'hello' AS col1,\n    stack(2, 1, 2, 3) AS (first, second),\n    'world'\n)\n\nUNION\n\nSELECT CAST(any_value(col) AS string) AS c1\n\nFROM VALUES\n      (10),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(approx_top_k(expr) AS string) AS c1\n\nFROM VALUES\n      (0),\n      (0),\n      (1),\n      (1),\n      (2),\n      (3),\n      (4),\n      (4) AS tab(expr)\n\nUNION\n\nSELECT CAST(hll_sketch_estimate(hll_sketch_agg(col, 12)) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2),\n      (2),\n      (3) AS tab(col)\n\nUNION\n\n-- SELECT CAST(a AS string) AS c1\n-- FROM (\n--   SELECT hll_sketch_estimate(hll_union(hll_sketch_agg(col1, 4), hll_sketch_agg(col2, 21))) AS a\n--   FROM VALUES\n--         (1, 4),\n--         (1, 4),\n--         (2, 5),\n--         (2, 5),\n--         (3, 6) AS tab(col1, col2)\n-- )\n-- UNION\nSELECT CAST(median(col) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (2),\n      (3),\n      (4),\n      (NULL) AS tab(col)\n\nUNION\n\nSELECT CAST(regr_intercept(y, x) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_slope(y, x) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(typeof(regr_sxx(y, x)) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_sxy(y, x) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_syy(y, x) AS string) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(mode(col) AS string) AS c1\n\nFROM VALUES\n      (array(1, 2)),\n      (array(1, 2)),\n      (array(2, 3)) AS tab(col)\n\nUNION\n\nSELECT CAST(approx_top_k(expr, 10, 100) AS string) AS c1\n\nFROM VALUES\n      (0),\n      (1),\n      (1),\n      (2),\n      (2),\n      (2) AS tab(expr)\n\nUNION\n\nSELECT CAST(hll_sketch_estimate(hll_sketch_agg(col, 12)) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2),\n      (2),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(hll_sketch_estimate(hll_union_agg(sketch, true)) AS string) AS c1\n\nFROM (\n  SELECT hll_sketch_agg(col) AS sketch\n  \n  FROM VALUES\n        (1) AS tab(col)\n  \n  UNION ALL\n  \n  SELECT hll_sketch_agg(col, 20) AS sketch\n  \n  FROM VALUES\n        (1) AS tab(col)\n)\n\nUNION\n\nSELECT CAST(hex(TRIM(TRAILING x'00' FROM bitmap_construct_agg(val))) AS string) AS c1\n\nFROM VALUES\n      (0) AS T(val)\n\nUNION\n\nSELECT CAST(num_distinct AS string) AS c1\n\nFROM (\n  SELECT sum(num_distinct) AS num_distinct\n  \n  FROM (\n    SELECT \n      bitmap_bucket_number(val),\n      bitmap_count(bitmap_construct_agg(bitmap_bit_position(val)))\n    \n    FROM VALUES\n          (1),\n          (2),\n          (1),\n          (-1),\n          (5),\n          (0),\n          (5) AS t(val)\n    \n    GROUP BY ALL  \n  ) AS distinct_vals_by_bucket(bucket, num_distinct)\n)\n\nUNION\n\nSELECT CAST(hex(count_min_sketch(column => col, confidence => 0.5d, epsilon => 0.5d, seed => 1)) AS string) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(num_distinct AS string) AS c1\n\nFROM (\n  SELECT sum(num_distinct) AS num_distinct\n  \n  FROM (\n    SELECT \n      bucket,\n      bitmap_count(bitmap_or_agg(num_distinct)) AS num_distinct\n    \n    FROM (\n      (SELECT \n        bitmap_bucket_number(val) AS bucket,\n        bitmap_construct_agg(bitmap_bit_position(val)) AS num_distinct\n      \n      FROM VALUES\n            (1),\n            (2),\n            (1),\n            (-1),\n            (5),\n            (0),\n            (5) AS t(val)\n      \n      GROUP BY ALL)\n      \n      UNION ALL\n      \n      (SELECT \n        bitmap_bucket_number(val) AS bucket,\n        bitmap_construct_agg(bitmap_bit_position(val)) AS num_distinct\n      \n      FROM VALUES\n            (3),\n            (1),\n            (-1),\n            (6),\n            (5),\n            (1),\n            (5),\n            (8) AS t(val)\n      \n      GROUP BY ALL)\n    )\n    \n    GROUP BY ALL  \n  )\n)\n"
        } ]
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "H6SeJ7TsjEsUVJc8gs4KS$$mk6ktrLZtAHPuXHeE4kxr",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Limit_3##NzlG2H7e" : {
      "id" : "Limit_3##NzlG2H7e",
      "component" : "Limit",
      "metadata" : {
        "label" : "Limit_3",
        "x" : 2180,
        "y" : 2600,
        "phase" : 0
      },
      "properties" : {
        "limit" : {
          "expression" : "10"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "sLVj5ub9",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "c_struct_city",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_struct_state",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_struct_pin",
              "dataType" : {
                "type" : "Bigint"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "KdzuNnPA",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "p_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "p_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            }, {
              "name" : "c_struct_city",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_struct_state",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_struct_pin",
              "dataType" : {
                "type" : "Bigint"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "EW82T_eUES-HDFSy0dAfr$$_zDs3aowckKO-p21rADGW" : {
      "id" : "EW82T_eUES-HDFSy0dAfr$$_zDs3aowckKO-p21rADGW",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "AllExSQL",
        "slug" : "AllExSQL",
        "x" : 420,
        "y" : 400,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "select \nCAST(customer_id AS int) > 5\n,CAST(customer_id AS int) != 0\n,first_name LIKE '%A%'\n,((1 & 1) == 1)\n,((2 | 2) == 2)\n,10 * CAST(customer_id AS int) == 20\n,last_name != first_name\n,(CAST(customer_id AS int) BETWEEN 10 and 20)\n,(array(10, 20, 30)[2] == 30)\n,(map(1, 'Hello', 2, 'World')[1] == 'Hello')\n,(10 ^ 20 == 50) as d7\n,(map('three', 3).four == NULL)\n,(named_struct('a', 5, 'b', 'Spark').a == 5) as d8\n,(1 = 2 and 1 == 2)\n,(1 >= 2 and 1 <= 2 and 1 != 3 or 2 > 4 or 4 < 5)\n,(\n      EXISTS (\n        array(1, NULL, 3),\n        \n        x -> x % 2 == 0\n      )\n    ) as col22\n,ilike('Spark', '_PARK') as d81\n,(named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\n,(1 IS DISTINCT FROM 5)\n,('invalid' IS false)\n,isnull(51)\n,('t' IS NOT true) as c46\n,(1 <=> '1')\n,(1 <> CAST(customer_id AS int))\n,(10 - 2 + 10 == 8)\n,(NOT true)\n,(false or true)\n,(2 % 0 == 0)\n,('Spark' || 'SQL' == 'SparkSQL')\n,(r'%SystemDrive%\\Users\\John' LIKE r'%System23Drive%\\\\Users%')\n,(r'%SystemDr12ive%\\Users\\John' RLIKE '%System23Drive%\\\\\\\\Users.*')\n,(regexp_like('%Syst2emDrive%\\\\Users\\\\John', '%SystemD545rive%\\\\\\\\Users.*'))\n,(2L / 2L == 10)\n,(~ 0 == -1)\n,(base64(aes_encrypt('Spark', 'abcdefghijklmnop')) == NULL)\n,(CAST(aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop') AS STRING) == NULL)\n,(ascii('234') == 234)\n,(base64('Spark SQL') == NULL)\n,(bin(13) == NULL)\n,(binary('Spark SQL') == NULL)\n,(btrim('abcaabaSparkSQLabcaaba', 'abc') != NULL)\n,(char(65) != NULL)\n,(char_length('Spark SQL ') == 10)\n,(character_length('Spark SQL ') == 10)\n,(concat(customer_id, 'hello') != NULL)\n,(concat_ws(',', 'Spark', array('S', 'Q', NULL, 'L'), NULL) != NULL)\n,contains('SparkSQL', 'Spork')\n,(crc32('Spark') > 0)\n,chr(65) != NULL\n,(3 ^ 5 == 6)\n,(hex(encode('Spark SQL', 'US-ASCII')) != NULL)\n,endswith('SparkSQL', 'SQL')\n,(find_in_set('ab', 'abc,b,ab,c,def') == 2)\n,(format_number(12332.123456, 4) == 2)\n,(format_number(12332.123456, '#.###') == 10)\n,(format_string('Hello World %d %s', 100, 'days') != NULL)\n,(hex('Spark SQL') != NULL)\n,(r'%SystemDrive%\\Users\\John' LIKE '%SystemDrive%\\\\\\\\Users%')\n,(initcap('sPark sql') != NULL)\n,(instr('SparkSQL', 'R') == 2)\n,(lcase('LowerCase') != NULL)\n,(LEFT('Spark SQL', 3) != NULL)\n,(length('Spark SQL ') > 20)\n,(levenshtein('kitten', 'sitting') > 10)\n,(locate('bar', 'abcbarbar') > 2) as col1201\n,(locate('bar', 'abcbarbar', 5) > 2) as col1202\n,(lower('LowerCase') != NULL)\n,(lpad('hi', 1, '??') != NULL)\n,(hex(lpad(x'1020', 5, x'05')) != NULL)\n,(('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL) as col120\n,(md5('Spark') != NULL)\n,(octet_length('Spark SQL') != NULL)\n,(parse_url('http://spark.apache.org/path?query=1', 'HOST') != NULL)\n,(position('bar', 'abcbarbar') > 10)\n,(position('bar', 'abcbarbar', 5) > 5)\n,(printf('Hello World %d %s', 100, 'days') != NULL)\n,(r'%SystemDarive%\\Users\\John' RLIKE r'%SystemDrive%\\\\Users.*')\n,(r'%System1Drive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\n,(regexp_like('%SystemDa1rive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\n,(regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) > 10)\n,(regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1) != NULL)\n,(regexp_replace('100-200', '(\\\\d+)', 'num') != NULL)\n,(repeat('123', 2) != NULL)\n,(replace('ABCabc', 'abc', 'DEF') != NULL)\n,(reverse('Spark SQL') != NULL)\n,(RIGHT('Spark SQL', 3) != NULL)\n,(rpad('hi', 5, 'ab') != NULL)\n,(hex(rpad(x'1020', 5, x'05')) != NULL)\n,(rtrim('ab', 'SparkSQLabcaaba') != NULL) as col121\n,(sentences('Hi there! Good morning.', 'en', 'US') != NULL)\n,(sha('Spark') != NULL)\n,(sha1('Spark') != NULL)\n,(sha2('Spark', 256) != NULL)\n,(soundex('Miller') != NULL)\n,(concat('1', space(2), '1') != NULL)\n,(('->' || split_part('Hello,world,!', ',', 1) || '<-') != NULL)\n,(('->' || split_part('', ',', 1) || '<-') != NULL)\n,(('->' || split_part('Hello,World,!', ',', 0) || '<-') != NULL)\n,(startswith('SparkSQL', 'Spark'))\n,(startswith(NULL, 'Spark'))\n,(substr('Spark SQL', 5, 1) != NULL)\n,(substring_index('www.apache.org', '.', 2) != NULL)\n,(CAST(to_binary('537061726B') AS STRING) != NULL)\n,(CAST(to_binary('537061726B', 'hex') AS STRING) != NULL)\n,(CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL) as col50\n,(translate('AaBbCc', 'abc', '123') != NULL)\n,(CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\n,(ucase('SparkSql') != NULL)\n,(CAST(unbase64('U3BhcmsgU1FM') AS STRING) != NULL)\n,(decode(unhex('537061726B2053514C'), 'UTF-8') != NULL)\n,(upper('SparkSql') != NULL)\n,(10 / 2 == 5) as d9\n,((3 | 5) == 2)\n,((DATE'2021-03-20' - INTERVAL '2' MONTH) != NULL)\n,(10 - 2 + 2 == 4)\n,(2 % 1.8 == 2)\n,(3 ^ 5 == 3)\n,(3 & 5 == 2)\n,(3 * 2 == 2)\n,((INTERVAL '3' YEAR * 3) != NULL)\n,(abs(-1) == 1)\n,(acos(1) == 1)\n,(acosh(1) == 1)\n,(asin(0) == 1)\n,(asinh(0) == 1)\n,(atan(0) == 1)\n,(atan2(0, 0) == 1)\n,(atanh(0) == 1)\n,(bigint(current_timestamp) > 1)\n,(bit_count(-1) > 1)\n,(bit_get(23Y, 1) == 1)\n,(bround(13.5, -1) == 1)\n,(round(13.5, -1) == 1)\n,(cbrt(27.0) == 3)\n,(ceil(3345.1, -2) == 1)\n,(ceiling(5.4) == 6)\n,(ceiling(3345.1, -2) == 1)\n,(conv('100', 2, 10) == 4)\n,(conv('FFFFFFFFFFFFFFFF', 16, 10) == 1)\n,(cos(pi()) == -1)\n,(cosh(0) == 1)\n,(cot(1) == 1)\n,(csc(pi() / 2) == 2)\n,(decimal('5.2') == 5) as d10\n,(degrees(3.141592653589793) == 10)\n,(double('5.2') == 4)\n,(e() == 2)\n,(exp(1) == 2)\n,(expm1(0) == 1)\n,(factorial(2) == 2)\n,(float('5.2') == 5) as d11\n,(floor(-0.1) == -1)\n,(floor(3345.1, -2) == 20)\n,(getbit(23Y, 0) == 1)\n,(hypot(3, 4) == 5) as d12\n,(int(-5.6) == 5) as d13\n,(isnan(CAST('NaN' AS double)))\n,(ln(1) == 1)\n,(log(10, 100) == 2)\n,(log1p(0) == 1)\n,(log2(2) == 1)\n,(log10(10) == 1)\n,(nanvl(CAST('NaN' AS DOUBLE), 123) == 2)\n,(negative(1) == -1)\n,(pmod(-10, 3) == 2)\n,(positive(-1) == -1)\n,(pow(2, 3) * power(2, 3) == 8)\n,(radians(180) == 10)\n,(rand(0) * random(0) == 1)\n,(randn(0) == 1)\n,(rint(12.3456) == 1)\n,(round(2.5, 0) == 3)\n,(sec(pi()) == -1)\n,(sin(0) == 0)\n,(shiftleft(2, 1) == 2)\n,(shiftright(4, 1) == 2)\n,(shiftrightunsigned(4, 1) == 2)\n,(sign(40) == 1)\n,(signum(40) == 1)\n,(sinh(0) == 1)\n,(smallint(-5.6) == 5)\n,(sqrt(4) == 2)\n,(tan(0) == 1)\n,(tanh(0) == 1)\n,(tinyint('12') * tinyint(5.4) == 1)\n,(try_add(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\n,(try_add(1, 2) == 3)\n,(try_divide(3, 2) == 3)\n,(try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL) as col110\n,(try_subtract(1, 2) == 2)\n,(try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL) as col111\n,(try_subtract(-128Y, 1Y) != NULL)\n,(width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2) == 3)\n,(width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) == 10)\n,(array(10, 20, 30) != NULL)\n,(\n      (\n        aggregate(array(1, 2, 3), 0, \n        (acc, x) -> acc + x, \n        acc -> acc * 10)\n      ) == 1\n    ) as col21\n,(array_contains(array(1, 2, 3), 2))\n,(array_distinct(array(1, 2, 3, NULL, 3)) != NULL)\n,(array_except(array(1, 2, 2, 3), array(1, 1, 3, 5)) != NULL)\n,(array_intersect(array(1, 2, 3), array(1, 3, 3, 5)) != NULL)\n,(array_join(array('hello', 'world'), ',') != NULL)\n,(array_join(array('hello', NULL, 'world'), ',', '*') == NULL)\n,(array_max(array(1, 20, NULL, 3)) > 10)\n,(array_min(array(1, 20, NULL, 3)) == 1)\n,(array_position(array(3, 2, 1, 4, 1), 1) == 2)\n,(array_remove(array(1, 2, 3, NULL, 3, 2), 3) != NULL)\n,(array_repeat('123', 2) != NULL)\n,(array_size(array(1, NULL, 3, NULL)) == 2)\n,(array_sort(array('bc', 'ab', 'dc')) != NULL)\n,(array_union(array(1, 2, 2, 3), array(1, 3, 5)) != NULL)\n,(arrays_overlap(array(1, 2, NULL, 3), array(NULL, 4, 5)) == NULL)\n,(arrays_zip(array(1, 2), array('shoe', 'string', 'budget')) == NULL)\n,(cardinality(array('b', 'd', 'c', 'a')) == 2)\n,(concat(array(1, 2, 3), array(4, 5), array(6)) != NULL)\n,(element_at(map(1, 'a', 2, 'b'), 2) == NULL)\n,(\n      EXISTS (\n        array(1, 2, 3),\n        \n        x -> x % 2 == 0\n      )\n    ) as col20\n,(\n      EXISTS (\n        array(0, NULL, 2, 3, NULL),\n        \n        x -> x IS NULL\n      )\n    ) as col19\n,(\n      filter(array(1, 2, 3), \n      x -> x % 2 == 1) != NULL\n    ) as col18\n,(flatten(array(array(1, 2), array(3, 4))) != NULL)\n,(\n      forall(array(1, 2, 3), \n      x -> x % 2 == 0) == NULL\n    ) as col17\n,(reverse(array(2, 1, 4, 3)) != NULL)\n,(sequence(5, 1) != NULL)\n,(cardinality(array('b', 'd', 'c', 'a')) == 10)\n,(slice(array(1, 2, 3, 4), 2, 2) != NULL)\n,(sort_array(array('b', 'd', NULL, 'c', 'a'), true) != NULL)\n,(\n      transform(array(1, 2, 3), \n      x -> x + 1) != NULL\n    ) as col16\n,(try_element_at(array(1, 2, 3), 2) == 2)\n,(\n      zip_with(array('a', 'b', 'c'), array('d', 'e', 'f'), \n      (x, y) -> concat(x, y)) != NULL\n    ) as col15\n,(map(1, 'Hello', 2, 'World')[1] != NULL)\n,(cardinality(map('a', 1, 'b', 2)) == 2) as col67\n,(element_at(map(1, 'a', 2, 'b'), 3) == NULL)\n,(map(1.0, '2', 3.0, '4') IS NOT NULL)\n,(map_concat(map(1, 'a', 2, 'b'), map(3, 'c')) IS NOT NULL)\n,(map_contains_key(map(1, 'a', 2, 'b'), 2)) as col122\n,(map_entries(map(1, 'a', 2, 'b')) IS NOT NULL)\n,(\n      map_filter(map(1, 0, 2, 2, 3, -1), \n      (k, v) -> k > v) IS NOT NULL\n    ) as col14\n,(map_from_arrays(array(1.0, 3.0), array('2', '4')) IS NOT NULL)\n,(map_from_entries(array(struct(1, 'a'), struct(2, 'b'))) IS NOT NULL)\n,(map_keys(map(1, 'a', 2, 'b')) IS NOT NULL)\n,(map_values(map(1, 'a', 2, 'b')) IS NOT NULL)\n,(\n      map_zip_with(map(1, 'a', 2, 'b'), map(1, 'x', 2, 'y'), \n      (k, v1, v2) -> concat(v1, v2)) IS NOT NULL\n    ) as col13\n,(cardinality(map('a', 1, 'b', 2)) == 2)\n,(str_to_map('a:1,b:2,c:3', ',', ':') IS NOT NULL)\n,(\n      transform_keys(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n      (k, v) -> k + 1) IS NOT NULL\n    ) as col12\n,(\n      transform_values(map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n      (k, v) -> k + v) IS NOT NULL\n    ) as col11\n,(try_element_at(map(1, 'a', 2, 'b'), 2) IS NOT NULL)\n,((INTERVAL '3:15' HOUR TO MINUTE / 3) IS NOT NULL)\n,((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL) as col123\n,(typeof(current_timestamp - (current_date + INTERVAL '1' DAY)) != NULL)\n,((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL) as col124\n,((INTERVAL '3' YEAR * 3) != NULL) as col100\n,(add_months('2016-08-31', -6) != NULL)\n,(current_date() != NULL)\n,(current_timestamp() != NULL)\n,(current_timezone() != NULL)\n,(date('2021-03-21') != NULL) as col112\n,(date_add('2016-07-30', 1) != NULL) as col122121d\n,(date_format('2016-04-08', 'y') == 2016) as col122121\n,(date_from_unix_date(1) != NULL)\n,(date_sub('2016-07-30', 1) != NULL) as col122121gh\n,(date_trunc('YEAR', '2015-03-05T09:32:05.359') != NULL)\n,(datediff('2009-07-31', '2009-07-30') == 1)\n,(day('2009-07-30') == 30)\n,(dayofmonth('2009-07-30') == 30)\n,(dayofweek('2009-07-30') == 5) as d14\n,(dayofyear('2016-04-09') == 100) as col16121\n,(EXTRACT(SECONDS FROM INTERVAL '5:00:30.001' HOUR TO SECOND) == 30)\n,(EXTRACT(WEEK FROM TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\n,(from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') != NULL)\n,(from_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\n,(from_utc_timestamp('2016-08-31', 'Asia/Seoul') != NULL)\n,(hour('2009-07-30 12:58:59') == 10)\n,(last_day('2009-01-12') IS NOT NULL)\n,(make_date(2013, 7, 15) IS NOT NULL)\n,(make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)\n,(make_ym_interval(100, 5) IS NOT NULL)\n,(minute('2009-07-30 12:58:59') == 58) as d15\n,(month('2016-07-30') == 7) as col122121hjh\n,(months_between('1997-02-28 10:30:00', '1996-10-30') == 3)\n,(months_between('1997-02-28 10:30:00', '1996-10-30', false) == 2)\n,(next_day('2015-01-14', 'TU') != NULL)\n,(quarter('2016-08-31') == 3)\n,(second('2009-07-30 12:58:59') == 59) as d16\n,(timestamp(123) != NULL)\n,(timestamp('2020-04-30 12:25:13.45') != NULL)\n,(timestamp_micros(1230219000123123) != NULL)\n,(timestamp_millis(1230219000123) != NULL)\n,(timestamp_seconds(1230219000) != NULL)\n,(to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\n,(to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\n,(to_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\n,(trunc('2015-10-27', 'YEAR') != NULL)\n,(trunc('2019-08-04', 'quarter') != NULL)\n,(try_add(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\n,(try_add(DATE'2021-03-31', INTERVAL '1' MONTH) != NULL)\n,(try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\n,((INTERVAL '3' YEAR * 3) != NULL) as col101\n,(try_subtract(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\n,(try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\n,(unix_date(DATE('1970-01-02')) == 1)\n,(unix_micros(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\n,(unix_millis(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\n,(unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\n,(unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 1) as col1123423\n,(weekday(DATE'2009-07-30') == 1)\n,(EXTRACT(DAYOFWEEK_ISO FROM DATE'2009-07-30') == 4)\n,(weekofyear('2008-02-20') == 8)\n,(year('2016-07-30') == 2016) as col122121rtyr\n,(array(1, 2, 3) != NULL)\n,(bigint('5') == 5) as d3\n,(binary('Spark SQL') != NULL)\n,(boolean(1))\n,(CAST(5.6 AS DECIMAL (2, 0)) != NULL)\n,(CAST(INTERVAL '1-2' YEAR TO MONTH AS INTEGER) == 12)\n,(date('2021-03-21') != NULL)\n,(decimal('5.2') == 5) as d1\n,(double('5.2') / 2 == 5) as d2\n,(float('5.2') / 2 == 2)\n,(int('5') == 5) as d4\n,(make_date(2013, 7, 15) != NULL)\n,(make_dt_interval(100, 13) != NULL)\n,(make_ym_interval(100, 5) == NULL)\n,(map(1.0, '2', 3.0, '4') IS NOT NULL) as col113\n,(named_struct('a', 1, 'b', 2, 'c', 3) IS NOT NULL)\n,(smallint('5') == 5) as d5\n,(struct(1, 2, 3) IS NOT NULL)\n,(tinyint('12') == 12)\n,(timestamp('2020-04-30 12:25:13.45') != NULL) as col114\n,(to_date('2016-12-31', 'yyyy-MM-dd') != NULL) as col115\n,(to_timestamp('2016-12-31 00:12:00') != NULL)\n,(from_csv('1, 0.8', 'a INT, b DOUBLE') != NULL)\n,(schema_of_csv('1,abc') != NULL)\n,(json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') == 5)\n,(json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') != NULL)\n,(schema_of_json('[{\"col\":01}]', map('allowNumericLeadingZeros', 'true')) != NULL)\n,(to_json(named_struct('a', 1, 'b', 2)) != NULL)\n,(to_json(map(named_struct('a', 1), named_struct('b', 2))) != NULL)\n,(to_json(array((map('a', 1)))) != NULL)\n,(xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()') != NULL)\n,(xpath_boolean('<a><b>1</b></a>', 'a/b'))\n,(xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\n,(xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\n,(xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2) as col117\n,(xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 3)\n,(xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\n,(xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\n,(xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c') != NULL)\n,(\n      assert_true(\n        0 < 1) == NULL\n    ) as col10\n,(\n      (\n        CASE\n          WHEN 1 > 0\n            THEN 1\n          WHEN 2 > 0\n            THEN 2.0\n          ELSE 1.2\n        END\n      ) == 1\n    ) as col9\n,(\n      (\n        CASE 3\n          WHEN 1\n            THEN 'A'\n          WHEN 2\n            THEN 'B'\n          WHEN 3\n            THEN 'C'\n        END\n      ) != NULL\n    ) as col8\n,(coalesce(2, 5 / 0) == 2)\n,(current_catalog() != NULL)\n,(current_database() != NULL) as c21543123d\n,(current_user() != NULL)\n,(decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks') != NULL)\n,(elt(1, 'scala', 'java') != NULL)\n,(greatest(10, 9, 2, 4, 3) == 10)\n,(hash('Spark', array(123), 2) != NULL)\n,(\n      if(\n        1 < 2, \n        'a', \n        'b') != NULL\n    ) as col7\n,(ifnull(NULL, array('2')) != NULL)\n,(input_file_block_length() == -1)\n,(input_file_block_start() == -1)\n,(isnull(1))\n,(isnotnull(1))\n,(least(10, 9, 2, 4, 3) == 2)\n,(monotonically_increasing_id() > 10)\n,(nullif(2, 2) == NULL)\n,(nvl(NULL, 2) == 2)\n,(nvl2(NULL, 2, 1) == 1)\n,(typeof(1) != NULL)\n,(uuid() != NULL)\n,(xxhash64('Spark', array(123), 2) != NULL)\n,('20'::INTEGER == 20)\n,like('Spark', '_park') as d866\n,('Spark' LIKE SOME('_park', '_ock')) as d889\n,(bitmap_count(x'00') == 10)\n,(charindex('bar', 'abcbarbar') == 1)\n,(decode(x'FEFF0053007000610072006B002000530051004C', 'UTF-16') != NULL)\n,(like('Spark', '_park')) as d8123\n,(len('Spark SQL ') > 10)\n,(levenshtein('kitten', 'sitting', 4) > 10)\n,(('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\n,(mask('AaBb123-&^ASDXYZ921312asd', 'Z', 'z', '9', 'X') != NULL)\n,(mask('AaBb123-&^ASDXYZ921312asd', lowerChar => 'z', upperChar => 'X') != NULL)\n,(mask('AaBb123-&ASDXYZ921312asd', NULL, NULL, NULL, NULL) != NULL)\n,(overlay('Spark SQL' PLACING '_' FROM 6) != NULL)\n,(overlay('Spark SQL' PLACING 'tructured' FROM 2 FOR 4) != NULL)\n,(overlay(encode('Spark SQL', 'utf-8') PLACING encode('_', 'utf-8') FROM 6) != NULL)\n,(position('bar' IN 'abcbarbar') > 2)\n,(regexp_count('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en') > 2)\n,(regexp_instr('Mary had a little lamb', NULL) != NULL)\n,(regexp_substr(NULL, 'Ste(v|ph)en') != NULL)\n,(rtrim('ab', 'SparkSQLabcaaba') != NULL)\n,(string(4) != NULL)\n,(substr('Spark SQL', -3) != NULL)\n,(substr('Spark SQL' FROM 5 FOR 1) != NULL)\n,(substr('Spark SQL' FROM -3) != NULL)\n,(to_char(DATE'2016-04-08', 'y') != NULL) as col11112\n,(to_char(encode('abc', 'utf-8'), 'utf-8') != NULL)\n,(to_varchar(454, '999') != NULL)\n,(to_varchar(DATE'2016-04-08', 'y') != NULL) as col1567812\n,(to_varchar(x'537061726b2053514c', 'hex') != NULL)\n,(TRIM( 'SL' FROM 'SSparkSQLS') != NULL) as col15678121\n,(TRIM(BOTH 'SL' FROM 'SSparkSQLS') != NULL) as col15678123\n,(TRIM(LEADING 'SL' FROM 'SSparkSQLS') != NULL) as col15678125\n,(TRIM(TRAILING 'SL' FROM 'SSparkSQLS') != NULL) as col15678127\n,(\n      CAST(try_aes_decrypt(\n        unbase64('MTIzNDU2Nzg5MDEyMdXvR41sJqwZ6hnTU8FRTTtXbL8yeChIZA=='), \n        '1234567890abcdef', \n        'GCM', \n        'DEFAULT', \n        'Some AAD') AS STRING) != NULL\n    ) as col6\n,(url_decode('http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1') != NULL)\n,(url_encode('http://spark.apache.org/path?query=1') != NULL)\n,((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL) as col125\n,((TIMESTAMP'2021-03-20 12:15:29' + INTERVAL '3' SECOND) != NULL) as col156781254\n,(bit_reverse(-1) == -1)\n,(bitmap_bit_position(-32768) == 1)\n,(bitmap_bucket_number(-32768) == 1)\n,(MOD(2, 1.8) == 2)\n,(array_append(array(1, 2, 3), 0) == NULL)\n,(array_compact(array(1, 2, NULL, 3, NULL, 3)) == NULL)\n,(array_insert(array('a', 'b', 'c'), 1, 'z') != NULL)\n,(array_prepend(array(1, 2, 3), 0) != NULL)\n,(get(array(1, 2, 3), 2) != NULL)\n,(\n      reduce(array(1, 2, 3), 0, \n      (acc, x) -> acc + x) == 2\n    ) as col5\n,(shuffle(array(1, 20, 3, 5)) != NULL)\n,(map_contains_key(map(1, 'a', 2, 'b'), 2))\n,((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\n,((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\n,((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\n,(date_diff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\n,(date_part('SECONDS', TIMESTAMP'2019-10-01 00:00:01.000001') == 1)\n,(date_part('Week', TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\n,(dateadd('2016-07-30', 1) != NULL) as col122121a1\n,(dateadd(MICROSECOND, 5, TIMESTAMP'2022-02-28 00:00:00') != NULL)\n,(datediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 11:59:59') == 0)\n,(make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)\n,(make_timestamp(2014, 12, 28, 6, 30, 45.887, 'CET') IS NOT NULL)\n,(make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)\n,(now() != NULL)\n,(timediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1) as c45fg6789hgf1\n,(timestampdiff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1) as c45fg6789hgf\n,(to_unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 100) as c45fg6789hgf2\n,(try_to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\n,(make_interval(100, 11) IS NOT NULL)\n,(make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)\n,(string(5) != NULL)\n,(to_char(454, '000.00') != NULL)\n,(to_varchar(454, '999') IS NOT NULL)\n,(from_json('{\"a\":1, \"b\":0.8}', 'a INT, b DOUBLE') IS NOT NULL)\n,(get_json_object('{\"a\":\"b\"}', '$.a') IS NOT NULL)\n,(to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), map('timestampFormat', 'dd/MM/yyyy')) IS NOT NULL)\n,(to_csv(named_struct('a', 1, 'b', 2)) IS NOT NULL)\n,(from_xml('<p><time>26/08/2015</time></p>', 'time Timestamp', map('timestampFormat', 'dd/MM/yyyy')) != NULL)\n,(schema_of_xml('<p><a attr=\"2\">1</a><a>3</a></p>', map('excludeAttribute', 'true')) IS NOT NULL)\n,(current_metastore() != NULL)\n,(current_schema() != NULL)\n,(current_version() != NULL)\n,(equal_null(2, 2))\n,(\n      iff(\n        1 < 2, \n        'a', \n        'b') == 'a'\n    ) as col4\n,(is_account_group_member('admins'))\n,(is_member('admins')) as cold1d1\n,(luhn_check('12345') == NULL) as cold13412asd\n,(user() != NULL) as cold13423423\n,(h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0) != NULL) as cold1f4\n,(h3_coverash3string('{\"type\":\"LineString\",\"coordinates\":[[-122.4194,37.7749],[-118.2437,34.0522],[-74.0060,40.7128]]}', 1) != NULL) as cold1asd\n,(h3_longlatash3(-122.4783, 37.8199, 13) > 0) as cold1asd12\n,(h3_longlatash3string(-122.4783, 37.8199, 13) != NULL) as cold1das122\n,(h3_pointash3('POINT(-122.4783 37.8199)', 13) > 0) as cold1\n,(h3_pointash3string('{\"type\":\"Point\",\"coordinates\":[]}', 15) == NULL) as cold1test1\n,(h3_pointash3string('POINT(-122.4783 37.8199)', 13) != NULL) as cold1test2\n,(\n      h3_polyfillash3(\n        unhex(\n          '0103000000010000000400000050fc1873d79a5ec0d0d556ec2fe342404182e2c7988f5dc0f46c567dae064140aaf1d24d628052c05e4bc8073d5b444050fc1873d79a5ec0d0d556ec2fe34240'), \n        2) != NULL\n    ) as col3455\n,(h3_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL) as cold1asd342346\n,(h3_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL) as cold1j\n,(h3_try_polyfillash3('Not-a-valid-rep', 2) == NULL) as cold1jk\n,(h3_try_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL) as cold1jk1\n,(h3_try_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL) as cold1ghj\n,(h3_boundaryasgeojson('8009fffffffffff') != NULL) as cold1qwe\n,(h3_boundaryasgeojson(599686042433355775) != NULL) as cold1qweqwe\n,(hex(h3_boundaryaswkb(599686042433355775)) != NULL) as cold1qweq123\n,(h3_boundaryaswkt(599686042433355775) != NULL) as cold112sas\n,(h3_centerasgeojson(599686042433355775) != NULL) as cold1qwe234\n,(hex(h3_centeraswkb('8009fffffffffff')) == NULL) as cold1dasd3456456\n,(h3_centeraswkt('8009fffffffffff') != NULL) as cold1sdf56456\n,(h3_h3tostring(599686042433355775) != NULL) as cold1sdf43534523\n,(h3_stringtoh3('85283473fffffff') == NULL) as cold1dasd56346435234\n,(h3_ischildof('88283471b9fffff', '85283473fffffff')) as cold1dasd23414123\n,(h3_ispentagon(590112357393367039)) as cold1adsasd123412312\n,(h3_isvalid('85283473fffffff')) as cold1cold1adsasd123412312\n,(h3_try_validate(590112357393367039) != NULL) as cold1cold12\n,(h3_validate(590112357393367039) != NULL) as cold1cold15\n,(h3_hexring(599686042433355775, 1) != NULL) as cold1cold17\n,(h3_kring(599686042433355775, 1) != NULL) as cold1cold1as\n,(h3_kringdistances(599686042433355775, 1) != NULL) as cold1cold1121\n,(h3_distance(599686030622195711, 599686015589810175) == 2) as cold1657456cold1yui\n,(h3_maxchild(599686042433355775, 10) != NULL) as cold14565cold1s254fg\n,(h3_minchild(599686042433355775, 10) != NULL) as cold1345cold1dsa23\n,(h3_resolution(599686042433355775) == 5) as d6cold1345cold1dsa23\n,(h3_tochildren(599686042433355775, 6) != NULL) as cold11cold1345cold1dsa231\n,(h3_toparent(599686042433355775, 0) != NULL) as cold1cold1345cold1dsa23232\n,(\n      h3_compact(\n        ARRAY(\n          599686042433355775, \n          599686030622195711, \n          599686044580839423, \n          599686038138388479, \n          599686043507097599, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686040285872127, \n          599686041359613951, \n          599686039212130303, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647)) != NULL\n    ) as col2\n,(\n      h3_uncompact(\n        ARRAY(\n          599686030622195711, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647, \n          595182446027210751), \n        5) != NULL\n    ) as col1\nfrom Reformat_1_2"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "nKnNacAtp0Em3l1QgqALz$$vuemW0CrfgrQwbq9UouTK",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "Reformat_1_2"
        } ],
        "outputs" : [ {
          "id" : "Gg32OgrCf0MA7NRgw-_Ke$$HvzPP0Q8TtFkgmtKDEgk-",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "(CAST(customer_id AS INT) > 5)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(customer_id AS INT) = 0))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "first_name LIKE %A%",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((1 & 1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((2 | 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((10 * CAST(customer_id AS INT)) = 20)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (last_name = first_name))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((CAST(customer_id AS INT) >= 10) AND (CAST(customer_id AS INT) <= 20))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array(10, 20, 30)[2] = 30)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map(1, Hello, 2, World)[1] = Hello)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d7",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map(three, 3)[four] = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d8",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((1 = 2) AND (1 = 2))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(((((1 >= 2) AND (1 <= 2)) AND (NOT (1 = 3))) OR (2 > 4)) OR (4 < 5))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col22",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d81",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(named_struct(a, 1, b, 2) IN (named_struct(a, 1, b, 1), named_struct(a, 1, b, 3)))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (1 <=> 5))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(invalid <=> false)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(51 IS NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c46",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(1 <=> 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (1 = CAST(customer_id AS INT)))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(((10 - 2) + 10) = 8)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT true)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(false OR true)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((2 % 0) = 0)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(concat(Spark, SQL) = SparkSQL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "%SystemDrive%\\Users\\John LIKE %System23Drive%\\\\Users%",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "RLIKE(%SystemDr12ive%\\Users\\John, %System23Drive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "REGEXP_LIKE(%Syst2emDrive%\\Users\\John, %SystemD545rive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((2 / 2) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(~0 = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(base64(aes_encrypt(Spark, abcdefghijklmnop, GCM, DEFAULT, , )) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CAST(aes_decrypt(unbase64(4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn), abcdefghijklmnop, GCM, DEFAULT, ) AS STRING) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ascii(234) = 234)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(base64(Spark SQL) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bin(13) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(Spark SQL = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (btrim(abcaabaSparkSQLabcaaba, abc) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (char(65) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(char_length(Spark SQL ) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(character_length(Spark SQL ) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(customer_id, hello) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat_ws(,, Spark, array(S, Q, NULL, L), NULL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "contains(SparkSQL, Spork)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(crc32(Spark) > 0)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (chr(65) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 ^ 5) = 6)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (hex(encode(Spark SQL, US-ASCII)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "endswith(SparkSQL, SQL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(find_in_set(ab, abc,b,ab,c,def) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(format_number(12332.123456, 4) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(format_number(12332.123456, #.###) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (format_string(Hello World %d %s, 100, days) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (hex(Spark SQL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "%SystemDrive%\\Users\\John LIKE %SystemDrive%\\\\Users%",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (initcap(sPark sql) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(instr(SparkSQL, R) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (lcase(LowerCase) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (left(Spark SQL, 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(length(Spark SQL ) > 20)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(levenshtein(kitten, sitting) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col1201",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col1202",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (lower(LowerCase) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (lpad(hi, 1, ??) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (hex(lpad(X'1020', 5, X'05')) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col120",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (md5(Spark) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (octet_length(Spark SQL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (parse_url(http://spark.apache.org/path?query=1, HOST) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(position(bar, abcbarbar, 1) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(position(bar, abcbarbar, 5) > 5)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (printf(Hello World %d %s, 100, days) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "RLIKE(%SystemDarive%\\Users\\John, %SystemDrive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "RLIKE(%System1Drive%\\Users\\John, %SystemDrive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "REGEXP_LIKE(%SystemDa1rive%\\Users\\John, %SystemDrive%\\\\Users.*)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(regexp_extract(100-200, (\\d+)-(\\d+), 1) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (regexp_extract_all(100-200, 300-400, (\\d+)-(\\d+), 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (regexp_replace(100-200, (\\d+), num, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (repeat(123, 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (replace(ABCabc, abc, DEF) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (reverse(Spark SQL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (right(Spark SQL, 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (rpad(hi, 5, ab) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (hex(rpad(X'1020', 5, X'05')) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sentences(Hi there! Good morning., en, US) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sha(Spark) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sha1(Spark) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sha2(Spark, 256) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (soundex(Miller) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(1, space(2), 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(concat(->, split_part(Hello,world,!, ,, 1)), <-) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(concat(->, split_part(, ,, 1)), <-) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(concat(->, split_part(Hello,World,!, ,, 0)), <-) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "startswith(SparkSQL, Spark)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "startswith(NULL, Spark)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substr(Spark SQL, 5, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substring_index(www.apache.org, ., 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(to_binary(537061726B) AS STRING) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(to_binary(537061726B, hex) AS STRING) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col50",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (translate(AaBbCc, abc, 123) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(try_to_binary(U3Bhxcms=, base64) AS STRING) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (ucase(SparkSql) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(unbase64(U3BhcmsgU1FM) AS STRING) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (decode(unhex(537061726B2053514C), UTF-8) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (upper(SparkSql) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d9",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 | 5) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (DATE '2021-03-20' - INTERVAL '2' MONTH = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(((10 - 2) + 2) = 4)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((2 % 1.8) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 ^ 5) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 & 5) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((3 * 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT ((INTERVAL '3' YEAR * 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(abs(-1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ACOS(1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ACOSH(1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ASIN(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ASINH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ATAN(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ATAN2(0, 0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ATANH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(current_timestamp() > 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bit_count(-1) > 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bit_get(23, 1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bround(13.5, -1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(round(13.5, -1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CBRT(27.0) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ceil(3345.1, -2) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ceiling(5.4) = 6)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ceiling(3345.1, -2) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(conv(100, 2, 10) = 4)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(conv(FFFFFFFFFFFFFFFF, 16, 10) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(COS(PI()) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(COSH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(COT(1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CSC((PI() / 2)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d10",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(DEGREES(3.141592653589793) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(5.2 = 4)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(E() = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(EXP(1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(EXPM1(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(factorial(2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d11",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(FLOOR(-0.1) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(floor(3345.1, -2) = 20)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(getbit(23, 0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d12",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d13",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "isnan(CAST(NaN AS DOUBLE))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(ln(1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(LOG(10, 100) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(LOG1P(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(LOG2(2) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(LOG10(10) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(nanvl(CAST(NaN AS DOUBLE), 123) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(negative(1) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(pmod(-10, 3) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((+ -1) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((pow(2, 3) * POWER(2, 3)) = 8)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(RADIANS(180) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((rand(0) * rand(0)) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(randn(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(rint(12.3456) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(round(2.5, 0) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SEC(PI()) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SIN(0) = 0)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(shiftleft(2, 1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(shiftright(4, 1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(shiftrightunsigned(4, 1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(sign(40) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SIGNUM(40) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SINH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(-5.6 = 5)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(SQRT(4) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(TAN(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(TANH(0) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((12 * 5.4) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_add(DATE '2021-03-20', INTERVAL '2' MONTH) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_add(1, 2) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_divide(3, 2) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col110",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_subtract(1, 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col111",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_subtract(-128, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2)) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array(10, 20, 30) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col21",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "array_contains(array(1, 2, 3), 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_distinct(array(1, 2, 3, NULL, 3)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_except(array(1, 2, 2, 3), array(1, 1, 3, 5)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_intersect(array(1, 2, 3), array(1, 3, 3, 5)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_join(array(hello, world), ,) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_join(array(hello, NULL, world), ,, *) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_max(array(1, 20, NULL, 3)) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_min(array(1, 20, NULL, 3)) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_position(array(3, 2, 1, 4, 1), 1) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_remove(array(1, 2, 3, NULL, 3, 2), 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_repeat(123, 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_size(array(1, NULL, 3, NULL)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_sort(array(bc, ab, dc), lambdafunction((IF(((namedlambdavariable() IS NULL) AND (namedlambdavariable() IS NULL)), 0, (IF((namedlambdavariable() IS NULL), 1, (IF((namedlambdavariable() IS NULL), -1, (IF((namedlambdavariable() < namedlambdavariable()), -1, (IF((namedlambdavariable() > namedlambdavariable()), 1, 0)))))))))), namedlambdavariable(), namedlambdavariable())) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_union(array(1, 2, 2, 3), array(1, 3, 5)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(arrays_overlap(array(1, 2, NULL, 3), array(NULL, 4, 5)) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(arrays_zip(array(1, 2), array(shoe, string, budget)) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(cardinality(array(b, d, c, a)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(array(1, 2, 3), array(4, 5), array(6)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(element_at(map(1, a, 2, b), 2) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col20",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col19",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col18",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (flatten(array(array(1, 2), array(3, 4))) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col17",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (reverse(array(2, 1, 4, 3)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sequence(5, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(cardinality(array(b, d, c, a)) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (slice(array(1, 2, 3, 4), 2, 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (sort_array(array(b, d, NULL, c, a), true) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col16",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_element_at(array(1, 2, 3), 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (map(1, Hello, 2, World)[1] = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col67",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(element_at(map(1, a, 2, b), 3) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map(1.0, 2, 3.0, 4) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map_concat(map(1, a, 2, b), map(3, c)) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map_entries(map(1, a, 2, b)) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col14",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map_from_arrays(array(1.0, 3.0), array(2, 4)) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map_from_entries(array(struct(1, a), struct(2, b))) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map_keys(map(1, a, 2, b)) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(map_values(map(1, a, 2, b)) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col13",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(cardinality(map(a, 1, b, 2)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(str_to_map(a:1,b:2,c:3, ,, :) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col12",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col11",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(try_element_at(map(1, a, 2, b), 2) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((INTERVAL '03:15' HOUR TO MINUTE / 3) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (typeof((current_timestamp() - date_add(current_date(), extractansiintervaldays(INTERVAL '1' DAY)))) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col124",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col100",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (add_months(2016-08-31, -6) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_date() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_timestamp() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_timezone() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col112",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121d",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (date_from_unix_date(1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121gh",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (date_trunc(YEAR, 2015-03-05T09:32:05.359) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(datediff(2009-07-31, 2009-07-30) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(day(2009-07-30) = 30)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(dayofmonth(2009-07-30) = 30)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d14",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col16121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(extract(SECONDS FROM INTERVAL '05:00:30.001' HOUR TO SECOND) = 30)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(extract(WEEK FROM TIMESTAMP '2019-08-12 01:00:00.123456') = 33)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (from_unixtime(0, yyyy-MM-dd HH:mm:ss) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (from_utc_timestamp(2017-07-14 02:40:00.0, GMT+1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (from_utc_timestamp(2016-08-31, Asia/Seoul) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(hour(2009-07-30 12:58:59) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(last_day(2009-01-12) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_date(2013, 7, 15) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_ym_interval(100, 5) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d15",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121hjh",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(months_between(1997-02-28 10:30:00, 1996-10-30, true) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(months_between(1997-02-28 10:30:00, 1996-10-30, false) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (next_day(2015-01-14, TU) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(quarter(2016-08-31) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d16",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (123 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (2020-04-30 12:25:13.45 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (timestamp_micros(1230219000123123) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (timestamp_millis(1230219000123) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (timestamp_seconds(1230219000) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_date(2016-12-31, yyyy-MM-dd) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_timestamp(2016-12-31, yyyy-MM-dd) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_utc_timestamp(2017-07-14 02:40:00.0, GMT+1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (trunc(2015-10-27, YEAR) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (trunc(2019-08-04, quarter) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_add(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_add(DATE '2021-03-31', INTERVAL '1' MONTH) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_divide(INTERVAL '03:15' HOUR TO MINUTE, 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col101",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_subtract(DATE '2021-03-20', INTERVAL '2' MONTH) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_subtract(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(unix_date(1970-01-02) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(unix_micros(1970-01-01 00:00:01Z) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(unix_millis(1970-01-01 00:00:01Z) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(unix_seconds(1970-01-01 00:00:01Z) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col1123423",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(weekday(DATE '2009-07-30') = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(extract(DAYOFWEEK_ISO FROM DATE '2009-07-30') = 4)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(weekofyear(2008-02-20) = 8)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121rtyr",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array(1, 2, 3) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d3",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (Spark SQL = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (CAST(5.6 AS DECIMAL(2,0)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(CAST(INTERVAL '1-2' YEAR TO MONTH AS INT) = 12)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (2021-03-21 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d2",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "((5.2 / 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d4",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (make_date(2013, 7, 15) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (make_dt_interval(100, 13, 0, 0.000000) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_ym_interval(100, 5) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col113",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(named_struct(a, 1, b, 2, c, 3) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d5",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(struct(1, 2, 3) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(12 = 12)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col114",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col115",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_timestamp(2016-12-31 00:12:00) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (from_csv(1, 0.8) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (schema_of_csv(1,abc) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(json_array_length([1,2,3,{\"f1\":1,\"f2\":[5,6]},4]) = 5)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (json_object_keys({\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (schema_of_json([{\"col\":01}]) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_json(named_struct(a, 1, b, 2)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_json(map(named_struct(a, 1), named_struct(b, 2))) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_json(array(map(a, 1))) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xpath(<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>, a/b/text()) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "xpath_boolean(<a><b>1</b></a>, a/b)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xpath_double(<a><b>1</b><b>2</b></a>, sum(a/b)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xpath_float(<a><b>1</b><b>2</b></a>, sum(a/b)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col117",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(xpath_long(<a><b>1</b><b>2</b></a>, sum(a/b)) = 3)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(xpath_number(<a><b>1</b><b>2</b></a>, sum(a/b)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(xpath_int(<a><b>1</b><b>2</b></a>, sum(a/b)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xpath_string(<a><b>b</b><c>cc</c></a>, a/c) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col10",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col9",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col8",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(coalesce(2, (5 / 0)) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_catalog() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c21543123d",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (abhisheks@prophecy.io = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (decode(5, 6, Spark, 5, SQL, 4, rocks) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (elt(1, scala, java) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(greatest(10, 9, 2, 4, 3) = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (hash(Spark, array(123), 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col7",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (ifnull(NULL, array(2)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(input_file_block_length() = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(input_file_block_start() = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(1 IS NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(1 IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(least(10, 9, 2, 4, 3) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(monotonically_increasing_id() > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(nullif(2, 2) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(nvl(NULL, 2) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(nvl2(NULL, 2, 1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (typeof(1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (uuid() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (xxhash64(Spark, array(123), 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(20 = 20)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d866",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d889",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bitmap_count(X'00') = 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(charindex(bar, abcbarbar, 1) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (decode(X'FEFF0053007000610072006B002000530051004C', UTF-16) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d8123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(len(Spark SQL ) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(levenshtein(kitten, sitting, 4) > 10)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (concat(concat(+, TRIM(LEADING abc FROM acbabSparkSQL   )), +) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (mask(AaBb123-&^ASDXYZ921312asd, Z, z, 9, X) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (mask(AaBb123-&^ASDXYZ921312asd, X, z, n, NULL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (mask(AaBb123-&ASDXYZ921312asd, NULL, NULL, NULL, NULL) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (overlay(Spark SQL, _, 6, -1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (overlay(Spark SQL, tructured, 2, 4) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (overlay(encode(Spark SQL, utf-8), encode(_, utf-8), 6, -1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(locate(bar, abcbarbar, 1) > 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(regexp_count(Steven Jones and Stephen Smith are the best players, Ste(v|ph)en) > 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (regexp_instr(Mary had a little lamb, NULL, 0) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (regexp_substr(NULL, Ste(v|ph)en) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (TRIM(TRAILING ab FROM SparkSQLabcaaba) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (4 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substr(Spark SQL, -3, 2147483647) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substring(Spark SQL, 5, 1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (substring(Spark SQL, -3, 2147483647) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col11112",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (decode(encode(abc, utf-8), utf-8) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_char(454, 999) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col1567812",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_varchar(X'537061726B2053514C') = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15678121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15678123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15678125",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col15678127",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col6",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (url_decode(http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (url_encode(http://spark.apache.org/path?query=1) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col125",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col156781254",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bit_reverse(-1) = -1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bitmap_bit_position(-32768) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(bitmap_bucket_number(-32768) = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(mod(2, 1.8) = 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_append(array(1, 2, 3), 0) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(array_compact(array(1, 2, NULL, 3, NULL, 3)) = NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_insert(array(a, b, c), 1, z) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (array_prepend(array(1, 2, 3), 0) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (get(array(1, 2, 3), 2) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col5",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (shuffle(array(1, 20, 3, 5)) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "map_contains_key(map(1, a, 2, b), 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (DATE '2021-03-31' - INTERVAL '1' MONTH = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (DATE '2021-03-31' + INTERVAL '1' MONTH = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (TIMESTAMP '2021-03-20 12:15:29' - INTERVAL '03' SECOND = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(timestampdiff(MONTH, TIMESTAMP '2021-02-28 12:00:00', TIMESTAMP '2021-03-28 12:00:00') = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(date_part(SECONDS, TIMESTAMP '2019-10-01 00:00:01.000001') = 1)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(date_part(Week, TIMESTAMP '2019-08-12 01:00:00.123456') = 33)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col122121a1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (timestampadd(MICROSECOND, 5, TIMESTAMP '2022-02-28 00:00:00') = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(timestampdiff(MONTH, TIMESTAMP '2021-02-28 12:00:00', TIMESTAMP '2021-03-28 11:59:59') = 0)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_timestamp(2014, 12, 28, 6, 30, 45.887, CET) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (now() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c45fg6789hgf1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c45fg6789hgf",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c45fg6789hgf2",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (try_to_timestamp(2016-12-31, yyyy-MM-dd) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_interval(100, 11, 0, 0, 0, 0, 0.000000) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (5 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (to_char(454, 000.00) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(to_char(454, 999) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(from_json({\"a\":1, \"b\":0.8}) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(get_json_object({\"a\":\"b\"}, $.a) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(to_csv(named_struct(time, to_timestamp(2015-08-26, yyyy-MM-dd))) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(to_csv(named_struct(a, 1, b, 2)) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (from_xml(<p><time>26/08/2015</time></p>) = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(schema_of_xml(<p><a attr=\"2\">1</a><a>3</a></p>) IS NOT NULL)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (aws:us-west-1:3fa0cd4e-bf05-4fde-894d-9dc222ae0419 = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_database() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(NOT (current_version() = NULL))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "equal_null(2, 2)",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col4",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "(admins IN ('account users'))",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1d1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold13412asd",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold13423423",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1f4",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1asd",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1asd12",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1das122",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1test1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1test2",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col3455",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1asd342346",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1j",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1jk",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1jk1",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1ghj",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1qwe",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1qweqwe",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1qweq123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold112sas",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1qwe234",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1dasd3456456",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1sdf56456",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1sdf43534523",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1dasd56346435234",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1dasd23414123",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1adsasd123412312",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold1adsasd123412312",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold12",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold15",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold17",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold1as",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold1121",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1657456cold1yui",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold14565cold1s254fg",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1345cold1dsa23",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "d6cold1345cold1dsa23",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold11cold1345cold1dsa231",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "cold1cold1345cold1dsa23232",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col2",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "col1",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Reformat_3##ID8veivS" : {
      "id" : "Reformat_3##ID8veivS",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Reformat_3",
        "x" : 1040,
        "y" : 3660,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ "FFa20gBq##ID", "FFa20gBq##USER_ID", "FFa20gBq##ORDER_DATE", "FFa20gBq##STATUS" ],
        "expressions" : [ {
          "expression" : {
            "expression" : "ID"
          },
          "alias" : "ID"
        }, {
          "expression" : {
            "expression" : "USER_ID"
          },
          "alias" : "USER_ID"
        }, {
          "expression" : {
            "expression" : "ORDER_DATE"
          },
          "alias" : "ORDER_DATE"
        }, {
          "expression" : {
            "expression" : "STATUS"
          },
          "alias" : "STATUS"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "FFa20gBq",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "USER_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "ORDER_DATE",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "STATUS",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "egxik6Cg",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "USER_ID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "ORDER_DATE",
              "dataType" : {
                "type" : "Date"
              }
            }, {
              "name" : "STATUS",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "FTbwc8Z4wsafebhYLeLfm$$t-hAMFdH0GgYji_Xm8XaR" : {
      "id" : "FTbwc8Z4wsafebhYLeLfm$$t-hAMFdH0GgYji_Xm8XaR",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_5",
        "slug" : "SQLStatement_5",
        "x" : 1200,
        "y" : 100,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT * FROM pvt\n  UNION\n   SELECT * FROM pvt1\n  UNION\n   SELECT * FROM pvt2"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "QY0fR973Jg6Fls3Z35Fzq$$2eFKx64THQ3IC8sGgBw7i",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "pvt"
        }, {
          "id" : "Drp-pFDUOlKgk15EOYGua$$Rk3v7I_mxopIBsGp6qxg0",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "pvt1"
        }, {
          "id" : "fzm-HDNSc5xfzFa-VVEGr$$RvFo23fyUffYFBdS1l_zq",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "pvt2"
        } ],
        "outputs" : [ {
          "id" : "gPlWlhkaqqKwMJjK8EflW$$FzJgOLz6Nlr9EL9RceEi_",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Reformat_1##PatlCksV" : {
      "id" : "Reformat_1##PatlCksV",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Reformat_1",
        "x" : 1040,
        "y" : 1760,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "columnsSelector" : [ ],
        "expressions" : [ {
          "expression" : {
            "expression" : "'This is my first name'"
          },
          "alias" : "first_name"
        }, {
          "expression" : {
            "expression" : "'This is my last name'"
          },
          "alias" : "last_name"
        }, {
          "expression" : {
            "expression" : "1 + col_int"
          },
          "alias" : "id"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "WEVvk0cI",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "col_int",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "aQcA4kXb",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "id",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Join_1_2##hJe5Lr3V" : {
      "id" : "Join_1_2##hJe5Lr3V",
      "component" : "Join",
      "metadata" : {
        "label" : "Join_1_2",
        "x" : 1700,
        "y" : 600,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "conditions" : [ {
          "alias" : "in1",
          "expression" : {
            "expression" : "in0.customer_id != in1.c1"
          },
          "joinType" : "INNER"
        } ],
        "expressions" : [ {
          "expression" : {
            "expression" : "in0.customer_id"
          },
          "alias" : "customer_id"
        }, {
          "expression" : {
            "expression" : "in0.first_name"
          },
          "alias" : "first_name"
        }, {
          "expression" : {
            "expression" : "in0.last_name"
          },
          "alias" : "last_name"
        }, {
          "expression" : {
            "expression" : "in0.c_expressions"
          },
          "alias" : "c_expressions"
        }, {
          "expression" : {
            "expression" : "in1.c1"
          },
          "alias" : "c1"
        } ],
        "activeTab" : "conditions",
        "columnsSelector" : [ ],
        "headAlias" : "in0"
      },
      "ports" : {
        "inputs" : [ {
          "id" : "r02ari6w",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_expressions",
              "dataType" : {
                "type" : "Boolean"
              }
            } ]
          },
          "slug" : "in0"
        }, {
          "id" : "K6oIk5Yl",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in1"
        } ],
        "outputs" : [ {
          "id" : "qXzWB8a5",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_expressions",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c1",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Y6ymNh1JWmr3bziWIZwga$$6hK5c5KQ4sOI7St0USX81" : {
      "id" : "Y6ymNh1JWmr3bziWIZwga$$6hK5c5KQ4sOI7St0USX81",
      "component" : "Limit",
      "metadata" : {
        "label" : "Limit_1_1",
        "slug" : "Limit_1_1",
        "x" : 1700,
        "y" : 900,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "limit" : {
          "expression" : "100"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "nOk9jmBlVgHxM7ccS026d$$XwCehJSG0U6I3Il1pgYoH",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_expressions",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c1",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "qhJr5N-iV_R80oJzvydXu$$GxOGKVKOKmefwvfyMwijD",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_expressions",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c1",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Limit_4##vwyI2XTn" : {
      "id" : "Limit_4##vwyI2XTn",
      "component" : "Limit",
      "metadata" : {
        "label" : "Limit_4",
        "x" : 2180,
        "y" : 1760,
        "phase" : 0
      },
      "properties" : {
        "limit" : {
          "expression" : "15"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "HHjAADI1",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "id",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "sF5Y0lmA",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "id",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "Join_1##KsrGGz8Q" : {
      "id" : "Join_1##KsrGGz8Q",
      "component" : "Join",
      "metadata" : {
        "label" : "Join_1",
        "x" : 1960,
        "y" : 500,
        "phase" : 0,
        "macroDependencies" : [ ]
      },
      "properties" : {
        "conditions" : [ {
          "alias" : "in1",
          "expression" : {
            "expression" : "in0.c_smallint != in1.c_int"
          },
          "joinType" : "INNER"
        }, {
          "alias" : "in2",
          "expression" : {
            "expression" : "in1.c_string != in2.customer_id"
          },
          "joinType" : "INNER"
        }, {
          "alias" : "in3",
          "expression" : {
            "expression" : "in2.customer_id!=in3.customer_id"
          },
          "joinType" : "inner"
        }, {
          "alias" : "in4",
          "expression" : {
            "expression" : "in3.customer_id!=cast(in4.c1 as string)"
          },
          "joinType" : "inner"
        } ],
        "expressions" : [ {
          "expression" : {
            "expression" : "in0.c_tinyint"
          },
          "alias" : "c_tinyint"
        }, {
          "expression" : {
            "expression" : "in0.c_smallint"
          },
          "alias" : "c_smallint"
        }, {
          "expression" : {
            "expression" : "in1.c_int"
          },
          "alias" : "c_int"
        }, {
          "expression" : {
            "expression" : "in0.c_bigint"
          },
          "alias" : "c_bigint"
        }, {
          "expression" : {
            "expression" : "in0.c_float"
          },
          "alias" : "c_float"
        }, {
          "expression" : {
            "expression" : "in0.c_double"
          },
          "alias" : "c_double"
        }, {
          "expression" : {
            "expression" : "in0.c_string"
          },
          "alias" : "c_string"
        }, {
          "expression" : {
            "expression" : "in0.c_boolean"
          },
          "alias" : "c_boolean"
        }, {
          "expression" : {
            "expression" : "in0.c_array"
          },
          "alias" : "c_array"
        }, {
          "expression" : {
            "expression" : "in0.c_struct"
          },
          "alias" : "c_struct"
        } ],
        "activeTab" : "conditions",
        "columnsSelector" : [ "BlHqzu9H##c_smallint", "yUsaRyCB##c_int", "yUsaRyCB##c_string", "mwsXc0vv##customer_id", "y5EZB8_Ia53kiJQCXZmVD$$Kw0-fK32HQV0hIUYrj77b##customer_id", "M7V8-ft4g1O0UGG9UNmeE$$IqhAy28z5cYDhknfuoGJy##c1", "BlHqzu9H##c_tinyint", "BlHqzu9H##c_smallint", "yUsaRyCB##c_int", "BlHqzu9H##c_bigint", "BlHqzu9H##c_float", "BlHqzu9H##c_double", "BlHqzu9H##c_string", "BlHqzu9H##c_boolean", "BlHqzu9H##c_array", "BlHqzu9H##c_struct" ],
        "headAlias" : "in0"
      },
      "ports" : {
        "inputs" : [ {
          "id" : "BlHqzu9H",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "in0"
        }, {
          "id" : "yUsaRyCB",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "in1"
        }, {
          "id" : "mwsXc0vv",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_expressions",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c1",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in2"
        }, {
          "id" : "y5EZB8_Ia53kiJQCXZmVD$$Kw0-fK32HQV0hIUYrj77b",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "customer_id",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "first_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "last_name",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_expressions",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c1",
              "dataType" : {
                "type" : "String"
              }
            } ]
          },
          "slug" : "in3"
        }, {
          "id" : "M7V8-ft4g1O0UGG9UNmeE$$IqhAy28z5cYDhknfuoGJy",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c1",
              "dataType" : {
                "type" : "Integer"
              }
            } ]
          },
          "slug" : "in4"
        } ],
        "outputs" : [ {
          "id" : "k4m1AFnx",
          "schema" : {
            "providerType" : "Databricks",
            "fields" : [ {
              "name" : "c_tinyint",
              "dataType" : {
                "type" : "TinyInt"
              }
            }, {
              "name" : "c_smallint",
              "dataType" : {
                "type" : "SmallInt"
              }
            }, {
              "name" : "c_int",
              "dataType" : {
                "type" : "Integer"
              }
            }, {
              "name" : "c_bigint",
              "dataType" : {
                "type" : "Bigint"
              }
            }, {
              "name" : "c_float",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_double",
              "dataType" : {
                "type" : "Float"
              }
            }, {
              "name" : "c_string",
              "dataType" : {
                "type" : "String"
              }
            }, {
              "name" : "c_boolean",
              "dataType" : {
                "type" : "Boolean"
              }
            }, {
              "name" : "c_array",
              "dataType" : {
                "type" : "Array",
                "dataType" : {
                  "type" : "String"
                }
              }
            }, {
              "name" : "c_struct",
              "dataType" : {
                "type" : "Struct",
                "fields" : [ {
                  "name" : "city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "store_sales##GeYsRNXZ" : {
      "id" : "store_sales##GeYsRNXZ",
      "component" : "Source",
      "metadata" : {
        "label" : "store_sales",
        "x" : 680,
        "y" : 2640,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "store_sales",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "s22LZrzg",
          "schema" : {
            "providerType" : "databricks",
            "fields" : [ {
              "name" : "SS_SOLD_DATE_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_SOLD_TIME_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_ITEM_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_CUSTOMER_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_CDEMO_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_HDEMO_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_ADDR_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_STORE_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_PROMO_SK",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_TICKET_NUMBER",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_QUANTITY",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_WHOLESALE_COST",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_LIST_PRICE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_SALES_PRICE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_EXT_DISCOUNT_AMT",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_EXT_SALES_PRICE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_EXT_WHOLESALE_COST",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_EXT_LIST_PRICE",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_EXT_TAX",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_COUPON_AMT",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_NET_PAID",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_NET_PAID_INC_TAX",
              "dataType" : {
                "type" : "Decimal"
              }
            }, {
              "name" : "SS_NET_PROFIT",
              "dataType" : {
                "type" : "Decimal"
              }
            } ]
          },
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    }
  },
  "connections" : [ {
    "id" : "i5ijFLNA",
    "source" : "all_type_parquet##lwMehyur",
    "sourcePort" : "ilYjUTr3",
    "target" : "Reformat_1_1##A4Pwhejz",
    "targetPort" : "cgbutB7H"
  }, {
    "id" : "GcsjFP6E",
    "source" : "Reformat_1_1##A4Pwhejz",
    "sourcePort" : "X3M1fvLw",
    "target" : "Reformat_2_1##rZXvNepK",
    "targetPort" : "pnCeMWhu"
  }, {
    "id" : "vUMGqmf6",
    "source" : "env_uitesting_shared_parent_model_1##jwFiFwLQ",
    "sourcePort" : "RDcJ7veI",
    "target" : "AllStunningOne##v8vW5b75",
    "targetPort" : "I78sSQUC"
  }, {
    "id" : "vebdZ71h",
    "source" : "AllStunningOne##v8vW5b75",
    "sourcePort" : "NiR5hs8S",
    "target" : "Aggregate_1##Z3cD0YF5",
    "targetPort" : "aOg91JKA"
  }, {
    "id" : "La4SH41Z",
    "source" : "store_sales##GeYsRNXZ",
    "sourcePort" : "s22LZrzg",
    "target" : "SQLStatement_3##fkV3oU0W",
    "targetPort" : "MEcq8jFh"
  }, {
    "id" : "ko13GD5I",
    "source" : "raw_customers##UJiOhsXH",
    "sourcePort" : "fdTZx2ZE",
    "target" : "qa_complex_macro_1##Lpp5HwrM",
    "targetPort" : "oDlSHpjt"
  }, {
    "id" : "vzscI34K",
    "source" : "qa_complex_macro_1##Lpp5HwrM",
    "sourcePort" : "Xbo8qlXW",
    "target" : "Reformat_1##PatlCksV",
    "targetPort" : "WEVvk0cI"
  }, {
    "id" : "S0KFKdRV",
    "source" : "Reformat_1##PatlCksV",
    "sourcePort" : "aQcA4kXb",
    "target" : "Filter_1##zGXiYYi7",
    "targetPort" : "SwioPJPy"
  }, {
    "id" : "eCW8Xy2o",
    "source" : "store_sales##GeYsRNXZ",
    "sourcePort" : "s22LZrzg",
    "target" : "SQLStatement_2##WFQXW9nZ",
    "targetPort" : "T6BqbnVv"
  }, {
    "id" : "nFkFf1h2",
    "source" : "item##MwOy1r6F",
    "sourcePort" : "D0UZszIU",
    "target" : "SQLStatement_2##WFQXW9nZ",
    "targetPort" : "QV7AhwqK"
  }, {
    "id" : "X3ltXaBL",
    "source" : "date_dim##SwqkB2Ms",
    "sourcePort" : "Fyi3c8nA",
    "target" : "SQLStatement_2##WFQXW9nZ",
    "targetPort" : "Z0hGyoIr"
  }, {
    "id" : "aI1JhM0u",
    "source" : "SQLStatement_1_1##MJyK7YWK",
    "sourcePort" : "q5yxoy3Y",
    "target" : "Join_1_1##yckyF9iu",
    "targetPort" : "Au335GT2"
  }, {
    "id" : "T7leySKc",
    "source" : "SQLStatement_2##WFQXW9nZ",
    "sourcePort" : "E9IXw5H2",
    "target" : "Join_1_1##yckyF9iu",
    "targetPort" : "LSFvehOu"
  }, {
    "id" : "uzoACVTt",
    "source" : "SQLStatement_3##fkV3oU0W",
    "sourcePort" : "wpqGKFNl",
    "target" : "Join_1_1##yckyF9iu",
    "targetPort" : "xwD0BfA6"
  }, {
    "id" : "QNa0dVF4",
    "source" : "env_uitesting_shared_child_model_1##v1E09nnW",
    "sourcePort" : "aalC3wCa",
    "target" : "Limit_6##ct7gxs0n",
    "targetPort" : "JI8WnTzy"
  }, {
    "id" : "ivGtD7pw",
    "source" : "Reformat_2_1##rZXvNepK",
    "sourcePort" : "YpmIGqDg",
    "target" : "Join_1_2##hJe5Lr3V",
    "targetPort" : "r02ari6w"
  }, {
    "id" : "D5L41xgU",
    "source" : "SQLStatement_1_2##RIyxZJgF",
    "sourcePort" : "s64hjpvb",
    "target" : "Join_1_2##hJe5Lr3V",
    "targetPort" : "K6oIk5Yl"
  }, {
    "id" : "o6Wwgvk7",
    "source" : "Limit_6##ct7gxs0n",
    "sourcePort" : "DidjhMf0",
    "target" : "Join_1##KsrGGz8Q",
    "targetPort" : "BlHqzu9H"
  }, {
    "id" : "XoH6rVZX",
    "source" : "env_uitesting_shared_mid_model_1##ulYD9HMP",
    "sourcePort" : "ddrnHtjQ",
    "target" : "Join_1##KsrGGz8Q",
    "targetPort" : "yUsaRyCB"
  }, {
    "id" : "LkiJQfpo",
    "source" : "Join_1_2##hJe5Lr3V",
    "sourcePort" : "qXzWB8a5",
    "target" : "Join_1##KsrGGz8Q",
    "targetPort" : "mwsXc0vv"
  }, {
    "id" : "dQIXNufx",
    "source" : "env_uitesting_main_model_databricks_1##LVcodVNp",
    "sourcePort" : "QKMsi9rE",
    "target" : "Limit_7##sID6H5hk",
    "targetPort" : "tbVrnk6W"
  }, {
    "id" : "OHFXEjrF",
    "source" : "all_type_partitioned##F3f0AZjC",
    "sourcePort" : "c85vCaDW",
    "target" : "SQLStatement_1##jwlMFSCm",
    "targetPort" : "E50iwdAV"
  }, {
    "id" : "HkTnoOwZ",
    "source" : "SQLStatement_1##jwlMFSCm",
    "sourcePort" : "dYvQ1Hez",
    "target" : "OrderBy_2##tn5tX7L3",
    "targetPort" : "iqSkRogO"
  }, {
    "id" : "UQQXWABW",
    "source" : "payments##DKw6BnwY",
    "sourcePort" : "l0X13Mqe",
    "target" : "Reformat_2##pFqAYuoS",
    "targetPort" : "pH3Pkt0G"
  }, {
    "id" : "ObKCxdTA",
    "source" : "orders##XlWrU5ja",
    "sourcePort" : "WHjnD6NV",
    "target" : "Reformat_3##ID8veivS",
    "targetPort" : "FFa20gBq"
  }, {
    "id" : "dyyeirMK",
    "source" : "time_dim##ppttbbpc",
    "sourcePort" : "GuNcQUZc",
    "target" : "Reformat_4##oeHN9sfn",
    "targetPort" : "BB9Ygltc"
  }, {
    "id" : "nvjmLqOQ",
    "source" : "income_band##QZ88c0ni",
    "sourcePort" : "tEPkns1l",
    "target" : "SQLStatement_4##DlqCpdXf",
    "targetPort" : "eybxt2n8"
  }, {
    "id" : "uMIO8TSr",
    "source" : "SQLStatement_4##DlqCpdXf",
    "sourcePort" : "lf4uh5qK",
    "target" : "Reformat_5##IkQd1DDf",
    "targetPort" : "tH3ENkVw"
  }, {
    "id" : "TyommQgE",
    "source" : "store_returns##xzi6NnDO",
    "sourcePort" : "ogOof79b",
    "target" : "SQLStatement_4_1##iBO6Aot0",
    "targetPort" : "vdEOP7Y5"
  }, {
    "id" : "JNNJ52EM",
    "source" : "SQLStatement_4_1##iBO6Aot0",
    "sourcePort" : "IKyWOh13",
    "target" : "Reformat_6##gPFOWxFo",
    "targetPort" : "orl58slR"
  }, {
    "id" : "DvLIwUgq",
    "source" : "Reformat_5##IkQd1DDf",
    "sourcePort" : "brlV3o5Y",
    "target" : "combine_multiple_tables_2##E16CusBx",
    "targetPort" : "TwrtFNVi"
  }, {
    "id" : "GJkQJQlT",
    "source" : "Reformat_6##gPFOWxFo",
    "sourcePort" : "PoSYvB8f",
    "target" : "combine_multiple_tables_2##E16CusBx",
    "targetPort" : "qBdQQxNI"
  }, {
    "id" : "hQTkWe9O",
    "source" : "Reformat_4##oeHN9sfn",
    "sourcePort" : "MM1urAHe",
    "target" : "combine_multiple_tables_2##E16CusBx",
    "targetPort" : "NxGqCnY1"
  }, {
    "id" : "s7EkEkmu",
    "source" : "Reformat_3##ID8veivS",
    "sourcePort" : "egxik6Cg",
    "target" : "combine_multiple_tables_2##E16CusBx",
    "targetPort" : "RXAOGoix"
  }, {
    "id" : "YhKfxLPj",
    "source" : "Reformat_2##pFqAYuoS",
    "sourcePort" : "ZEgrwZls",
    "target" : "combine_multiple_tables_2##E16CusBx",
    "targetPort" : "Eg55knoS"
  }, {
    "id" : "QWBa6J2c",
    "source" : "model_with_only_seed_base##GxpLQniE",
    "sourcePort" : "LQmomZ89",
    "target" : "Join_3##ETdbPKmj",
    "targetPort" : "sMzEAFmO"
  }, {
    "id" : "ZTl9NvXG",
    "source" : "Limit_7##sID6H5hk",
    "sourcePort" : "MliIlQcW",
    "target" : "Join_3##ETdbPKmj",
    "targetPort" : "bIp0j6rS"
  }, {
    "id" : "xX2eLpdI",
    "source" : "Join_1_1##yckyF9iu",
    "sourcePort" : "pbR7Jfr8",
    "target" : "Join_3##ETdbPKmj",
    "targetPort" : "OrUSthAG"
  }, {
    "id" : "l4svzK9F",
    "source" : "OrderBy_2##tn5tX7L3",
    "sourcePort" : "ZHDyNW2h",
    "target" : "Join_3##ETdbPKmj",
    "targetPort" : "r8QvGEUU"
  }, {
    "id" : "mvWvHy8K",
    "source" : "combine_multiple_tables_2##E16CusBx",
    "sourcePort" : "Oi9YT5Yy",
    "target" : "Join_3##ETdbPKmj",
    "targetPort" : "Faggny9K"
  }, {
    "id" : "LWyZG5Qf",
    "source" : "Filter_1##zGXiYYi7",
    "sourcePort" : "GCEUIp4D",
    "target" : "Limit_1##EOyLADxS",
    "targetPort" : "u2bN9XKv"
  }, {
    "id" : "M0UXt0BP",
    "source" : "Join_1##KsrGGz8Q",
    "sourcePort" : "k4m1AFnx",
    "target" : "Limit_2##ekcIMiZ5",
    "targetPort" : "mFzdmMJg"
  }, {
    "id" : "oCUu3CA7",
    "source" : "Join_3##ETdbPKmj",
    "sourcePort" : "EqLq0w8e",
    "target" : "Limit_3##NzlG2H7e",
    "targetPort" : "sLVj5ub9"
  }, {
    "id" : "EMt7WHYw",
    "source" : "Limit_1##EOyLADxS",
    "sourcePort" : "J4VY8q9l",
    "target" : "OrderBy_1##Nov0PI7m",
    "targetPort" : "Hvj7Ktw5"
  }, {
    "id" : "rz9xG5m7",
    "source" : "OrderBy_1##Nov0PI7m",
    "sourcePort" : "pLbI7JNq",
    "target" : "Limit_4##vwyI2XTn",
    "targetPort" : "HHjAADI1"
  }, {
    "id" : "z7rFAm9l",
    "source" : "SQLStatement_1##jwlMFSCm",
    "sourcePort" : "dYvQ1Hez",
    "target" : "Limit_4_1##hp96M7T4",
    "targetPort" : "SuyaY1ba"
  }, {
    "id" : "F0o86bLg",
    "source" : "Aggregate_1##Z3cD0YF5",
    "sourcePort" : "xkTGmy43",
    "target" : "Limit_5##fwKxhZIv",
    "targetPort" : "QFNpzYCR"
  }, {
    "id" : "p34IlWKc",
    "source" : "OrderBy_2##tn5tX7L3",
    "sourcePort" : "ZHDyNW2h",
    "target" : "SetOperation_1##Z9favNvy",
    "targetPort" : "H5Qg6FUQ"
  }, {
    "id" : "EO3voLG3",
    "source" : "Limit_4_1##hp96M7T4",
    "sourcePort" : "xVSNxtte",
    "target" : "SetOperation_1##Z9favNvy",
    "targetPort" : "pmEwr5WG"
  }, {
    "id" : "ci13qn6p",
    "source" : "OrderBy_2##tn5tX7L3",
    "sourcePort" : "ZHDyNW2h",
    "target" : "SetOperation_2##dW4xwIho",
    "targetPort" : "Q1cRRy6y"
  }, {
    "id" : "tgnXIjpn",
    "source" : "SetOperation_1##Z9favNvy",
    "sourcePort" : "k0XRbkWx",
    "target" : "SetOperation_2##dW4xwIho",
    "targetPort" : "uYIamlyQ"
  }, {
    "id" : "KyTEuW56",
    "source" : "OrderBy_2##tn5tX7L3",
    "sourcePort" : "ZHDyNW2h",
    "target" : "SetOperation_3##n62DNNDw",
    "targetPort" : "RnHN032M"
  }, {
    "id" : "ObwEAgVb",
    "source" : "SetOperation_2##dW4xwIho",
    "sourcePort" : "hJHiNTgd",
    "target" : "SetOperation_3##n62DNNDw",
    "targetPort" : "u7aH7U4K"
  }, {
    "id" : "ouXuzFjC",
    "source" : "Limit_2##ekcIMiZ5",
    "sourcePort" : "BviBYCZp",
    "target" : "combine_multiple_tables_1##CFzGW1Jp",
    "targetPort" : "yp0ScvjS"
  }, {
    "id" : "hnPwI2JS",
    "source" : "Limit_5##fwKxhZIv",
    "sourcePort" : "QKP9Qoje",
    "target" : "combine_multiple_tables_1##CFzGW1Jp",
    "targetPort" : "S5DCCTgJ"
  }, {
    "id" : "Tj5tSTCO",
    "source" : "Limit_4##vwyI2XTn",
    "sourcePort" : "sF5Y0lmA",
    "target" : "combine_multiple_tables_1##CFzGW1Jp",
    "targetPort" : "PEm9ff6s"
  }, {
    "id" : "CMvYHAi6",
    "source" : "Limit_3##NzlG2H7e",
    "sourcePort" : "KdzuNnPA",
    "target" : "combine_multiple_tables_1##CFzGW1Jp",
    "targetPort" : "Ra04YYAT"
  }, {
    "id" : "okiyd336",
    "source" : "SetOperation_3##n62DNNDw",
    "sourcePort" : "FVEm8bDX",
    "target" : "combine_multiple_tables_1##CFzGW1Jp",
    "targetPort" : "fhjpTjgP"
  }, {
    "id" : "O44bfGfy",
    "source" : "combine_multiple_tables_1##CFzGW1Jp",
    "sourcePort" : "bHDan6Ra",
    "target" : "env_uitesting_shared_useallmodel_1##K7nUaggS",
    "targetPort" : "Vq5Cc9hh"
  }, {
    "id" : "kLURpkCq6K7LfMgnDhMCX",
    "source" : "W6d_qAb5bk-LsaxrIPlsp$$x7lZIHXDfyCDfMj2s1q8M",
    "sourcePort" : "Jabs7YhDO6CbGeF85Yaku$$s5zflmLYW1Zv76Isl1_iO",
    "target" : "mKXp8sjz3TYCty39kh8nh$$uZ9Tj7Vws_Yt_vlCWtNZU",
    "targetPort" : "dt7b0-pRZgs6uOY76MLYO$$OdIDrshh7GQ1w-tE0RXjZ"
  }, {
    "id" : "g_jbSsXBJbjEAch64DEVa",
    "source" : "mKXp8sjz3TYCty39kh8nh$$uZ9Tj7Vws_Yt_vlCWtNZU",
    "sourcePort" : "7N5n8cnP89-QCAGViGPAU$$52RFdrBSXiSPABkCpRHWb",
    "target" : "IdiUOLEWeYkGn32Rp8fbA$$UirVXr-S6nbTA9r6i4hA4",
    "targetPort" : "cyTf5kLDS4vhncf05X7pO$$qbLcjFBNCDGZzWXcaACud"
  }, {
    "id" : "EEUZkfisf6Hg4ElZFQYok",
    "source" : "mKXp8sjz3TYCty39kh8nh$$uZ9Tj7Vws_Yt_vlCWtNZU",
    "sourcePort" : "7N5n8cnP89-QCAGViGPAU$$52RFdrBSXiSPABkCpRHWb",
    "target" : "9Mp_c6bRdpPSJ8bOzxiac$$7x4oLn_ETLgAz98wpz0p0",
    "targetPort" : "YvBAnk9cfC3mW56FrAvqj$$levU_S5l9WRA1CE7QDcWi"
  }, {
    "id" : "lsau9GiLWmzaF-TmWnLg_",
    "source" : "mKXp8sjz3TYCty39kh8nh$$uZ9Tj7Vws_Yt_vlCWtNZU",
    "sourcePort" : "7N5n8cnP89-QCAGViGPAU$$52RFdrBSXiSPABkCpRHWb",
    "target" : "l-JaVggNmg8hDHWAHBk6l$$rtBfhlbxrxS59PBelfC-T",
    "targetPort" : "yjJzOtIaMYrFghSTjYOLy$$c8X4JxfsiJGyYmDZTa1Qg"
  }, {
    "id" : "C75TO_ELKWzpMFryiNX9e",
    "source" : "mKXp8sjz3TYCty39kh8nh$$uZ9Tj7Vws_Yt_vlCWtNZU",
    "sourcePort" : "7N5n8cnP89-QCAGViGPAU$$52RFdrBSXiSPABkCpRHWb",
    "target" : "jUnVO4j4_v0wTyy37WVrn$$ndjbcRg0nK1HIMBBMuqIY",
    "targetPort" : "mA-bDxdHYJLLi8pRHfohI$$iQ9tT3cvatwqNgD0Isa-j"
  }, {
    "id" : "Kg3ttJceCq7vHQm2lVHFu",
    "source" : "mKXp8sjz3TYCty39kh8nh$$uZ9Tj7Vws_Yt_vlCWtNZU",
    "sourcePort" : "7N5n8cnP89-QCAGViGPAU$$52RFdrBSXiSPABkCpRHWb",
    "target" : "BSkE5lhl3kuOBmKFrVHH6$$tYBfJf76ooV5R4Cfw7Clx",
    "targetPort" : "t6lUxz_Yy4asQG4QquDQi$$ZxqIObK9gwPceU_vojNL0"
  }, {
    "id" : "IIjvVGrUkomPy5nur9C8X",
    "source" : "mKXp8sjz3TYCty39kh8nh$$uZ9Tj7Vws_Yt_vlCWtNZU",
    "sourcePort" : "7N5n8cnP89-QCAGViGPAU$$52RFdrBSXiSPABkCpRHWb",
    "target" : "hISx4s6uMTEFzHvTJ_fRg$$rk1yH8B8lNvan7_I2QuMO",
    "targetPort" : "fw8FlaHAfqhxWleXozpXc$$aieusRosWZBoB2Vf2PRTB"
  }, {
    "id" : "7KE30VH9B36TwNfhx84-D",
    "source" : "mKXp8sjz3TYCty39kh8nh$$uZ9Tj7Vws_Yt_vlCWtNZU",
    "sourcePort" : "7N5n8cnP89-QCAGViGPAU$$52RFdrBSXiSPABkCpRHWb",
    "target" : "EW82T_eUES-HDFSy0dAfr$$_zDs3aowckKO-p21rADGW",
    "targetPort" : "nKnNacAtp0Em3l1QgqALz$$vuemW0CrfgrQwbq9UouTK"
  }, {
    "id" : "WSrh3zIyXV2A1DcDHJg5f",
    "source" : "mKXp8sjz3TYCty39kh8nh$$uZ9Tj7Vws_Yt_vlCWtNZU",
    "sourcePort" : "7N5n8cnP89-QCAGViGPAU$$52RFdrBSXiSPABkCpRHWb",
    "target" : "rTqNSEMqpFtwYBgxl2Tmc$$yODltLa_PtJSNKgLFdOLS",
    "targetPort" : "wPZo8ObT3f-PmcSiqUBjK$$Ue4m5F9KvAM15usg85Ki6"
  }, {
    "id" : "AJmyBLBJiCRa3kLucxRpZ",
    "source" : "rTqNSEMqpFtwYBgxl2Tmc$$yODltLa_PtJSNKgLFdOLS",
    "sourcePort" : "qYAu-63xuibozkqDZfzWy$$s6s0_11ooZGCoqugKx7_O",
    "target" : "hISx4s6uMTEFzHvTJ_fRg$$rk1yH8B8lNvan7_I2QuMO",
    "targetPort" : "PsZekzq4Jq3QeZKSXc-l9$$dzVasNYHhXVTxSsJVUGS6"
  }, {
    "id" : "aCGrcYLTlBmURKsV8PeJ-",
    "source" : "BSkE5lhl3kuOBmKFrVHH6$$tYBfJf76ooV5R4Cfw7Clx",
    "sourcePort" : "MtNOwO9VVpDFRBKNcYVuq$$WOsK4qJnmspQkl4dPQDvg",
    "target" : "ox8-d9dFM60gJhjW8tog1$$mAQP-VGEk51PFkntYK3Gq",
    "targetPort" : "OpoWCcXuNGlrdNaZ_ixkz$$ldYpWIAT_ftEihO8mKH2m"
  }, {
    "id" : "kmPXU01MOEJMqO_zV_QlF",
    "source" : "EW82T_eUES-HDFSy0dAfr$$_zDs3aowckKO-p21rADGW",
    "sourcePort" : "Gg32OgrCf0MA7NRgw-_Ke$$HvzPP0Q8TtFkgmtKDEgk-",
    "target" : "ox8-d9dFM60gJhjW8tog1$$mAQP-VGEk51PFkntYK3Gq",
    "targetPort" : "cPT2svWr6GXcSyQxiKRx-$$J4NWtvQAkDbZp_gUgha2b"
  }, {
    "id" : "SqAseRmEhH6dnS5eWlyr3",
    "source" : "9Mp_c6bRdpPSJ8bOzxiac$$7x4oLn_ETLgAz98wpz0p0",
    "sourcePort" : "8J24N72fNjVtljwfnemis$$jtscL17RoeP1jim_PQaTu",
    "target" : "ox8-d9dFM60gJhjW8tog1$$mAQP-VGEk51PFkntYK3Gq",
    "targetPort" : "CtLgd6C6ZCp6WKa6XXUoX$$OcK6s3buCnqLHyXmoiiy_"
  }, {
    "id" : "YrvMt9yJMyQztiJIGVOil",
    "source" : "IdiUOLEWeYkGn32Rp8fbA$$UirVXr-S6nbTA9r6i4hA4",
    "sourcePort" : "s3NZqNvHNSdwwkLQnZY62$$phLB5PqAJuF4Su_D51jKq",
    "target" : "ox8-d9dFM60gJhjW8tog1$$mAQP-VGEk51PFkntYK3Gq",
    "targetPort" : "c-fb-RhfWUWDFe3VSyZ5D$$sNhYcZ2A0MYvLWaBpLe_6"
  }, {
    "id" : "c6lgUUMV-dvd4_s1Yz8hF",
    "source" : "l-JaVggNmg8hDHWAHBk6l$$rtBfhlbxrxS59PBelfC-T",
    "sourcePort" : "IwvYuixHVo2mVEkmh7Tnx$$dDtCmlwhzvTjyw1sqZJQn",
    "target" : "ox8-d9dFM60gJhjW8tog1$$mAQP-VGEk51PFkntYK3Gq",
    "targetPort" : "niD2Y4b9XoLiSIeJ5F4zM$$TlfRpjYADFnXdc42ASXtB"
  }, {
    "id" : "apdOMPK7E_Gw1tAknxYwm",
    "source" : "ox8-d9dFM60gJhjW8tog1$$mAQP-VGEk51PFkntYK3Gq",
    "sourcePort" : "SRWLX-L3GoWGoB7jDMTD-$$MmoHXOPBW7Vzo2LYm_3hP",
    "target" : "n3NKUmEIaVMtN91cS1kPQ$$s1Yga8Ex3ZCAfPXxLi3uz",
    "targetPort" : "hpJGBz2MRalwZnxakPpzb$$kr42ohUpzykVQKQodQkj-"
  }, {
    "id" : "eHjVmyg1jUmp328Amr78r",
    "source" : "5bK-0P_bbnAej8hjWsHNr$$oLWV4A3UEpaN3juZ_nAwj",
    "sourcePort" : "YIbh8vWs-f3WyS6nzHgpK$$7qPiN7dg_ehqpjYtyqnJQ",
    "target" : "n3NKUmEIaVMtN91cS1kPQ$$s1Yga8Ex3ZCAfPXxLi3uz",
    "targetPort" : "TKY2aKiXkd-92F2R1XuLV$$b4Dt05YmjSU-hAv0qMewx"
  }, {
    "id" : "5FN4mbGIaaYOGFV3h_8KP",
    "source" : "Tkk8wxQknKN8zZDBOxfbQ$$SBgC6geH0WTyM3DXu7YuY",
    "sourcePort" : "H6SeJ7TsjEsUVJc8gs4KS$$mk6ktrLZtAHPuXHeE4kxr",
    "target" : "5bK-0P_bbnAej8hjWsHNr$$oLWV4A3UEpaN3juZ_nAwj",
    "targetPort" : "bboXLz5yOuPoWkaqQCkuz$$fyba9HA-pP7jA6wVSUepX"
  }, {
    "id" : "XxU_d2buMWAgiEuRE8t15",
    "source" : "hISx4s6uMTEFzHvTJ_fRg$$rk1yH8B8lNvan7_I2QuMO",
    "sourcePort" : "XBIAY3fafZpzEzIReElYr$$4UeehMPY8OktrBwfNGr4B",
    "target" : "5bK-0P_bbnAej8hjWsHNr$$oLWV4A3UEpaN3juZ_nAwj",
    "targetPort" : "pKNZqmrIMc9FJ5HQaTxpr$$Wq0lDtYPsMMJitZ0E2StZ"
  }, {
    "id" : "r30fEaxcFm1y97POGebxN",
    "source" : "jUnVO4j4_v0wTyy37WVrn$$ndjbcRg0nK1HIMBBMuqIY",
    "sourcePort" : "K97HpHPOF5rjAyD1Mq0Ta$$v_r3aDRKAsd32dRQ-Q9MZ",
    "target" : "5bK-0P_bbnAej8hjWsHNr$$oLWV4A3UEpaN3juZ_nAwj",
    "targetPort" : "X_RyXA5MVF85TwN8jw1Xw$$zGH5R4X1oi4OiWb8b1a1z"
  }, {
    "id" : "ki19JAzeeYkJH-tzWCBg0",
    "source" : "l-JaVggNmg8hDHWAHBk6l$$rtBfhlbxrxS59PBelfC-T",
    "sourcePort" : "IwvYuixHVo2mVEkmh7Tnx$$dDtCmlwhzvTjyw1sqZJQn",
    "target" : "5bK-0P_bbnAej8hjWsHNr$$oLWV4A3UEpaN3juZ_nAwj",
    "targetPort" : "RAfm-Njhe_6x62YwoZ3i9$$AFZ6y-KLEwQGLbEzqmUM9"
  }, {
    "id" : "ZhmCMdVgigxQ3TpTBqe5N",
    "source" : "IdiUOLEWeYkGn32Rp8fbA$$UirVXr-S6nbTA9r6i4hA4",
    "sourcePort" : "s3NZqNvHNSdwwkLQnZY62$$phLB5PqAJuF4Su_D51jKq",
    "target" : "5bK-0P_bbnAej8hjWsHNr$$oLWV4A3UEpaN3juZ_nAwj",
    "targetPort" : "-y1d_vfHpZY0B5mlgpC5p$$IPa-e6nR0qc2ch0G_22at"
  }, {
    "id" : "XwZclgGN-DdY_nuBEEZnf",
    "source" : "n3NKUmEIaVMtN91cS1kPQ$$s1Yga8Ex3ZCAfPXxLi3uz",
    "sourcePort" : "UKBJHwCgWU8ygAn6fUuTu$$miO0O1MmjBYJ6gzN1MpSE",
    "target" : "Y6ymNh1JWmr3bziWIZwga$$6hK5c5KQ4sOI7St0USX81",
    "targetPort" : "nOk9jmBlVgHxM7ccS026d$$XwCehJSG0U6I3Il1pgYoH"
  }, {
    "id" : "abeZ1FYqRcX8NEIs7woaR",
    "source" : "Y6ymNh1JWmr3bziWIZwga$$6hK5c5KQ4sOI7St0USX81",
    "sourcePort" : "qhJr5N-iV_R80oJzvydXu$$GxOGKVKOKmefwvfyMwijD",
    "target" : "Join_1##KsrGGz8Q",
    "targetPort" : "y5EZB8_Ia53kiJQCXZmVD$$Kw0-fK32HQV0hIUYrj77b"
  }, {
    "id" : "i2rnlIuKTCZBY2oApG1TZ",
    "source" : "h3ZPq_VCXMd63fGa-weyU$$thDyi79J68_nF2mWyFsmv",
    "sourcePort" : "zpF2jWvbJ4670r_qtkoAA$$J4SAI2Tyx5B3tDN7l08fv",
    "target" : "V8eyfhE5CmHBRs9gFoVT4$$8BD87yZF0blk_c2kv9bdk",
    "targetPort" : "j2TAIhyzd2D9Y6GosmnRE$$8tqHFdCLqlsPR87NHcNJM"
  }, {
    "id" : "oANKxwIfUAYTdIe-hbSVc",
    "source" : "V8eyfhE5CmHBRs9gFoVT4$$8BD87yZF0blk_c2kv9bdk",
    "sourcePort" : "GBOx_fP9_bBsklFw4dbbl$$UUt2EKOHLn9I4sSyJgMfs",
    "target" : "l94-33GFG9ZO7EnrFdVtN$$-NP3p_xMkE7JIBA034QCo",
    "targetPort" : "OKyBSyTTYsxmM9kGWOQYH$$Q8eK9XQaXw-FhKff5Rwtx"
  }, {
    "id" : "y6gZKXkuFgp39ypxVuAp6",
    "source" : "l94-33GFG9ZO7EnrFdVtN$$-NP3p_xMkE7JIBA034QCo",
    "sourcePort" : "OlCpopT5D5idkearGoLzE$$Br3g7ON89e6azyy4xunSR",
    "target" : "nxXdAzcE9uWwuUhiXyvKf$$q5Gfa-2JHT3OWys4HlwY8",
    "targetPort" : "vBUWTvZkTw2UK3Lvnw0-l$$Eu95OTxt888IkMbQeJj_P"
  }, {
    "id" : "nalebDEL9DXguSX-WY388",
    "source" : "kFRxtasDg77vJkIjTedAK$$E_H3Z5FG_JGBOgCQ_jhz_",
    "sourcePort" : "OdJVe7j5fyZdozqyCEj1Q$$zcAnEwSLxGVti0YuQ3PQ9",
    "target" : "bFARtp99r2bhG4RfZt2Ow$$YEjDakeTm_6R-djX5pdu8",
    "targetPort" : "40ZHwSaTnTf4pftVs8QZU$$ZaEtoGU0Kd6wBd-a23XR0"
  }, {
    "id" : "HbuXDSY59GJjNI_ui3mKN",
    "source" : "nxXdAzcE9uWwuUhiXyvKf$$q5Gfa-2JHT3OWys4HlwY8",
    "sourcePort" : "prpTjLun0gluHDDBQNETe$$4n_9yXOMYsQDaMaz5GVwN",
    "target" : "kFRxtasDg77vJkIjTedAK$$E_H3Z5FG_JGBOgCQ_jhz_",
    "targetPort" : "B7O38zNuxIGns5xwsk8c9$$CK3fjudXCOMWZBCHtx5T4"
  }, {
    "id" : "zpEdUNtW48ZCIHKxL9dBn",
    "source" : "l94-33GFG9ZO7EnrFdVtN$$-NP3p_xMkE7JIBA034QCo",
    "sourcePort" : "OlCpopT5D5idkearGoLzE$$Br3g7ON89e6azyy4xunSR",
    "target" : "kFRxtasDg77vJkIjTedAK$$E_H3Z5FG_JGBOgCQ_jhz_",
    "targetPort" : "eaRb4eOQNqJ9XcvBX_Nj4$$UJcDSvrcJ8aoqL3q2vqoG"
  }, {
    "id" : "BwJAIbTWm0XDl9ewtilEO",
    "source" : "kFRxtasDg77vJkIjTedAK$$E_H3Z5FG_JGBOgCQ_jhz_",
    "sourcePort" : "OdJVe7j5fyZdozqyCEj1Q$$zcAnEwSLxGVti0YuQ3PQ9",
    "target" : "ZCfsndMhaytWYpv2UzsYW$$i7IAGLLHxmEY1__p4zkDh",
    "targetPort" : "KucpMY1Uq0qUiO8iEloLg$$eDiNN5UKB_S7KLr5keo3z"
  }, {
    "id" : "prD5QSTsEBGYNWL1UVbUK",
    "source" : "kFRxtasDg77vJkIjTedAK$$E_H3Z5FG_JGBOgCQ_jhz_",
    "sourcePort" : "OdJVe7j5fyZdozqyCEj1Q$$zcAnEwSLxGVti0YuQ3PQ9",
    "target" : "zSm6B_o4_AB_i3lQgylua$$FsWyRroFx1UyX1sM5vcfg",
    "targetPort" : "gMMlP1InsymdDbb3v5NYT$$hagMr7VK14aXOmbvQQ4j8"
  }, {
    "id" : "GeITfP2cXgrEhZcolIqUV",
    "source" : "1NraXu90VXy1ym-CYP0MT$$ahN2bn632JHu6jNmK0s76",
    "sourcePort" : "5CMNLU9QQVrWTJmf7YnBT$$oYzHRfdWTP9bXBu6IXgdh",
    "target" : "f0k1aV1_vFJpxY8ixbEYO$$xnFHECv3nLd4FiKcRpyDf",
    "targetPort" : "o07H8q7ux7ys119IFGz-r$$HcpkeyfWeStvJNCDayKNy"
  }, {
    "id" : "ZsyhJeWlnMw-dkDcpNwnd",
    "source" : "V8eyfhE5CmHBRs9gFoVT4$$8BD87yZF0blk_c2kv9bdk",
    "sourcePort" : "GBOx_fP9_bBsklFw4dbbl$$UUt2EKOHLn9I4sSyJgMfs",
    "target" : "1NraXu90VXy1ym-CYP0MT$$ahN2bn632JHu6jNmK0s76",
    "targetPort" : "ECrOw7SuatDdwzXjGadKH$$nnBY3E649f4zcEfVkch0W"
  }, {
    "id" : "Qvg2rPOo5QF9EBHdmkYcJ",
    "source" : "f0k1aV1_vFJpxY8ixbEYO$$xnFHECv3nLd4FiKcRpyDf",
    "sourcePort" : "oVBdsqFnH_cN_ZDa7V97B$$ecrt3SKXs_EKsfBNZX7As",
    "target" : "RwUkJZcN0j_md6VF-bVnG$$oJsWZsDP2SVx-XCy_EN65",
    "targetPort" : "l-gjOwdAkjPyS8CAVdIeE$$tSrV7ZVrQEO5N0NMSnMEA"
  }, {
    "id" : "5K-gf56SKkjV33kKJvLJG",
    "source" : "RwUkJZcN0j_md6VF-bVnG$$oJsWZsDP2SVx-XCy_EN65",
    "sourcePort" : "d0aw4ED62Q-hnHMr9wMp5$$MFS4OVhJtkPqfU0ZO44HG",
    "target" : "kFRxtasDg77vJkIjTedAK$$E_H3Z5FG_JGBOgCQ_jhz_",
    "targetPort" : "kK5GOTikplkSayyo9ZG6z$$_UrZt8z3wAnNAH15y34B_"
  }, {
    "id" : "JPyG6PH4RqzLDulojBP8n",
    "source" : "RwUkJZcN0j_md6VF-bVnG$$oJsWZsDP2SVx-XCy_EN65",
    "sourcePort" : "d0aw4ED62Q-hnHMr9wMp5$$MFS4OVhJtkPqfU0ZO44HG",
    "target" : "YEvBlBE-carjnDzreM_VM$$_dM9DIffx5URPd3zWrSQ_",
    "targetPort" : "tatPRoAt27j2NbSPZ6EaK$$o0WuL1ZG8L9FqJ_s6hIHQ"
  }, {
    "id" : "HAsWADM4wmX_SsaNeu39g",
    "source" : "ZCfsndMhaytWYpv2UzsYW$$i7IAGLLHxmEY1__p4zkDh",
    "sourcePort" : "JiOa7X8BotUzbssnuxi7c$$1Y8tEzU7XRPCQBKs98EOE",
    "target" : "Ob4ao-9UUr_aQDB7lphdd$$09CToGxHslJbg513gwLxB",
    "targetPort" : "nMz85fvIbrCb1GSsF3ihH$$SE2689QPOnEPlZAvx7sDb"
  }, {
    "id" : "lZI0B2frhsXJIlBAy2nap",
    "source" : "zSm6B_o4_AB_i3lQgylua$$FsWyRroFx1UyX1sM5vcfg",
    "sourcePort" : "B9NeKX9Qb51YQa8C1-ZVd$$2couGb5-xe6sTPk4qeZKH",
    "target" : "Ob4ao-9UUr_aQDB7lphdd$$09CToGxHslJbg513gwLxB",
    "targetPort" : "iJf9tCmhX5oIpF8d6yd7F$$xEv2E2TdpkD8Jvf3p9EY1"
  }, {
    "id" : "EgOtv3hcuXJ3ikytjpOEZ",
    "source" : "ZCfsndMhaytWYpv2UzsYW$$i7IAGLLHxmEY1__p4zkDh",
    "sourcePort" : "JiOa7X8BotUzbssnuxi7c$$1Y8tEzU7XRPCQBKs98EOE",
    "target" : "EPe4orQ_A0uy5uLNbIw_V$$_27SHh1El0JM4vTamx3-b",
    "targetPort" : "1l0GDSONBNqBuSD1E5UI8$$qvYsc9QOIt9TMOcz8vNTd"
  }, {
    "id" : "TtQvg-F3rrrEDzP3EEQxa",
    "source" : "zSm6B_o4_AB_i3lQgylua$$FsWyRroFx1UyX1sM5vcfg",
    "sourcePort" : "B9NeKX9Qb51YQa8C1-ZVd$$2couGb5-xe6sTPk4qeZKH",
    "target" : "EPe4orQ_A0uy5uLNbIw_V$$_27SHh1El0JM4vTamx3-b",
    "targetPort" : "h3uJ2FgVBLbGvxh7fRr6P$$vEeINHmjoNJJe2fb3v71z"
  }, {
    "id" : "x_YabDp0CtCD_pTTxLO4F",
    "source" : "ZCfsndMhaytWYpv2UzsYW$$i7IAGLLHxmEY1__p4zkDh",
    "sourcePort" : "JiOa7X8BotUzbssnuxi7c$$1Y8tEzU7XRPCQBKs98EOE",
    "target" : "yWqyHE3vULF-kgbcyWxi3$$ozRGF9r-CNY7l0CsfL5TM",
    "targetPort" : "vwQhYMvHlgKv3lhLinGvM$$k0OyC-p750xIqG23GQgOa"
  }, {
    "id" : "vQms83H0S7YRL3IgAsm4y",
    "source" : "zSm6B_o4_AB_i3lQgylua$$FsWyRroFx1UyX1sM5vcfg",
    "sourcePort" : "B9NeKX9Qb51YQa8C1-ZVd$$2couGb5-xe6sTPk4qeZKH",
    "target" : "yWqyHE3vULF-kgbcyWxi3$$ozRGF9r-CNY7l0CsfL5TM",
    "targetPort" : "NmQbM4yZRnrKeRO3RRipy$$OUAbmtQeErWYdQshX4l6p"
  }, {
    "id" : "wL3nh4SlgKI-sEDyGykyk",
    "source" : "YEvBlBE-carjnDzreM_VM$$_dM9DIffx5URPd3zWrSQ_",
    "sourcePort" : "YZv46c37b4hE73k0dEFuf$$nQjIb2NqTY55B14bOlJam",
    "target" : "yWqyHE3vULF-kgbcyWxi3$$ozRGF9r-CNY7l0CsfL5TM",
    "targetPort" : "fyieseuUKIkEcQI8aZ05k$$APpdw8yTNumon1ISB3Hvi"
  }, {
    "id" : "KpU6m4ULiXFdhX46F88hE",
    "source" : "Ob4ao-9UUr_aQDB7lphdd$$09CToGxHslJbg513gwLxB",
    "sourcePort" : "CksExcWiaezsNpSMwkaM-$$1DdsHICXnDrgmnQBdm0UV",
    "target" : "FTbwc8Z4wsafebhYLeLfm$$t-hAMFdH0GgYji_Xm8XaR",
    "targetPort" : "QY0fR973Jg6Fls3Z35Fzq$$2eFKx64THQ3IC8sGgBw7i"
  }, {
    "id" : "cCin1wcQG-yyHW7Agv0pz",
    "source" : "EPe4orQ_A0uy5uLNbIw_V$$_27SHh1El0JM4vTamx3-b",
    "sourcePort" : "Q_KvrFqWc-ZV06lBam8w6$$6wJ40wPfNiiuueAXs3SIY",
    "target" : "FTbwc8Z4wsafebhYLeLfm$$t-hAMFdH0GgYji_Xm8XaR",
    "targetPort" : "Drp-pFDUOlKgk15EOYGua$$Rk3v7I_mxopIBsGp6qxg0"
  }, {
    "id" : "fX57zMlHbXBFa-0Mly7-3",
    "source" : "yWqyHE3vULF-kgbcyWxi3$$ozRGF9r-CNY7l0CsfL5TM",
    "sourcePort" : "3CM1alyGrNThKH72oITot$$EpKQW0qTxvDxgbADNx7iq",
    "target" : "FTbwc8Z4wsafebhYLeLfm$$t-hAMFdH0GgYji_Xm8XaR",
    "targetPort" : "fzm-HDNSc5xfzFa-VVEGr$$RvFo23fyUffYFBdS1l_zq"
  }, {
    "id" : "7KX093hoUxRouLGHo_z_3",
    "source" : "bFARtp99r2bhG4RfZt2Ow$$YEjDakeTm_6R-djX5pdu8",
    "sourcePort" : "nEHvMzWVRp9VB69KxwK9M$$-p1mRvyUyl2h-vIK5EvrI",
    "target" : "EPe4orQ_A0uy5uLNbIw_V$$_27SHh1El0JM4vTamx3-b",
    "targetPort" : "9O3njWvalAwvR4-yi06Pq$$mdHQGH7d6oS6EuaDx0PG6"
  }, {
    "id" : "7Iey8PXdU6MP7uJK3yAnL",
    "source" : "FTbwc8Z4wsafebhYLeLfm$$t-hAMFdH0GgYji_Xm8XaR",
    "sourcePort" : "gPlWlhkaqqKwMJjK8EflW$$FzJgOLz6Nlr9EL9RceEi_",
    "target" : "Join_1##KsrGGz8Q",
    "targetPort" : "M7V8-ft4g1O0UGG9UNmeE$$IqhAy28z5cYDhknfuoGJy"
  } ],
  "component" : "Model"
}
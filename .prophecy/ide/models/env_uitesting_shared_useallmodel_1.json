{
  "id" : "env_uitesting_shared_useallmodel_1",
  "metainfo" : {
    "label" : "env_uitesting_shared_useallmodel_1",
    "autoLayout" : true,
    "staleState" : "none",
    "sourceSuggestions" : {
      "sources" : [ ]
    },
    "graphConfig" : {
      "entityConfig" : {
        "pre_hook" : "[]",
        "materialized" : "table",
        "post_hook" : "[]",
        "type" : "ModelConfig"
      },
      "userDefinedConfig" : {
        "vars" : {
          "v_float" : "10.12",
          "v_int_list" : "[1, 2, 3, 4, 5, 6]",
          "v_boolean" : "True",
          "v_dict" : "{ \"a\": 2, \"b\": \"hello\" }",
          "v_expression" : "'concat(c_struct.city, c_string)'",
          "v_int" : "22",
          "DATASET_ID" : "'1'"
        }
      }
    },
    "version" : 3
  },
  "processes" : {
    "Limit_3##zEotVx2v" : {
      "id" : "Limit_3##zEotVx2v",
      "component" : "Limit",
      "metadata" : {
        "label" : "Limit_3",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "limit" : {
          "expression" : "10"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "yrEorB3X",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "F7okUe4Q",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 39
    },
    "distinct_rows_by##V2c8rtBi" : {
      "id" : "distinct_rows_by##V2c8rtBi",
      "component" : "Deduplicate",
      "metadata" : {
        "label" : "distinct_rows_by_partition_1",
        "phase" : 0,
        "comment" : "Identifies unique entries based on specific city and state attributes, ensuring data integrity.",
        "isLabelGrayed" : false
      },
      "properties" : {
        "dedupColumns" : [ {
          "expression" : {
            "expression" : "c_struct.city"
          }
        }, {
          "expression" : {
            "expression" : "c_boolean"
          }
        }, {
          "expression" : {
            "expression" : "c_struct.state"
          }
        }, {
          "expression" : {
            "expression" : "c_struct.pin"
          }
        } ],
        "dedupType" : "last",
        "columnsSelector" : [ ],
        "orders" : [ {
          "expression" : {
            "expression" : {
              "expression" : "c_int"
            }
          },
          "sortType" : "asc"
        }, {
          "expression" : {
            "expression" : {
              "expression" : "c_bigint"
            }
          },
          "sortType" : "desc"
        } ],
        "useOrderBy" : true
      },
      "ports" : {
        "inputs" : [ {
          "id" : "dt1BtfuL",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "ozgZqvZy",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 9
    },
    "item##CKTy9Wh2" : {
      "id" : "item##CKTy9Wh2",
      "component" : "Source",
      "metadata" : {
        "label" : "item",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "table" : {
          "name" : "item",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "e8VZMlov",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 37
    },
    "SQLStatement_3_1##FLS8gMMz" : {
      "id" : "SQLStatement_3_1##FLS8gMMz",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_3_1",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT \n  DISTINCT customer_id,\n  first_name,\n  c1,\n  c2,\n  c3,\n  c4,\n  c5,\n  c6,\n  c7,\n  c8,\n  c10,\n  c15\n\nFROM AllExReformat\n\nWHERE customer_id NOT LIKE '%1%'\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "t3HKLt6a",
          "slug" : "AllExReformat"
        } ],
        "outputs" : [ {
          "id" : "zCPlXBHr",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 17
    },
    "AllExReformat##KUwuSZiz" : {
      "id" : "AllExReformat##KUwuSZiz",
      "component" : "Reformat",
      "metadata" : {
        "label" : "AllExReformat",
        "phase" : 0,
        "macroDependencies" : [ ],
        "isLabelGrayed" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "expressions" : [ {
          "expression" : {
            "expression" : "customer_id"
          },
          "alias" : "customer_id"
        }, {
          "expression" : {
            "expression" : "first_name"
          },
          "alias" : "first_name"
        }, {
          "expression" : {
            "expression" : "last_name"
          },
          "alias" : "last_name"
        }, {
          "expression" : {
            "expression" : "CAST(customer_id AS INT) > 5\nand CAST(customer_id AS INT) != 0\nor first_name LIKE '%A%'\nor ((1 & 1) == 1)\nor ((2 | 2) == 2)\nand 10 * CAST(customer_id AS INT) == 20\nand last_name != first_name\nand (CAST(customer_id AS INT) BETWEEN 10 AND 20)\nand (ARRAY(10, 20, 30)[2] == 30)\nand (MAP(1, 'Hello', 2, 'World')[1] == 'Hello')\nand (10 ^ 20 == 50)\nand (MAP('three', 3).four == NULL)\nand (named_struct('a', 5, 'b', 'Spark').a == 5)\nand (1 = 2 and 1 == 2)\nand (1 >= 2 and 1 <= 2 and 1 != 3 or 2 > 4 or 4 < 5)\nand (\n      EXISTS(\n        ARRAY(1, NULL, 3), \n        x -> x % 2 == 0)\n    )\nor ilike('Spark', '_PARK')\nor (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\nand (1 IS DISTINCT FROM 5)\nand ('invalid' IS false)\nand isnull(1)\nand ('t' IS NOT true)\nand (1 <=> '1')\nand (1 <> CAST(customer_id AS INT))\nand (10 - 2 + 10 == 8)\nand (NOT true)\nand (false or true)\nand (2 % 0 == 0)\nand ('Spark' || 'SQL' == 'SparkSQL')\nand (r'%SystemDrive%\\Users\\John' LIKE r'%SystemDrive%\\\\Users%')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (2L / 2L == 10)\nand (~ 0 == -1)\nand (base64(aes_encrypt('Spark', 'abcdefghijklmnop')) == NULL)\nand (CAST(aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop') AS STRING) == NULL)\nand (ascii('234') == 234)\nand (base64('Spark SQL') == NULL)\nand (bin(13) == NULL)\nand (binary('Spark SQL') == NULL)\nand (btrim('abcaabaSparkSQLabcaaba', 'abc') != NULL)\nand (char(65) != NULL)\nand (char_length('Spark SQL ') == 10)\nand (character_length('Spark SQL ') == 10)\nand (concat(customer_id, 'hello') != NULL)\nand (concat_ws(',', 'Spark', ARRAY('S', 'Q', NULL, 'L'), NULL) != NULL)\nand contains('SparkSQL', 'Spork')\nand (crc32('Spark') > 0)\nand chr(65) != NULL\nand (3 ^ 5 == 6)\nand (hex(encode('Spark SQL', 'US-ASCII')) != NULL)\nand endswith('SparkSQL', 'SQL')\nand (find_in_set('ab', 'abc,b,ab,c,def') == 2)\nand (format_number(12332.123456, 4) == 2)\nand (format_number(12332.123456, '#.###') == 10)\nand (format_string('Hello World %d %s', 100, 'days') != NULL)\nand (hex('Spark SQL') != NULL)\nand (r'%SystemDrive%\\Users\\John' LIKE '%SystemDrive%\\\\\\\\Users%')\nand (initcap('sPark sql') != NULL)\nand (instr('SparkSQL', 'R') == 2)\nand (lcase('LowerCase') != NULL)\nand (LEFT('Spark SQL', 3) != NULL)\nand (length('Spark SQL ') > 20)\nand (levenshtein('kitten', 'sitting') > 10)\nand (locate('bar', 'abcbarbar') > 2)\nand (locate('bar', 'abcbarbar', 5) > 2)\nand (lower('LowerCase') != NULL)\nand (lpad('hi', 1, '??') != NULL)\nand (hex(lpad(x'1020', 5, x'05')) != NULL)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (md5('Spark') != NULL)\nand (octet_length('Spark SQL') != NULL)\nand (parse_url('http://spark.apache.org/path?query=1', 'HOST') != NULL)\nand (position('bar', 'abcbarbar') > 10)\nand (position('bar', 'abcbarbar', 5) > 5)\nand (printf('Hello World %d %s', 100, 'days') != NULL)\nand (r'%SystemDrive%\\Users\\John' RLIKE r'%SystemDrive%\\\\Users.*')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) > 10)\nand (regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1) != NULL)\nand (regexp_replace('100-200', '(\\\\d+)', 'num') != NULL)\nand (repeat('123', 2) != NULL)\nand (replace('ABCabc', 'abc', 'DEF') != NULL)\nand (reverse('Spark SQL') != NULL)\nand (RIGHT('Spark SQL', 3) != NULL)\nand (rpad('hi', 5, 'ab') != NULL)\nand (hex(rpad(x'1020', 5, x'05')) != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (sentences('Hi there! Good morning.', 'en', 'US') != NULL)\nand (sha('Spark') != NULL)\nand (sha1('Spark') != NULL)\nand (sha2('Spark', 256) != NULL)\nand (soundex('Miller') != NULL)\nand (concat('1', space(2), '1') != NULL)\nand (('->' || split_part('Hello,world,!', ',', 1) || '<-') != NULL)\nand (('->' || split_part('', ',', 1) || '<-') != NULL)\nand (('->' || split_part('Hello,World,!', ',', 0) || '<-') != NULL)\nand (startswith('SparkSQL', 'Spark'))\nand (startswith(NULL, 'Spark'))\nand (substr('Spark SQL', 5, 1) != NULL)\nand (substring_index('www.apache.org', '.', 2) != NULL)\nand (CAST(to_binary('537061726B') AS STRING) != NULL)\nand (CAST(to_binary('537061726B', 'hex') AS STRING) != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (translate('AaBbCc', 'abc', '123') != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (ucase('SparkSql') != NULL)\nand (CAST(unbase64('U3BhcmsgU1FM') AS STRING) != NULL)\nand (decode(unhex('537061726B2053514C'), 'UTF-8') != NULL)\nand (upper('SparkSql') != NULL)\nand (10 / 2 == 5)\nand ((3 | 5) == 2)\nand ((DATE'2021-03-20' - INTERVAL '2' MONTH) != NULL)\nand (10 - 2 + 2 == 4)\nand (2 % 1.8 == 2)\nand (3 ^ 5 == 3)\nand (3 & 5 == 2)\nand (3 * 2 == 2)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (abs(-1) == 1)\nand (acos(1) == 1)\nand (acosh(1) == 1)\nand (asin(0) == 1)\nand (asinh(0) == 1)\nand (atan(0) == 1)\nand (atan2(0, 0) == 1)\nand (atanh(0) == 1)\nand (BIGINT(current_timestamp) > 1)\nand (bit_count(-1) > 1)\nand (bit_get(23Y, 1) == 1)\nand (bround(13.5, -1) == 1)\nand (round(13.5, -1) == 1)\nand (cbrt(27.0) == 3)\nand (ceil(3345.1, -2) == 1)\nand (ceiling(5.4) == 6)\nand (ceiling(3345.1, -2) == 1)\nand (conv('100', 2, 10) == 4)\nand (conv('FFFFFFFFFFFFFFFF', 16, 10) == 1)\nand (cos(pi()) == -1)\nand (cosh(0) == 1)\nand (cot(1) == 1)\nand (csc(pi() / 2) == 2)\nand (decimal('5.2') == 5)\nand (degrees(3.141592653589793) == 10)\nand (double('5.2') == 4)\nand (e() == 2)\nand (exp(1) == 2)\nand (expm1(0) == 1)\nand (factorial(2) == 2)\nand (FLOAT('5.2') == 5)\nand (floor(-0.1) == -1)\nand (floor(3345.1, -2) == 20)\nand (getbit(23Y, 0) == 1)\nand (hypot(3, 4) == 5)\nand (INT(-5.6) == 5)\nand (isnan(CAST('NaN' AS double)))\nand (ln(1) == 1)\nand (log(10, 100) == 2)\nand (log1p(0) == 1)\nand (log2(2) == 1)\nand (log10(10) == 1)\nand (nanvl(CAST('NaN' AS DOUBLE), 123) == 2)\nand (negative(1) == -1)\nand (pmod(-10, 3) == 2)\nand (positive(-1) == -1)\nand (pow(2, 3) * power(2, 3) == 8)\nand (radians(180) == 10)\nand (rand(0) * random(0) == 1)\nand (randn(0) == 1)\nand (rint(12.3456) == 1)\nand (round(2.5, 0) == 3)\nand (sec(pi()) == -1)\nand (sin(0) == 0)\nand (shiftleft(2, 1) == 2)\nand (shiftright(4, 1) == 2)\nand (shiftrightunsigned(4, 1) == 2)\nand (sign(40) == 1)\nand (signum(40) == 1)\nand (sinh(0) == 1)\nand (smallint(-5.6) == 5)\nand (sqrt(4) == 2)\nand (tan(0) == 1)\nand (tanh(0) == 1)\nand (tinyint('12') * tinyint(5.4) == 1)\nand (try_add(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_add(1, 2) == 3)\nand (try_divide(3, 2) == 3)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand (try_subtract(1, 2) == 2)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_subtract(-128Y, 1Y) != NULL)\nand (width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2) == 3)\nand (width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) == 10)\nand (ARRAY(10, 20, 30) != NULL)\nand (\n      (\n        aggregate(\n          ARRAY(1, 2, 3), \n          0, \n          (acc, x) -> acc + x, \n          acc -> acc * 10)\n      ) == 1\n    )\nand (array_contains(ARRAY(1, 2, 3), 2))\nand (array_distinct(ARRAY(1, 2, 3, NULL, 3)) != NULL)\nand (array_except(ARRAY(1, 2, 2, 3), ARRAY(1, 1, 3, 5)) != NULL)\nand (array_intersect(ARRAY(1, 2, 3), ARRAY(1, 3, 3, 5)) != NULL)\nand (array_join(ARRAY('hello', 'world'), ',') != NULL)\nand (array_join(ARRAY('hello', NULL, 'world'), ',', '*') == NULL)\nand (array_max(ARRAY(1, 20, NULL, 3)) > 10)\nand (array_min(ARRAY(1, 20, NULL, 3)) == 1)\nand (array_position(ARRAY(3, 2, 1, 4, 1), 1) == 2)\nand (array_remove(ARRAY(1, 2, 3, NULL, 3, 2), 3) != NULL)\nand (array_repeat('123', 2) != NULL)\nand (array_size(ARRAY(1, NULL, 3, NULL)) == 2)\nand (array_sort(ARRAY('bc', 'ab', 'dc')) != NULL)\nand (array_union(ARRAY(1, 2, 2, 3), ARRAY(1, 3, 5)) != NULL)\nand (arrays_overlap(ARRAY(1, 2, NULL, 3), ARRAY(NULL, 4, 5)) == NULL)\nand (arrays_zip(ARRAY(1, 2), ARRAY('shoe', 'string', 'budget')) == NULL)\nand (cardinality(ARRAY('b', 'd', 'c', 'a')) == 2)\nand (concat(ARRAY(1, 2, 3), ARRAY(4, 5), ARRAY(6)) != NULL)\nand (element_at(MAP(1, 'a', 2, 'b'), 2) == NULL)\nand (\n      EXISTS(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 0)\n    )\nand (\n      EXISTS(\n        ARRAY(0, NULL, 2, 3, NULL), \n        x -> x IS NULL)\n    )\nand (\n      filter(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 1) != NULL\n    )\nand (flatten(ARRAY(ARRAY(1, 2), ARRAY(3, 4))) != NULL)\nand (\n      forall(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 0) == NULL\n    )\nand (reverse(ARRAY(2, 1, 4, 3)) != NULL)\nand (sequence(5, 1) != NULL)\nand (cardinality(ARRAY('b', 'd', 'c', 'a')) == 10)\nand (slice(ARRAY(1, 2, 3, 4), 2, 2) != NULL)\nand (sort_array(ARRAY('b', 'd', NULL, 'c', 'a'), true) != NULL)\nand (\n      transform(\n        ARRAY(1, 2, 3), \n        x -> x + 1) != NULL\n    )\nand (try_element_at(ARRAY(1, 2, 3), 2) == 2)\nand (\n      zip_with(\n        ARRAY('a', 'b', 'c'), \n        ARRAY('d', 'e', 'f'), \n        (x, y) -> concat(x, y)) != NULL\n    )\nand (MAP(1, 'Hello', 2, 'World')[1] != NULL)\nand (cardinality(MAP('a', 1, 'b', 2)) == 2)\nand (element_at(MAP(1, 'a', 2, 'b'), 3) == NULL)\nand (MAP(1.0, '2', 3.0, '4') IS NOT NULL)\nand (map_concat(MAP(1, 'a', 2, 'b'), MAP(3, 'c')) IS NOT NULL)\nand (map_contains_key(MAP(1, 'a', 2, 'b'), 2))\nand (map_entries(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_filter(\n        MAP(1, 0, 2, 2, 3, -1), \n        (k, v) -> k > v) IS NOT NULL\n    )\nand (map_from_arrays(ARRAY(1.0, 3.0), ARRAY('2', '4')) IS NOT NULL)\nand (map_from_entries(ARRAY(STRUCT(1, 'a'), STRUCT(2, 'b'))) IS NOT NULL)\nand (map_keys(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (map_values(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_zip_with(\n        MAP(1, 'a', 2, 'b'), \n        MAP(1, 'x', 2, 'y'), \n        (k, v1, v2) -> concat(v1, v2)) IS NOT NULL\n    )\nand (cardinality(MAP('a', 1, 'b', 2)) == 2)\nand (str_to_map('a:1,b:2,c:3', ',', ':') IS NOT NULL)\nand (\n      transform_keys(\n        map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n        (k, v) -> k + 1) IS NOT NULL\n    )\nand (\n      transform_values(\n        map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n        (k, v) -> k + v) IS NOT NULL\n    )\nand (try_element_at(MAP(1, 'a', 2, 'b'), 2) IS NOT NULL)\nand ((INTERVAL '3:15' HOUR TO MINUTE / 3) IS NOT NULL)\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand (typeof(current_timestamp - (current_date + INTERVAL '1' DAY)) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (add_months('2016-08-31', -6) != NULL)\nand (current_date() != NULL)\nand (current_timestamp() != NULL)\nand (current_timezone() != NULL)\nand (DATE('2021-03-21') != NULL)\nand (date_add('2016-07-30', 1) != NULL)\nand (date_format('2016-04-08', 'y') == 2016)\nand (date_from_unix_date(1) != NULL)\nand (date_sub('2016-07-30', 1) != NULL)\nand (date_trunc('YEAR', '2015-03-05T09:32:05.359') != NULL)\nand (datediff('2009-07-31', '2009-07-30') == 1)\nand (day('2009-07-30') == 30)\nand (dayofmonth('2009-07-30') == 30)\nand (dayofweek('2009-07-30') == 5)\nand (dayofyear('2016-04-09') == 100)\nand (EXTRACT(SECONDS FROM INTERVAL '5:00:30.001' HOUR TO SECOND) == 30)\nand (EXTRACT(WEEK FROM TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') != NULL)\nand (from_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (from_utc_timestamp('2016-08-31', 'Asia/Seoul') != NULL)\nand (hour('2009-07-30 12:58:59') == 10)\nand (last_day('2009-01-12') IS NOT NULL)\nand (make_date(2013, 7, 15) IS NOT NULL)\nand (make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)\nand (make_ym_interval(100, 5) IS NOT NULL)\nand (minute('2009-07-30 12:58:59') == 58)\nand (month('2016-07-30') == 7)\nand (months_between('1997-02-28 10:30:00', '1996-10-30') == 3)\nand (months_between('1997-02-28 10:30:00', '1996-10-30', false) == 2)\nand (next_day('2015-01-14', 'TU') != NULL)\nand (now() != NULL)\nand (quarter('2016-08-31') == 3)\nand (second('2009-07-30 12:58:59') == 59)\nand (TIMESTAMP(123) != NULL)\nand (TIMESTAMP('2020-04-30 12:25:13.45') != NULL)\nand (timestamp_micros(1230219000123123) != NULL)\nand (timestamp_millis(1230219000123) != NULL)\nand (timestamp_seconds(1230219000) != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (trunc('2015-10-27', 'YEAR') != NULL)\nand (trunc('2019-08-04', 'quarter') != NULL)\nand (try_add(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_add(DATE'2021-03-31', INTERVAL '1' MONTH) != NULL)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (try_subtract(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (unix_date(DATE('1970-01-02')) == 1)\nand (unix_micros(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_millis(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 1)\nand (weekday(DATE'2009-07-30') == 1)\nand (EXTRACT(DAYOFWEEK_ISO FROM DATE'2009-07-30') == 4)\nand (weekofyear('2008-02-20') == 8)\nand (year('2016-07-30') == 2016)\nand (ARRAY(1, 2, 3) != NULL)\nand (BIGINT('5') == 5)\nand (binary('Spark SQL') != NULL)\nand (BOOLEAN(1))\nand (CAST(5.6 AS DECIMAL (2, 0)) != NULL)\nand (CAST(INTERVAL '1-2' YEAR TO MONTH AS INTEGER) == 12)\nand (DATE('2021-03-21') != NULL)\nand (decimal('5.2') == 5)\nand (double('5.2') / 2 == 5)\nand (FLOAT('5.2') / 2 == 2)\nand (INT('5') == 5)\nand (make_date(2013, 7, 15) != NULL)\nand (make_dt_interval(100, 13) != NULL)\nand (make_ym_interval(100, 5) == NULL)\nand (MAP(1.0, '2', 3.0, '4') IS NOT NULL)\nand (named_struct('a', 1, 'b', 2, 'c', 3) IS NOT NULL)\nand (smallint('5') == 5)\nand (STRUCT(1, 2, 3) IS NOT NULL)\nand (tinyint('12') == 12)\nand (TIMESTAMP('2020-04-30 12:25:13.45') != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31 00:12:00') != NULL)\nand (from_csv('1, 0.8', 'a INT, b DOUBLE') != NULL)\nand (schema_of_csv('1,abc') != NULL)\nand (json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') == 5)\nand (json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') != NULL)\nand (schema_of_json('[{\"col\":01}]', MAP('allowNumericLeadingZeros', 'true')) != NULL)\nand (to_json(named_struct('a', 1, 'b', 2)) != NULL)\nand (to_json(MAP(named_struct('a', 1), named_struct('b', 2))) != NULL)\nand (to_json(ARRAY((MAP('a', 1)))) != NULL)\nand (xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()') != NULL)\nand (xpath_boolean('<a><b>1</b></a>', 'a/b'))\nand (xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 3)\nand (xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c') != NULL)\nand (\n      assert_true(\n        0 < 1) == NULL\n    )\nand (\n      (\n        CASE\n          WHEN 1 > 0\n            THEN 1\n          WHEN 2 > 0\n            THEN 2.0\n          ELSE 1.2\n        END\n      ) == 1\n    )\nand (\n      (\n        CASE 3\n          WHEN 1\n            THEN 'A'\n          WHEN 2\n            THEN 'B'\n          WHEN 3\n            THEN 'C'\n        END\n      ) != NULL\n    )\nand (coalesce(2, 5 / 0) == 2)\nand (current_catalog() != NULL)\nand (current_database() != NULL)\nand (current_user() != NULL)\nand (decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks') != NULL)\nand (elt(1, 'scala', 'java') != NULL)\nand (greatest(10, 9, 2, 4, 3) == 10)\nand (hash('Spark', ARRAY(123), 2) != NULL)\nand (\n      if(\n        1 < 2, \n        'a', \n        'b') != NULL\n    )\nand (ifnull(NULL, ARRAY('2')) != NULL)\nand (isnull(1))\nand (isnotnull(1))\nand (least(10, 9, 2, 4, 3) == 2)\nand (monotonically_increasing_id() > 10)\nand (nullif(2, 2) == NULL)\nand (nvl(NULL, 2) == 2)\nand (nvl2(NULL, 2, 1) == 1)\nand (typeof(1) != NULL)\nand (uuid() != NULL)\nand (xxhash64('Spark', ARRAY(123), 2) != NULL)\nand ('20'::INTEGER == 20)\nand like('Spark', '_park')\nand ('Spark' LIKE SOME('_park', '_ock'))\nand (bitmap_count(x'00') == 10)\nand (charindex('bar', 'abcbarbar') == 1)\nand (decode(x'FEFF0053007000610072006B002000530051004C', 'UTF-16') != NULL)\nand (like('Spark', '_park'))\nand (len('Spark SQL ') > 10)\nand (levenshtein('kitten', 'sitting', 4) > 10)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', 'Z', 'z', '9', 'X') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', lowerChar => 'z', upperChar => 'X') != NULL)\nand (mask('AaBb123-&ASDXYZ921312asd', NULL, NULL, NULL, NULL) != NULL)\nand (overlay('Spark SQL' PLACING '_' FROM 6) != NULL)\nand (overlay('Spark SQL' PLACING 'tructured' FROM 2 FOR 4) != NULL)\nand (overlay(encode('Spark SQL', 'utf-8') PLACING encode('_', 'utf-8') FROM 6) != NULL)\nand (position('bar' IN 'abcbarbar') > 2)\nand (regexp_count('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en') > 2)\nand (regexp_instr('Mary had a little lamb', NULL) != NULL)\nand (regexp_substr(NULL, 'Ste(v|ph)en') != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (STRING(4) != NULL)\nand (substr('Spark SQL', -3) != NULL)\nand (substr('Spark SQL' FROM 5 FOR 1) != NULL)\nand (substr('Spark SQL' FROM -3) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_char(DATE'2016-04-08', 'y') != NULL)\nand (to_char(encode('abc', 'utf-8'), 'utf-8') != NULL)\nand (to_varchar(454, '999') != NULL)\nand (to_varchar(DATE'2016-04-08', 'y') != NULL)\nand (to_varchar(x'537061726b2053514c', 'hex') != NULL)\nand (TRIM( 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(BOTH 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(LEADING 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(TRAILING 'SL' FROM 'SSparkSQLS') != NULL)\nand (\n      CAST(try_aes_decrypt(\n        unbase64('MTIzNDU2Nzg5MDEyMdXvR41sJqwZ6hnTU8FRTTtXbL8yeChIZA=='), \n        '1234567890abcdef', \n        'GCM', \n        'DEFAULT', \n        'Some AAD') AS STRING) != NULL\n    )\nand (url_decode('http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1') != NULL)\nand (url_encode('http://spark.apache.org/path?query=1') != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' + INTERVAL '3' SECOND) != NULL)\nand (bit_reverse(-1) == -1)\nand (bitmap_bit_position(-32768) == 1)\nand (bitmap_bucket_number(-32768) == 1)\nand (MOD(2, 1.8) == 2)\nand (array_append(ARRAY(1, 2, 3), 0) == NULL)\nand (array_compact(ARRAY(1, 2, NULL, 3, NULL, 3)) == NULL)\nand (array_insert(ARRAY('a', 'b', 'c'), 1, 'z') != NULL)\nand (array_prepend(ARRAY(1, 2, 3), 0) != NULL)\nand (get(ARRAY(1, 2, 3), 2) != NULL)\nand (\n      reduce(\n        ARRAY(1, 2, 3), \n        0, \n        (acc, x) -> acc + x) == 2\n    )\nand (shuffle(ARRAY(1, 20, 3, 5)) != NULL)\nand (map_contains_key(MAP(1, 'a', 2, 'b'), 2))\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand (date_diff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (date_part('SECONDS', TIMESTAMP'2019-10-01 00:00:01.000001') == 1)\nand (date_part('Week', TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (dateadd('2016-07-30', 1) != NULL)\nand (dateadd(MICROSECOND, 5, TIMESTAMP'2022-02-28 00:00:00') != NULL)\nand (datediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 11:59:59') == 0)\nand (make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887, 'CET') IS NOT NULL)\nand (make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)\nand (now() != NULL)\nand (timediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (timestampdiff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (to_unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 100)\nand (try_to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand ('20'::INTEGER == 20)\nand (make_interval(100, 11) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)\nand (STRING(5) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_varchar(454, '999') IS NOT NULL)\nand (from_json('{\"a\":1, \"b\":0.8}', 'a INT, b DOUBLE') IS NOT NULL)\nand (get_json_object('{\"a\":\"b\"}', '$.a') IS NOT NULL)\nand (to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), MAP('timestampFormat', 'dd/MM/yyyy')) IS NOT NULL)\nand (to_csv(named_struct('a', 1, 'b', 2)) IS NOT NULL)\nand (from_xml('<p><time>26/08/2015</time></p>', 'time Timestamp', MAP('timestampFormat', 'dd/MM/yyyy')) != NULL)\nand (schema_of_xml('<p><a attr=\"2\">1</a><a>3</a></p>', MAP('excludeAttribute', 'true')) IS NOT NULL)\nand (current_metastore() != NULL)\nand (current_schema() != NULL)\nand (current_version() != NULL)\nand (equal_null(2, 2))\nand (\n      iff(\n        1 < 2, \n        'a', \n        'b') == 'a'\n    )\nand (is_account_group_member('admins'))\nand (is_member('admins'))\nand (luhn_check('12345') == NULL)\nand (user() != NULL)\nand (h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0) != NULL)\nand (h3_coverash3string('{\"type\":\"LineString\",\"coordinates\":[[-122.4194,37.7749],[-118.2437,34.0522],[-74.0060,40.7128]]}', 1) != NULL)\nand (h3_longlatash3(-122.4783, 37.8199, 13) > 0)\nand (h3_longlatash3string(-122.4783, 37.8199, 13) != NULL)\nand (h3_pointash3('POINT(-122.4783 37.8199)', 13) > 0)\nand (h3_pointash3string('{\"type\":\"Point\",\"coordinates\":[]}', 15) == NULL)\nand (h3_pointash3string('POINT(-122.4783 37.8199)', 13) != NULL)\nand (\n      h3_polyfillash3(\n        unhex(\n          '0103000000010000000400000050fc1873d79a5ec0d0d556ec2fe342404182e2c7988f5dc0f46c567dae064140aaf1d24d628052c05e4bc8073d5b444050fc1873d79a5ec0d0d556ec2fe34240'), \n        2) != NULL\n    )\nand (h3_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3('Not-a-valid-rep', 2) == NULL)\nand (h3_try_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_boundaryasgeojson('8009fffffffffff') != NULL)\nand (h3_boundaryasgeojson(599686042433355775) != NULL)\nand (hex(h3_boundaryaswkb(599686042433355775)) != NULL)\nand (h3_boundaryaswkt(599686042433355775) != NULL)\nand (h3_centerasgeojson(599686042433355775) != NULL)\nand (hex(h3_centeraswkb('8009fffffffffff')) == NULL)\nand (h3_centeraswkt('8009fffffffffff') != NULL)\nand (h3_h3tostring(599686042433355775) != NULL)\nand (h3_stringtoh3('85283473fffffff') == NULL)\nand (h3_ischildof('88283471b9fffff', '85283473fffffff'))\nand (h3_ispentagon(590112357393367039))\nand (h3_isvalid('85283473fffffff'))\nand (h3_try_validate(590112357393367039) != NULL)\nand (h3_validate(590112357393367039) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_hexring(599686042433355775, 1) != NULL)\nand (h3_kring(599686042433355775, 1) != NULL)\nand (h3_kringdistances(599686042433355775, 1) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_maxchild(599686042433355775, 10) != NULL)\nand (h3_minchild(599686042433355775, 10) != NULL)\nand (h3_resolution(599686042433355775) == 5)\nand (h3_tochildren(599686042433355775, 6) != NULL)\nand (h3_toparent(599686042433355775, 0) != NULL)\nand (\n      h3_compact(\n        ARRAY(\n          599686042433355775, \n          599686030622195711, \n          599686044580839423, \n          599686038138388479, \n          599686043507097599, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686040285872127, \n          599686041359613951, \n          599686039212130303, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647)) != NULL\n    )\nand (\n      h3_uncompact(\n        ARRAY(\n          599686030622195711, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647, \n          595182446027210751), \n        5) != NULL\n    )"
          },
          "alias" : "c_expressions"
        }, {
          "expression" : {
            "expression" : "conv('100', 2, 10)"
          },
          "alias" : "c1"
        }, {
          "expression" : {
            "expression" : "conv('FFFFFFFFFFFFFFFF', 16, 10)"
          },
          "alias" : "c2"
        }, {
          "expression" : {
            "expression" : "try_add(DATE'2021-03-20', INTERVAL '2' MONTH)"
          },
          "alias" : "c3"
        }, {
          "expression" : {
            "expression" : "width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11)"
          },
          "alias" : "c4"
        }, {
          "expression" : {
            "expression" : "array_except(ARRAY(1, 2, 2, 3), ARRAY(1, 1, 3, 5))"
          },
          "alias" : "c5"
        }, {
          "expression" : {
            "expression" : "cardinality(ARRAY('b', 'd', 'c', 'a'))"
          },
          "alias" : "c6"
        }, {
          "expression" : {
            "expression" : "EXISTS(\n  ARRAY(0, NULL, 2, 3, NULL), \n  x -> x IS NULL)"
          },
          "alias" : "c7"
        }, {
          "expression" : {
            "expression" : "slice(ARRAY(1, 2, 3, 4), 2, 2)"
          },
          "alias" : "c8"
        }, {
          "expression" : {
            "expression" : "add_months('2016-08-31', -6)"
          },
          "alias" : "c9"
        }, {
          "expression" : {
            "expression" : "timestamp_millis(1230219000123)"
          },
          "alias" : "c10"
        }, {
          "expression" : {
            "expression" : "json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}')"
          },
          "alias" : "c11"
        }, {
          "expression" : {
            "expression" : "xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)')"
          },
          "alias" : "c12"
        }, {
          "expression" : {
            "expression" : "'20'::INTEGER"
          },
          "alias" : "c13"
        }, {
          "expression" : {
            "expression" : "TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND"
          },
          "alias" : "c14"
        }, {
          "expression" : {
            "expression" : "to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), MAP('timestampFormat', 'dd/MM/yyyy'))"
          },
          "alias" : "c15"
        }, {
          "expression" : {
            "expression" : "h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0)"
          },
          "alias" : "c16"
        }, {
          "expression" : {
            "expression" : "1 IS DISTINCT FROM 5"
          },
          "alias" : "c17"
        }, {
          "expression" : {
            "expression" : "'Spark' || 'SQL'"
          },
          "alias" : "c18"
        }, {
          "expression" : {
            "expression" : "base64(aes_encrypt('Spark', 'abcdefghijklmnop'))"
          },
          "alias" : "c19"
        }, {
          "expression" : {
            "expression" : "char_length('Spark SQL ')"
          },
          "alias" : "c20"
        }, {
          "expression" : {
            "expression" : "endswith('SparkSQL', 'SQL')"
          },
          "alias" : "c21"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "LUyVBYww",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "h55HgZZD",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 16
    },
    "Subgraph_3##ROOz7rQT" : {
      "id" : "Subgraph_3##ROOz7rQT",
      "component" : "Subgraph",
      "metadata" : {
        "label" : "Subgraph_3",
        "phase" : 0
      },
      "processes" : {
        "pvt1##OgS1XJIo" : {
          "id" : "pvt1##OgS1XJIo",
          "component" : "SQLStatement",
          "metadata" : {
            "label" : "pvt1",
            "phase" : 0,
            "isLabelGrayed" : false
          },
          "properties" : {
            "fileTabs" : [ {
              "path" : "out",
              "id" : "out",
              "language" : "sql",
              "content" : "SELECT emp.employee_ID AS c1\n\nFROM employees AS emp, \nLATERAL (\n  SELECT *\n  \n  FROM departments AS d\n  \n  WHERE emp.department_ID = d.department_ID\n ) AS iv2\n\nORDER BY employee_ID\n"
            } ]
          },
          "ports" : {
            "inputs" : [ {
              "id" : "sRQqpsAU",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "employee_ID",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "last_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "first_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "department_ID",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "project_names",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                } ]
              },
              "slug" : "employees"
            }, {
              "id" : "wuh8r708",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "department_ID",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "department_name",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "departments"
            } ],
            "outputs" : [ {
              "id" : "XnhpwOTg",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c1",
                  "dataType" : {
                    "type" : "Integer"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 6
        },
        "pvt2##W9OVuetO" : {
          "id" : "pvt2##W9OVuetO",
          "component" : "SQLStatement",
          "metadata" : {
            "label" : "pvt2",
            "phase" : 0,
            "isLabelGrayed" : false
          },
          "properties" : {
            "fileTabs" : [ {
              "path" : "out",
              "id" : "out",
              "language" : "sql",
              "content" : "SELECT d.department_ID AS c1\n\nFROM departments AS d \nINNER JOIN LATERAL (\n  SELECT *\n  \n  FROM employees AS e\n  \n  WHERE e.department_ID = d.department_ID\n        and e.employee_ID != (\n              SELECT count(*)\n              \n              FROM SQLStatementtest1232134\n             )\n ) AS iv2\n\nORDER BY employee_ID\n"
            } ]
          },
          "ports" : {
            "inputs" : [ {
              "id" : "a5jibP4K",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "department_ID",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "department_name",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "departments"
            }, {
              "id" : "BmNrMj5R",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "employee_ID",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "last_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "first_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "department_ID",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "project_names",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                } ]
              },
              "slug" : "employees"
            }, {
              "id" : "QnlUkm6F",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "perfid",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "SQLStatementtest1232134"
            } ],
            "outputs" : [ {
              "id" : "NyRXblxC",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c1",
                  "dataType" : {
                    "type" : "Integer"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 5
        },
        "SQLStatement_5##LKuSM0Zp" : {
          "id" : "SQLStatement_5##LKuSM0Zp",
          "component" : "SetOperation",
          "metadata" : {
            "label" : "SQLStatement_5",
            "phase" : 0,
            "isLabelGrayed" : false
          },
          "properties" : {
            "operationType" : "union",
            "preserveDuplicates" : false,
            "useMinus" : false,
            "inputAliases" : [ "pvt", "pvt1", "pvt2" ]
          },
          "ports" : {
            "inputs" : [ {
              "id" : "V6z2k0qw",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c1",
                  "dataType" : {
                    "type" : "Integer"
                  }
                } ]
              },
              "slug" : "pvt"
            }, {
              "id" : "Jq11cpfS",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c1",
                  "dataType" : {
                    "type" : "Integer"
                  }
                } ]
              },
              "slug" : "pvt1"
            }, {
              "id" : "uyhf1B2V",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c1",
                  "dataType" : {
                    "type" : "Integer"
                  }
                } ]
              },
              "slug" : "pvt2"
            } ],
            "outputs" : [ {
              "id" : "NHqWcbKe",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c1",
                  "dataType" : {
                    "type" : "Integer"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 8
        },
        "departments##H1avDTq2" : {
          "id" : "departments##H1avDTq2",
          "component" : "Reformat",
          "metadata" : {
            "label" : "departments",
            "phase" : 0,
            "macroDependencies" : [ ],
            "isLabelGrayed" : false
          },
          "properties" : {
            "columnsSelector" : [ ],
            "expressions" : [ {
              "expression" : {
                "expression" : "c_int * 2"
              },
              "alias" : "department_ID"
            }, {
              "expression" : {
                "expression" : "c_string"
              },
              "alias" : "department_name"
            } ]
          },
          "ports" : {
            "inputs" : [ {
              "id" : "U1L8pH4X",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                } ]
              },
              "slug" : "in0"
            } ],
            "outputs" : [ {
              "id" : "rnWEvL8q",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "department_ID",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "department_name",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 4
        },
        "Reformat_10##ys67K9i7" : {
          "id" : "Reformat_10##ys67K9i7",
          "component" : "Reformat",
          "metadata" : {
            "label" : "Reformat_10",
            "phase" : 0,
            "isLabelGrayed" : false
          },
          "properties" : {
            "columnsSelector" : [ ],
            "expressions" : [ ]
          },
          "ports" : {
            "inputs" : [ {
              "id" : "T8vRhPSR",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                } ]
              },
              "slug" : "SQLStatement_1_1_1"
            } ],
            "outputs" : [ {
              "id" : "wz8T9wg7",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 0
        },
        "SQLStatement_1_1##uCl3DM7V" : {
          "id" : "SQLStatement_1_1##uCl3DM7V",
          "component" : "Deduplicate",
          "metadata" : {
            "label" : "SQLStatement_1_1_1_1",
            "phase" : 0,
            "isLabelGrayed" : false
          },
          "properties" : {
            "dedupColumns" : [ {
              "expression" : {
                "expression" : "c_tinyint"
              }
            } ],
            "dedupType" : "distinct",
            "columnsSelector" : [ ],
            "orders" : [ ],
            "useOrderBy" : false
          },
          "ports" : {
            "inputs" : [ {
              "id" : "R53cObKd",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                } ]
              },
              "slug" : "SQLStatement_1_1_1"
            } ],
            "outputs" : [ {
              "id" : "EmPDjjXl",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 2
        },
        "pvt##d1Rgu24Z" : {
          "id" : "pvt##d1Rgu24Z",
          "component" : "SQLStatement",
          "metadata" : {
            "label" : "pvt",
            "phase" : 0,
            "isLabelGrayed" : false
          },
          "properties" : {
            "fileTabs" : [ {
              "path" : "out",
              "id" : "out",
              "language" : "sql",
              "content" : "SELECT d.department_ID AS c1\n\nFROM departments AS d, \nLATERAL (\n  SELECT *\n  \n  FROM employees AS e\n  \n  WHERE e.department_ID = d.department_ID\n ) AS iv2\n\nORDER BY employee_ID\n"
            } ]
          },
          "ports" : {
            "inputs" : [ {
              "id" : "jWWELAZv",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "department_ID",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "department_name",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "departments"
            }, {
              "id" : "khjueI3t",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "employee_ID",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "last_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "first_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "department_ID",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "project_names",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                } ]
              },
              "slug" : "employees"
            } ],
            "outputs" : [ {
              "id" : "pY3vt5PT",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c1",
                  "dataType" : {
                    "type" : "Integer"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 7
        },
        "employees##ZUc97wb8" : {
          "id" : "employees##ZUc97wb8",
          "component" : "Reformat",
          "metadata" : {
            "label" : "employees",
            "phase" : 0,
            "macroDependencies" : [ ],
            "isLabelGrayed" : false
          },
          "properties" : {
            "columnsSelector" : [ ],
            "expressions" : [ {
              "expression" : {
                "expression" : "c_int * 2"
              },
              "alias" : "employee_ID"
            }, {
              "expression" : {
                "expression" : "c_string"
              },
              "alias" : "last_name"
            }, {
              "expression" : {
                "expression" : "concat(c_string, c_string)"
              },
              "alias" : "first_name"
            }, {
              "expression" : {
                "expression" : "c_int * 2"
              },
              "alias" : "department_ID"
            }, {
              "expression" : {
                "expression" : "ARRAY('p1', 'p2')"
              },
              "alias" : "project_names"
            } ]
          },
          "ports" : {
            "inputs" : [ {
              "id" : "T76Gv6CH",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                } ]
              },
              "slug" : "in0"
            } ],
            "outputs" : [ {
              "id" : "iTvqSl8X",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "employee_ID",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "last_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "first_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "department_ID",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "project_names",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 1
        },
        "SQLStatementtest##EyH5hjiE" : {
          "id" : "SQLStatementtest##EyH5hjiE",
          "component" : "SQLStatement",
          "metadata" : {
            "label" : "SQLStatementtest1232134",
            "phase" : 0,
            "comment" : "Filters specific performance records based on defined criteria.",
            "isLabelGrayed" : false
          },
          "properties" : {
            "fileTabs" : [ {
              "path" : "out",
              "id" : "out",
              "language" : "sql",
              "content" : "{#Filters specific performance records based on defined criteria.#}\nSELECT \n  act1.c_int,\n  act1.c_string::STRING AS perfid\n\nFROM Reformat_10 AS act1\n\nWHERE act1.c_string = 'PERFORM'\n      AND act1.c_int = 1\n      and act1.c_int != (\n            (\n              SELECT count(*)\n              \n              FROM SQLStatement_1_1_1_1\n             )\n            + (\n                SELECT count(*)\n                \n                FROM SQLStatement_2_2_1\n               )\n          )\n"
            } ]
          },
          "ports" : {
            "inputs" : [ {
              "id" : "St9O65RX",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                } ]
              },
              "slug" : "Reformat_10"
            }, {
              "id" : "sUWei6j3",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                } ]
              },
              "slug" : "SQLStatement_1_1_1_1"
            }, {
              "id" : "ClFYDSUI",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                } ]
              },
              "slug" : "SQLStatement_2_2_1"
            } ],
            "outputs" : [ {
              "id" : "dqFDrW2g",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "perfid",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 3
        }
      },
      "connections" : [ {
        "id" : "CFulF0SZ",
        "source" : "SQLStatement_5##LKuSM0Zp",
        "sourcePort" : "NHqWcbKe",
        "target" : "Subgraph_3##ROOz7rQT",
        "targetPort" : "FHybSxAa"
      }, {
        "id" : "oLEyWN7M",
        "source" : "Subgraph_3##ROOz7rQT",
        "sourcePort" : "ipJ3E36Z",
        "target" : "Reformat_10##ys67K9i7",
        "targetPort" : "T8vRhPSR"
      }, {
        "id" : "A4YzRxom",
        "source" : "Reformat_10##ys67K9i7",
        "sourcePort" : "wz8T9wg7",
        "target" : "employees##ZUc97wb8",
        "targetPort" : "T76Gv6CH"
      }, {
        "id" : "J3H48K5t",
        "source" : "Subgraph_3##ROOz7rQT",
        "sourcePort" : "ipJ3E36Z",
        "target" : "SQLStatement_1_1##uCl3DM7V",
        "targetPort" : "R53cObKd"
      }, {
        "id" : "pE99epT7",
        "source" : "Reformat_10##ys67K9i7",
        "sourcePort" : "wz8T9wg7",
        "target" : "SQLStatementtest##EyH5hjiE",
        "targetPort" : "St9O65RX"
      }, {
        "id" : "b762Kfah",
        "source" : "SQLStatement_1_1##uCl3DM7V",
        "sourcePort" : "EmPDjjXl",
        "target" : "SQLStatementtest##EyH5hjiE",
        "targetPort" : "sUWei6j3"
      }, {
        "id" : "pbcjo6CN",
        "source" : "Subgraph_3##ROOz7rQT",
        "sourcePort" : "Bynb45IB",
        "target" : "SQLStatementtest##EyH5hjiE",
        "targetPort" : "ClFYDSUI"
      }, {
        "id" : "LRIsQIiK",
        "source" : "Reformat_10##ys67K9i7",
        "sourcePort" : "wz8T9wg7",
        "target" : "departments##H1avDTq2",
        "targetPort" : "U1L8pH4X"
      }, {
        "id" : "zOnRnjLt",
        "source" : "departments##H1avDTq2",
        "sourcePort" : "rnWEvL8q",
        "target" : "pvt2##W9OVuetO",
        "targetPort" : "a5jibP4K"
      }, {
        "id" : "Gpb74RHW",
        "source" : "employees##ZUc97wb8",
        "sourcePort" : "iTvqSl8X",
        "target" : "pvt2##W9OVuetO",
        "targetPort" : "BmNrMj5R"
      }, {
        "id" : "ZuJK1vl2",
        "source" : "SQLStatementtest##EyH5hjiE",
        "sourcePort" : "dqFDrW2g",
        "target" : "pvt2##W9OVuetO",
        "targetPort" : "QnlUkm6F"
      }, {
        "id" : "fsIdFTKN",
        "source" : "employees##ZUc97wb8",
        "sourcePort" : "iTvqSl8X",
        "target" : "pvt1##OgS1XJIo",
        "targetPort" : "sRQqpsAU"
      }, {
        "id" : "kPouVAPl",
        "source" : "departments##H1avDTq2",
        "sourcePort" : "rnWEvL8q",
        "target" : "pvt1##OgS1XJIo",
        "targetPort" : "wuh8r708"
      }, {
        "id" : "D6nZfzGB",
        "source" : "departments##H1avDTq2",
        "sourcePort" : "rnWEvL8q",
        "target" : "pvt##d1Rgu24Z",
        "targetPort" : "jWWELAZv"
      }, {
        "id" : "uWEGcliY",
        "source" : "employees##ZUc97wb8",
        "sourcePort" : "iTvqSl8X",
        "target" : "pvt##d1Rgu24Z",
        "targetPort" : "khjueI3t"
      }, {
        "id" : "YCPd4BBN",
        "source" : "pvt##d1Rgu24Z",
        "sourcePort" : "pY3vt5PT",
        "target" : "SQLStatement_5##LKuSM0Zp",
        "targetPort" : "V6z2k0qw"
      }, {
        "id" : "VnaIlMrr",
        "source" : "pvt1##OgS1XJIo",
        "sourcePort" : "XnhpwOTg",
        "target" : "SQLStatement_5##LKuSM0Zp",
        "targetPort" : "Jq11cpfS"
      }, {
        "id" : "XXmrqkkQ",
        "source" : "pvt2##W9OVuetO",
        "sourcePort" : "NyRXblxC",
        "target" : "SQLStatement_5##LKuSM0Zp",
        "targetPort" : "uyhf1B2V"
      } ],
      "ports" : {
        "inputs" : [ {
          "id" : "ipJ3E36Z",
          "slug" : "SQLStatement_1_1_1"
        }, {
          "id" : "Bynb45IB",
          "slug" : "SQLStatement_2_2_1"
        } ],
        "outputs" : [ {
          "id" : "FHybSxAa",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : { },
      "canonical" : false,
      "index" : 31
    },
    "all_type_parquet##TYBGaOlN" : {
      "id" : "all_type_parquet##TYBGaOlN",
      "component" : "Source",
      "metadata" : {
        "label" : "all_type_parquet_1",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "table" : {
          "name" : "all_type_parquet",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "dJWuS6Ab",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 56
    },
    "all_type_parquet##eBSnmOcJ" : {
      "id" : "all_type_parquet##eBSnmOcJ",
      "component" : "Source",
      "metadata" : {
        "label" : "all_type_parquet_1_1_1",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "table" : {
          "name" : "all_type_parquet",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "gfLAwObK",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 14
    },
    "env_uitesting_sh##ViNgWa7a" : {
      "id" : "env_uitesting_sh##ViNgWa7a",
      "component" : "Model",
      "metadata" : {
        "label" : "env_uitesting_shared_parent_model_1",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "table" : {
          "name" : "env_uitesting_shared_parent_model_1",
          "sourceType" : "Model"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "E7pQZIbR",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 20
    },
    "env_uitesting_ma##gdBapS9s" : {
      "id" : "env_uitesting_ma##gdBapS9s",
      "component" : "Model",
      "metadata" : {
        "label" : "env_uitesting_main_model_databricks_1",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "table" : {
          "name" : "env_uitesting_main_model_databricks_1",
          "sourceType" : "Model"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "lmchkyLa",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 35
    },
    "final##PC9puBBJ" : {
      "id" : "final##PC9puBBJ",
      "component" : "TargetModel",
      "metadata" : {
        "label" : "env_uitesting_shared_useallmodel_1",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "customQueryDisabled" : true,
        "customQuery" : false,
        "incrementalEditorDisabled" : true,
        "query" : "SELECT *\n\nFROM combine_multiple_tables_1\n",
        "incrementalKey" : false,
        "incremental" : {
          "expression" : "true"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "MqG3nClj",
          "slug" : "combine_multiple_tables_1"
        } ],
        "outputs" : [ {
          "id" : "Cdq3nnnJ",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 57
    },
    "Limit_5##co2K7iJv" : {
      "id" : "Limit_5##co2K7iJv",
      "component" : "Limit",
      "metadata" : {
        "label" : "Limit_5",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "limit" : {
          "expression" : "10"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "jY7OicnF",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "aQF0iwN9",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 23
    },
    "date_dim##XVM1uz2w" : {
      "id" : "date_dim##XVM1uz2w",
      "component" : "Source",
      "metadata" : {
        "label" : "date_dim",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "table" : {
          "name" : "date_dim",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "jufATdlc",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 36
    },
    "Subgraph_10##pzblqig4" : {
      "id" : "Subgraph_10##pzblqig4",
      "component" : "Subgraph",
      "metadata" : {
        "label" : "Subgraph_10",
        "phase" : 0
      },
      "processes" : {
        "model_with_only_##apDJbyY7" : {
          "id" : "model_with_only_##apDJbyY7",
          "component" : "Model",
          "metadata" : {
            "label" : "model_with_only_seed_base",
            "phase" : 0,
            "isLabelGrayed" : false
          },
          "properties" : {
            "table" : {
              "name" : "model_with_only_seed_base",
              "sourceType" : "Model"
            }
          },
          "ports" : {
            "inputs" : [ ],
            "outputs" : [ {
              "id" : "P7cbCZ8B",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "country_code",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "country_label",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "code_1",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "service_label_1",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_macro2",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 5
        },
        "Join_3##g9GosHMr" : {
          "id" : "Join_3##g9GosHMr",
          "component" : "Join",
          "metadata" : {
            "label" : "Join_3",
            "phase" : 0,
            "macroDependencies" : [ ],
            "isLabelGrayed" : false
          },
          "properties" : {
            "conditions" : [ {
              "alias" : "in1",
              "expression" : {
                "expression" : "in0.country_code != in1.p_string"
              },
              "joinType" : "INNER"
            }, {
              "alias" : "in2",
              "expression" : {
                "expression" : "in1.p_string != in2.sm_type"
              },
              "joinType" : "LEFT"
            }, {
              "alias" : "in3",
              "expression" : {
                "expression" : "in2.sm_type != in3.p_string"
              },
              "joinType" : "RIGHT"
            }, {
              "alias" : "in4",
              "expression" : {
                "expression" : "in3.p_string != CAST(in4.IB_INCOME_BAND_SK AS STRING)"
              },
              "joinType" : "SEMI"
            } ],
            "expressions" : [ {
              "expression" : {
                "expression" : "in1.p_int"
              },
              "alias" : "p_int"
            }, {
              "expression" : {
                "expression" : "in1.p_string"
              },
              "alias" : "p_string"
            }, {
              "expression" : {
                "expression" : "in1.c_string"
              },
              "alias" : "c_string"
            }, {
              "expression" : {
                "expression" : "in1.c_int"
              },
              "alias" : "c_int"
            }, {
              "expression" : {
                "expression" : "in1.c_bigint"
              },
              "alias" : "c_bigint"
            }, {
              "expression" : {
                "expression" : "in1.c_smallint"
              },
              "alias" : "c_smallint"
            }, {
              "expression" : {
                "expression" : "in1.c_tinyint"
              },
              "alias" : "c_tinyint"
            }, {
              "expression" : {
                "expression" : "in1.c_float"
              },
              "alias" : "c_float"
            }, {
              "expression" : {
                "expression" : "in1.c_boolean"
              },
              "alias" : "c_boolean"
            }, {
              "expression" : {
                "expression" : "in1.c_array"
              },
              "alias" : "c_array"
            }, {
              "expression" : {
                "expression" : "in1.c_double"
              },
              "alias" : "c_double"
            }, {
              "expression" : {
                "expression" : "in1.c_struct"
              },
              "alias" : "c_struct"
            }, {
              "expression" : {
                "expression" : "in1.c_struct.city"
              },
              "alias" : "c_struct_city"
            }, {
              "expression" : {
                "expression" : "in1.c_struct.state"
              },
              "alias" : "c_struct_state"
            }, {
              "expression" : {
                "expression" : "in1.c_struct.pin"
              },
              "alias" : "c_struct_pin"
            } ],
            "activeTab" : "conditions",
            "columnsSelector" : [ ],
            "headAlias" : "in0"
          },
          "ports" : {
            "inputs" : [ {
              "id" : "LvGr2U5q",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "country_code",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "country_label",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "code_1",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "service_label_1",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_macro2",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "in0"
            }, {
              "id" : "xzGcQVgd",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "p_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "p_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                }, {
                  "name" : "c_id",
                  "dataType" : {
                    "type" : "Integer"
                  }
                } ]
              },
              "slug" : "in1"
            }, {
              "id" : "B5T5znQd",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "substrw_warehouse_name120",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "sm_type",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "cc_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "days_30",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "days_31_60",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "days_61_90",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "days_90_120",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "days_more_than_120",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "i_item_id",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "h8_30_to_9",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              },
              "slug" : "in2"
            }, {
              "id" : "UVY5gb8c",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                }, {
                  "name" : "p_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "p_string",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "in3"
            }, {
              "id" : "hXsSuW7g",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "IB_INCOME_BAND_SK",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "IB_LOWER_BOUND",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "IB_UPPER_BOUND",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                } ]
              },
              "slug" : "in4"
            } ],
            "outputs" : [ {
              "id" : "bQtFXc4r",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "p_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "p_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                }, {
                  "name" : "c_struct_city",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_struct_state",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_struct_pin",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 7
        },
        "SQLStatementtest##xJ3LB9ZB" : {
          "id" : "SQLStatementtest##xJ3LB9ZB",
          "component" : "SQLStatement",
          "metadata" : {
            "label" : "SQLStatementtest15",
            "phase" : 0,
            "comment" : "Filters records from a partitioned dataset based on a specific count condition.",
            "isLabelGrayed" : false
          },
          "properties" : {
            "fileTabs" : [ {
              "path" : "out",
              "id" : "out",
              "language" : "sql",
              "content" : "{#Filters records from a partitioned dataset based on a specific count condition.#}\nSELECT *\n\nFROM all_type_partitioned_1\n\nWHERE c_int != (\n        SELECT count(*)\n        \n        FROM hive_metastore.qa_database.tpcds_uitesting_shared_1\n       )\n\nLIMIT 100\n"
            } ]
          },
          "ports" : {
            "inputs" : [ {
              "id" : "InnYvxsV",
              "schema" : {
                "entityType" : "",
                "providerType" : "databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                }, {
                  "name" : "p_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "p_string",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "all_type_partitioned_1"
            } ],
            "outputs" : [ {
              "id" : "yLyFaRkq",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                }, {
                  "name" : "p_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "p_string",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 2
        },
        "OrderBy_2_1##O1TIFDuY" : {
          "id" : "OrderBy_2_1##O1TIFDuY",
          "component" : "OrderBy",
          "metadata" : {
            "label" : "OrderBy_2_1",
            "phase" : 0,
            "macroDependencies" : [ ],
            "isLabelGrayed" : false
          },
          "properties" : {
            "columnsSelector" : [ ],
            "orders" : [ {
              "expression" : {
                "expression" : "concat(c_string, c_int)"
              },
              "sortType" : "asc"
            }, {
              "expression" : {
                "expression" : "c_tinyint"
              },
              "sortType" : "desc",
              "nullsType" : "nulls first"
            } ]
          },
          "ports" : {
            "inputs" : [ {
              "id" : "nZrCAle2",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                }, {
                  "name" : "p_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "p_string",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "in0"
            } ],
            "outputs" : [ {
              "id" : "HOMc9wU3",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                }, {
                  "name" : "p_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "p_string",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 3
        },
        "Subgraph_8##Z5aYsBYs" : {
          "id" : "Subgraph_8##Z5aYsBYs",
          "component" : "Subgraph",
          "metadata" : {
            "label" : "Subgraph_8",
            "phase" : 0
          },
          "processes" : {
            "combine_multiple##zJpgoMpB" : {
              "id" : "combine_multiple##zJpgoMpB",
              "component" : "Macro",
              "metadata" : {
                "label" : "combine_multiple_tables_3",
                "phase" : 0,
                "macroDependencies" : [ "SQL_DatabricksSharedBasic.combine_multiple_tables" ],
                "isLabelGrayed" : false
              },
              "properties" : {
                "macroName" : "combine_multiple_tables",
                "parameters" : [ {
                  "name" : "table_1",
                  "value" : "'Join_1_1'"
                }, {
                  "name" : "table_2",
                  "value" : "'OrderBy_1_1'"
                }, {
                  "name" : "table_3",
                  "value" : "'Aggregate_1_1'"
                }, {
                  "name" : "table_4",
                  "value" : "'Reformat_3_1'"
                }, {
                  "name" : "table_5",
                  "value" : "'Join_2'"
                }, {
                  "name" : "col_table_1",
                  "value" : "'sm_type'"
                } ],
                "projectName" : "SQL_DatabricksSharedBasic"
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "Sp5baC0m",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "substrw_warehouse_name120",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "sm_type",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "cc_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "days_30",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_31_60",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_61_90",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_90_120",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_more_than_120",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "i_item_id",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "h8_30_to_9",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  },
                  "slug" : "Join_1_1"
                }, {
                  "id" : "MB9uvOvd",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "customer_id",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "first_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "last_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "OrderBy_1_1"
                }, {
                  "id" : "aAx2VHbz",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "c1",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    }, {
                      "name" : "c2",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    } ]
                  },
                  "slug" : "Aggregate_1_1"
                }, {
                  "id" : "nDvKHqDQ",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "c1",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    }, {
                      "name" : "c2",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    } ]
                  },
                  "slug" : "Reformat_3_1"
                }, {
                  "id" : "sJ0FxCf1",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "c1",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    }, {
                      "name" : "c2",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    } ]
                  },
                  "slug" : "Join_2"
                } ],
                "outputs" : [ {
                  "id" : "cPcOUy8d",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "substrw_warehouse_name120",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "sm_type",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "cc_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "days_30",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_31_60",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_61_90",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_90_120",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_more_than_120",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "i_item_id",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "h8_30_to_9",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 12
            },
            "OrderBy_1_1##scicTbxJ" : {
              "id" : "OrderBy_1_1##scicTbxJ",
              "component" : "OrderBy",
              "metadata" : {
                "label" : "OrderBy_1_1",
                "phase" : 0,
                "macroDependencies" : [ ],
                "isLabelGrayed" : false
              },
              "properties" : {
                "columnsSelector" : [ ],
                "orders" : [ {
                  "expression" : {
                    "expression" : "customer_id"
                  },
                  "sortType" : "desc",
                  "nullsType" : "nulls last"
                }, {
                  "expression" : {
                    "expression" : "CAST(customer_id AS INT) > 5"
                  },
                  "sortType" : "asc",
                  "nullsType" : "nulls first"
                }, {
                  "expression" : {
                    "expression" : "CAST(customer_id AS INT) != 0"
                  },
                  "sortType" : "asc",
                  "nullsType" : "nulls first"
                }, {
                  "expression" : {
                    "expression" : "floor(-0.1)"
                  },
                  "sortType" : "desc",
                  "nullsType" : "nulls last"
                }, {
                  "expression" : {
                    "expression" : "pow(2, 3)"
                  },
                  "sortType" : "asc",
                  "nullsType" : "nulls last"
                }, {
                  "expression" : {
                    "expression" : "try_add(DATE'2021-03-20', INTERVAL '2' MONTH)"
                  },
                  "sortType" : "desc",
                  "nullsType" : "nulls last"
                }, {
                  "expression" : {
                    "expression" : "CAST(customer_id AS INT) > 5\nand CAST(customer_id AS INT) != 0\nor first_name LIKE '%A%'\nor ((1 & 1) == 1)\nor ((2 | 2) == 2)\nand 10 * CAST(customer_id AS INT) == 20\nand last_name != first_name\nand (CAST(customer_id AS INT) BETWEEN 10 AND 20)\nand (ARRAY(10, 20, 30)[2] == 30)\nand (MAP(1, 'Hello', 2, 'World')[1] == 'Hello')\nand (10 ^ 20 == 50)\nand (MAP('three', 3).four == NULL)\nand (named_struct('a', 5, 'b', 'Spark').a == 5)\nand (1 = 2 and 1 == 2)\nand (1 >= 2 and 1 <= 2 and 1 != 3 or 2 > 4 or 4 < 5)\nand (\n      EXISTS(\n        ARRAY(1, NULL, 3), \n        x -> x % 2 == 0)\n    )\nor ilike('Spark', '_PARK')\nor (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\nand (1 IS DISTINCT FROM 5)\nand ('invalid' IS false)\nand isnull(1)\nand ('t' IS NOT true)\nand (1 <=> '1')\nand (1 <> CAST(customer_id AS INT))\nand (10 - 2 + 10 == 8)\nand (NOT true)\nand (false or true)\nand (2 % 0 == 0)\nand ('Spark' || 'SQL' == 'SparkSQL')\nand (r'%SystemDrive%\\Users\\John' LIKE r'%SystemDrive%\\\\Users%')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (2L / 2L == 10)\nand (~ 0 == -1)\nand (base64(aes_encrypt('Spark', 'abcdefghijklmnop')) == NULL)\nand (CAST(aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop') AS STRING) == NULL)\nand (ascii('234') == 234)\nand (base64('Spark SQL') == NULL)\nand (bin(13) == NULL)\nand (binary('Spark SQL') == NULL)\nand (btrim('abcaabaSparkSQLabcaaba', 'abc') != NULL)\nand (char(65) != NULL)\nand (char_length('Spark SQL ') == 10)\nand (character_length('Spark SQL ') == 10)\nand (concat(customer_id, 'hello') != NULL)\nand (concat_ws(',', 'Spark', ARRAY('S', 'Q', NULL, 'L'), NULL) != NULL)\nand contains('SparkSQL', 'Spork')\nand (crc32('Spark') > 0)\nand chr(65) != NULL\nand (3 ^ 5 == 6)\nand (hex(encode('Spark SQL', 'US-ASCII')) != NULL)\nand endswith('SparkSQL', 'SQL')\nand (find_in_set('ab', 'abc,b,ab,c,def') == 2)\nand (format_number(12332.123456, 4) == 2)\nand (format_number(12332.123456, '#.###') == 10)\nand (format_string('Hello World %d %s', 100, 'days') != NULL)\nand (hex('Spark SQL') != NULL)\nand (r'%SystemDrive%\\Users\\John' LIKE '%SystemDrive%\\\\\\\\Users%')\nand (initcap('sPark sql') != NULL)\nand (instr('SparkSQL', 'R') == 2)\nand (lcase('LowerCase') != NULL)\nand (LEFT('Spark SQL', 3) != NULL)\nand (length('Spark SQL ') > 20)\nand (levenshtein('kitten', 'sitting') > 10)\nand (locate('bar', 'abcbarbar') > 2)\nand (locate('bar', 'abcbarbar', 5) > 2)\nand (lower('LowerCase') != NULL)\nand (lpad('hi', 1, '??') != NULL)\nand (hex(lpad(x'1020', 5, x'05')) != NULL)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (md5('Spark') != NULL)\nand (octet_length('Spark SQL') != NULL)\nand (parse_url('http://spark.apache.org/path?query=1', 'HOST') != NULL)\nand (position('bar', 'abcbarbar') > 10)\nand (position('bar', 'abcbarbar', 5) > 5)\nand (printf('Hello World %d %s', 100, 'days') != NULL)\nand (r'%SystemDrive%\\Users\\John' RLIKE r'%SystemDrive%\\\\Users.*')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) > 10)\nand (regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1) != NULL)\nand (regexp_replace('100-200', '(\\\\d+)', 'num') != NULL)\nand (repeat('123', 2) != NULL)\nand (replace('ABCabc', 'abc', 'DEF') != NULL)\nand (reverse('Spark SQL') != NULL)\nand (RIGHT('Spark SQL', 3) != NULL)\nand (rpad('hi', 5, 'ab') != NULL)\nand (hex(rpad(x'1020', 5, x'05')) != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (sentences('Hi there! Good morning.', 'en', 'US') != NULL)\nand (sha('Spark') != NULL)\nand (sha1('Spark') != NULL)\nand (sha2('Spark', 256) != NULL)\nand (soundex('Miller') != NULL)\nand (concat('1', space(2), '1') != NULL)\nand (('->' || split_part('Hello,world,!', ',', 1) || '<-') != NULL)\nand (('->' || split_part('', ',', 1) || '<-') != NULL)\nand (('->' || split_part('Hello,World,!', ',', 0) || '<-') != NULL)\nand (startswith('SparkSQL', 'Spark'))\nand (startswith(NULL, 'Spark'))\nand (substr('Spark SQL', 5, 1) != NULL)\nand (substring_index('www.apache.org', '.', 2) != NULL)\nand (CAST(to_binary('537061726B') AS STRING) != NULL)\nand (CAST(to_binary('537061726B', 'hex') AS STRING) != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (translate('AaBbCc', 'abc', '123') != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (ucase('SparkSql') != NULL)\nand (CAST(unbase64('U3BhcmsgU1FM') AS STRING) != NULL)\nand (decode(unhex('537061726B2053514C'), 'UTF-8') != NULL)\nand (upper('SparkSql') != NULL)\nand (10 / 2 == 5)\nand ((3 | 5) == 2)\nand ((DATE'2021-03-20' - INTERVAL '2' MONTH) != NULL)\nand (10 - 2 + 2 == 4)\nand (2 % 1.8 == 2)\nand (3 ^ 5 == 3)\nand (3 & 5 == 2)\nand (3 * 2 == 2)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (abs(-1) == 1)\nand (acos(1) == 1)\nand (acosh(1) == 1)\nand (asin(0) == 1)\nand (asinh(0) == 1)\nand (atan(0) == 1)\nand (atan2(0, 0) == 1)\nand (atanh(0) == 1)\nand (BIGINT(current_timestamp) > 1)\nand (bit_count(-1) > 1)\nand (bit_get(23Y, 1) == 1)\nand (bround(13.5, -1) == 1)\nand (round(13.5, -1) == 1)\nand (cbrt(27.0) == 3)\nand (ceil(3345.1, -2) == 1)\nand (ceiling(5.4) == 6)\nand (ceiling(3345.1, -2) == 1)\nand (conv('100', 2, 10) == 4)\nand (conv('FFFFFFFFFFFFFFFF', 16, 10) == 1)\nand (cos(pi()) == -1)\nand (cosh(0) == 1)\nand (cot(1) == 1)\nand (csc(pi() / 2) == 2)\nand (decimal('5.2') == 5)\nand (degrees(3.141592653589793) == 10)\nand (double('5.2') == 4)\nand (e() == 2)\nand (exp(1) == 2)\nand (expm1(0) == 1)\nand (factorial(2) == 2)\nand (FLOAT('5.2') == 5)\nand (floor(-0.1) == -1)\nand (floor(3345.1, -2) == 20)\nand (getbit(23Y, 0) == 1)\nand (hypot(3, 4) == 5)\nand (INT(-5.6) == 5)\nand (isnan(CAST('NaN' AS double)))\nand (ln(1) == 1)\nand (log(10, 100) == 2)\nand (log1p(0) == 1)\nand (log2(2) == 1)\nand (log10(10) == 1)\nand (nanvl(CAST('NaN' AS DOUBLE), 123) == 2)\nand (negative(1) == -1)\nand (pmod(-10, 3) == 2)\nand (positive(-1) == -1)\nand (pow(2, 3) * power(2, 3) == 8)\nand (radians(180) == 10)\nand (rand(0) * random(0) == 1)\nand (randn(0) == 1)\nand (rint(12.3456) == 1)\nand (round(2.5, 0) == 3)\nand (sec(pi()) == -1)\nand (sin(0) == 0)\nand (shiftleft(2, 1) == 2)\nand (shiftright(4, 1) == 2)\nand (shiftrightunsigned(4, 1) == 2)\nand (sign(40) == 1)\nand (signum(40) == 1)\nand (sinh(0) == 1)\nand (smallint(-5.6) == 5)\nand (sqrt(4) == 2)\nand (tan(0) == 1)\nand (tanh(0) == 1)\nand (tinyint('12') * tinyint(5.4) == 1)\nand (try_add(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_add(1, 2) == 3)\nand (try_divide(3, 2) == 3)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand (try_subtract(1, 2) == 2)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_subtract(-128Y, 1Y) != NULL)\nand (width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2) == 3)\nand (width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) == 10)\nand (ARRAY(10, 20, 30) != NULL)\nand (\n      (\n        aggregate(\n          ARRAY(1, 2, 3), \n          0, \n          (acc, x) -> acc + x, \n          acc -> acc * 10)\n      ) == 1\n    )\nand (array_contains(ARRAY(1, 2, 3), 2))\nand (array_distinct(ARRAY(1, 2, 3, NULL, 3)) != NULL)\nand (array_except(ARRAY(1, 2, 2, 3), ARRAY(1, 1, 3, 5)) != NULL)\nand (array_intersect(ARRAY(1, 2, 3), ARRAY(1, 3, 3, 5)) != NULL)\nand (array_join(ARRAY('hello', 'world'), ',') != NULL)\nand (array_join(ARRAY('hello', NULL, 'world'), ',', '*') == NULL)\nand (array_max(ARRAY(1, 20, NULL, 3)) > 10)\nand (array_min(ARRAY(1, 20, NULL, 3)) == 1)\nand (array_position(ARRAY(3, 2, 1, 4, 1), 1) == 2)\nand (array_remove(ARRAY(1, 2, 3, NULL, 3, 2), 3) != NULL)\nand (array_repeat('123', 2) != NULL)\nand (array_size(ARRAY(1, NULL, 3, NULL)) == 2)\nand (array_sort(ARRAY('bc', 'ab', 'dc')) != NULL)\nand (array_union(ARRAY(1, 2, 2, 3), ARRAY(1, 3, 5)) != NULL)\nand (arrays_overlap(ARRAY(1, 2, NULL, 3), ARRAY(NULL, 4, 5)) == NULL)\nand (arrays_zip(ARRAY(1, 2), ARRAY('shoe', 'string', 'budget')) == NULL)\nand (cardinality(ARRAY('b', 'd', 'c', 'a')) == 2)\nand (concat(ARRAY(1, 2, 3), ARRAY(4, 5), ARRAY(6)) != NULL)\nand (element_at(MAP(1, 'a', 2, 'b'), 2) == NULL)\nand (\n      EXISTS(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 0)\n    )\nand (\n      EXISTS(\n        ARRAY(0, NULL, 2, 3, NULL), \n        x -> x IS NULL)\n    )\nand (\n      filter(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 1) != NULL\n    )\nand (flatten(ARRAY(ARRAY(1, 2), ARRAY(3, 4))) != NULL)\nand (\n      forall(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 0) == NULL\n    )\nand (reverse(ARRAY(2, 1, 4, 3)) != NULL)\nand (sequence(5, 1) != NULL)\nand (cardinality(ARRAY('b', 'd', 'c', 'a')) == 10)\nand (slice(ARRAY(1, 2, 3, 4), 2, 2) != NULL)\nand (sort_array(ARRAY('b', 'd', NULL, 'c', 'a'), true) != NULL)\nand (\n      transform(\n        ARRAY(1, 2, 3), \n        x -> x + 1) != NULL\n    )\nand (try_element_at(ARRAY(1, 2, 3), 2) == 2)\nand (\n      zip_with(\n        ARRAY('a', 'b', 'c'), \n        ARRAY('d', 'e', 'f'), \n        (x, y) -> concat(x, y)) != NULL\n    )\nand (MAP(1, 'Hello', 2, 'World')[1] != NULL)\nand (cardinality(MAP('a', 1, 'b', 2)) == 2)\nand (element_at(MAP(1, 'a', 2, 'b'), 3) == NULL)\nand (MAP(1.0, '2', 3.0, '4') IS NOT NULL)\nand (map_concat(MAP(1, 'a', 2, 'b'), MAP(3, 'c')) IS NOT NULL)\nand (map_contains_key(MAP(1, 'a', 2, 'b'), 2))\nand (map_entries(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_filter(\n        MAP(1, 0, 2, 2, 3, -1), \n        (k, v) -> k > v) IS NOT NULL\n    )\nand (map_from_arrays(ARRAY(1.0, 3.0), ARRAY('2', '4')) IS NOT NULL)\nand (map_from_entries(ARRAY(STRUCT(1, 'a'), STRUCT(2, 'b'))) IS NOT NULL)\nand (map_keys(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (map_values(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_zip_with(\n        MAP(1, 'a', 2, 'b'), \n        MAP(1, 'x', 2, 'y'), \n        (k, v1, v2) -> concat(v1, v2)) IS NOT NULL\n    )\nand (cardinality(MAP('a', 1, 'b', 2)) == 2)\nand (str_to_map('a:1,b:2,c:3', ',', ':') IS NOT NULL)\nand (\n      transform_keys(\n        map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n        (k, v) -> k + 1) IS NOT NULL\n    )\nand (\n      transform_values(\n        map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n        (k, v) -> k + v) IS NOT NULL\n    )\nand (try_element_at(MAP(1, 'a', 2, 'b'), 2) IS NOT NULL)\nand ((INTERVAL '3:15' HOUR TO MINUTE / 3) IS NOT NULL)\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand (typeof(current_timestamp - (current_date + INTERVAL '1' DAY)) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (add_months('2016-08-31', -6) != NULL)\nand (current_date() != NULL)\nand (current_timestamp() != NULL)\nand (current_timezone() != NULL)\nand (DATE('2021-03-21') != NULL)\nand (date_add('2016-07-30', 1) != NULL)\nand (date_format('2016-04-08', 'y') == 2016)\nand (date_from_unix_date(1) != NULL)\nand (date_sub('2016-07-30', 1) != NULL)\nand (date_trunc('YEAR', '2015-03-05T09:32:05.359') != NULL)\nand (datediff('2009-07-31', '2009-07-30') == 1)\nand (day('2009-07-30') == 30)\nand (dayofmonth('2009-07-30') == 30)\nand (dayofweek('2009-07-30') == 5)\nand (dayofyear('2016-04-09') == 100)\nand (EXTRACT(SECONDS FROM INTERVAL '5:00:30.001' HOUR TO SECOND) == 30)\nand (EXTRACT(WEEK FROM TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') != NULL)\nand (from_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (from_utc_timestamp('2016-08-31', 'Asia/Seoul') != NULL)\nand (hour('2009-07-30 12:58:59') == 10)\nand (last_day('2009-01-12') IS NOT NULL)\nand (make_date(2013, 7, 15) IS NOT NULL)\nand (make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)\nand (make_ym_interval(100, 5) IS NOT NULL)\nand (minute('2009-07-30 12:58:59') == 58)\nand (month('2016-07-30') == 7)\nand (months_between('1997-02-28 10:30:00', '1996-10-30') == 3)\nand (months_between('1997-02-28 10:30:00', '1996-10-30', false) == 2)\nand (next_day('2015-01-14', 'TU') != NULL)\nand (now() != NULL)\nand (quarter('2016-08-31') == 3)\nand (second('2009-07-30 12:58:59') == 59)\nand (TIMESTAMP(123) != NULL)\nand (TIMESTAMP('2020-04-30 12:25:13.45') != NULL)\nand (timestamp_micros(1230219000123123) != NULL)\nand (timestamp_millis(1230219000123) != NULL)\nand (timestamp_seconds(1230219000) != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (trunc('2015-10-27', 'YEAR') != NULL)\nand (trunc('2019-08-04', 'quarter') != NULL)\nand (try_add(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_add(DATE'2021-03-31', INTERVAL '1' MONTH) != NULL)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (try_subtract(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (unix_date(DATE('1970-01-02')) == 1)\nand (unix_micros(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_millis(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 1)\nand (weekday(DATE'2009-07-30') == 1)\nand (EXTRACT(DAYOFWEEK_ISO FROM DATE'2009-07-30') == 4)\nand (weekofyear('2008-02-20') == 8)\nand (year('2016-07-30') == 2016)\nand (ARRAY(1, 2, 3) != NULL)\nand (BIGINT('5') == 5)\nand (binary('Spark SQL') != NULL)\nand (BOOLEAN(1))\nand (CAST(5.6 AS DECIMAL (2, 0)) != NULL)\nand (CAST(INTERVAL '1-2' YEAR TO MONTH AS INTEGER) == 12)\nand (DATE('2021-03-21') != NULL)\nand (decimal('5.2') == 5)\nand (double('5.2') / 2 == 5)\nand (FLOAT('5.2') / 2 == 2)\nand (INT('5') == 5)\nand (make_date(2013, 7, 15) != NULL)\nand (make_dt_interval(100, 13) != NULL)\nand (make_ym_interval(100, 5) == NULL)\nand (MAP(1.0, '2', 3.0, '4') IS NOT NULL)\nand (named_struct('a', 1, 'b', 2, 'c', 3) IS NOT NULL)\nand (smallint('5') == 5)\nand (STRUCT(1, 2, 3) IS NOT NULL)\nand (tinyint('12') == 12)\nand (TIMESTAMP('2020-04-30 12:25:13.45') != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31 00:12:00') != NULL)\nand (from_csv('1, 0.8', 'a INT, b DOUBLE') != NULL)\nand (schema_of_csv('1,abc') != NULL)\nand (json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') == 5)\nand (json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') != NULL)\nand (schema_of_json('[{\"col\":01}]', MAP('allowNumericLeadingZeros', 'true')) != NULL)\nand (to_json(named_struct('a', 1, 'b', 2)) != NULL)\nand (to_json(MAP(named_struct('a', 1), named_struct('b', 2))) != NULL)\nand (to_json(ARRAY((MAP('a', 1)))) != NULL)\nand (xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()') != NULL)\nand (xpath_boolean('<a><b>1</b></a>', 'a/b'))\nand (xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 3)\nand (xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c') != NULL)\nand (\n      assert_true(\n        0 < 1) == NULL\n    )\nand (\n      (\n        CASE\n          WHEN 1 > 0\n            THEN 1\n          WHEN 2 > 0\n            THEN 2.0\n          ELSE 1.2\n        END\n      ) == 1\n    )\nand (\n      (\n        CASE 3\n          WHEN 1\n            THEN 'A'\n          WHEN 2\n            THEN 'B'\n          WHEN 3\n            THEN 'C'\n        END\n      ) != NULL\n    )\nand (coalesce(2, 5 / 0) == 2)\nand (current_catalog() != NULL)\nand (current_database() != NULL)\nand (current_user() != NULL)\nand (decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks') != NULL)\nand (elt(1, 'scala', 'java') != NULL)\nand (greatest(10, 9, 2, 4, 3) == 10)\nand (hash('Spark', ARRAY(123), 2) != NULL)\nand (\n      if(\n        1 < 2, \n        'a', \n        'b') != NULL\n    )\nand (ifnull(NULL, ARRAY('2')) != NULL)\nand (isnull(1))\nand (isnotnull(1))\nand (least(10, 9, 2, 4, 3) == 2)\nand (monotonically_increasing_id() > 10)\nand (nullif(2, 2) == NULL)\nand (nvl(NULL, 2) == 2)\nand (nvl2(NULL, 2, 1) == 1)\nand (typeof(1) != NULL)\nand (uuid() != NULL)\nand (xxhash64('Spark', ARRAY(123), 2) != NULL)\nand ('20'::INTEGER == 20)\nand like('Spark', '_park')\nand ('Spark' LIKE SOME('_park', '_ock'))\nand (bitmap_count(x'00') == 10)\nand (charindex('bar', 'abcbarbar') == 1)\nand (decode(x'FEFF0053007000610072006B002000530051004C', 'UTF-16') != NULL)\nand (like('Spark', '_park'))\nand (len('Spark SQL ') > 10)\nand (levenshtein('kitten', 'sitting', 4) > 10)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', 'Z', 'z', '9', 'X') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', lowerChar => 'z', upperChar => 'X') != NULL)\nand (mask('AaBb123-&ASDXYZ921312asd', NULL, NULL, NULL, NULL) != NULL)\nand (overlay('Spark SQL' PLACING '_' FROM 6) != NULL)\nand (overlay('Spark SQL' PLACING 'tructured' FROM 2 FOR 4) != NULL)\nand (overlay(encode('Spark SQL', 'utf-8') PLACING encode('_', 'utf-8') FROM 6) != NULL)\nand (position('bar' IN 'abcbarbar') > 2)\nand (regexp_count('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en') > 2)\nand (regexp_instr('Mary had a little lamb', NULL) != NULL)\nand (regexp_substr(NULL, 'Ste(v|ph)en') != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (STRING(4) != NULL)\nand (substr('Spark SQL', -3) != NULL)\nand (substr('Spark SQL' FROM 5 FOR 1) != NULL)\nand (substr('Spark SQL' FROM -3) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_char(DATE'2016-04-08', 'y') != NULL)\nand (to_char(encode('abc', 'utf-8'), 'utf-8') != NULL)\nand (to_varchar(454, '999') != NULL)\nand (to_varchar(DATE'2016-04-08', 'y') != NULL)\nand (to_varchar(x'537061726b2053514c', 'hex') != NULL)\nand (TRIM( 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(BOTH 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(LEADING 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(TRAILING 'SL' FROM 'SSparkSQLS') != NULL)\nand (\n      CAST(try_aes_decrypt(\n        unbase64('MTIzNDU2Nzg5MDEyMdXvR41sJqwZ6hnTU8FRTTtXbL8yeChIZA=='), \n        '1234567890abcdef', \n        'GCM', \n        'DEFAULT', \n        'Some AAD') AS STRING) != NULL\n    )\nand (url_decode('http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1') != NULL)\nand (url_encode('http://spark.apache.org/path?query=1') != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' + INTERVAL '3' SECOND) != NULL)\nand (bit_reverse(-1) == -1)\nand (bitmap_bit_position(-32768) == 1)\nand (bitmap_bucket_number(-32768) == 1)\nand (MOD(2, 1.8) == 2)\nand (array_append(ARRAY(1, 2, 3), 0) == NULL)\nand (array_compact(ARRAY(1, 2, NULL, 3, NULL, 3)) == NULL)\nand (array_insert(ARRAY('a', 'b', 'c'), 1, 'z') != NULL)\nand (array_prepend(ARRAY(1, 2, 3), 0) != NULL)\nand (get(ARRAY(1, 2, 3), 2) != NULL)\nand (\n      reduce(\n        ARRAY(1, 2, 3), \n        0, \n        (acc, x) -> acc + x) == 2\n    )\nand (shuffle(ARRAY(1, 20, 3, 5)) != NULL)\nand (map_contains_key(MAP(1, 'a', 2, 'b'), 2))\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand (date_diff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (date_part('SECONDS', TIMESTAMP'2019-10-01 00:00:01.000001') == 1)\nand (date_part('Week', TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (dateadd('2016-07-30', 1) != NULL)\nand (dateadd(MICROSECOND, 5, TIMESTAMP'2022-02-28 00:00:00') != NULL)\nand (datediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 11:59:59') == 0)\nand (make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887, 'CET') IS NOT NULL)\nand (make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)\nand (now() != NULL)\nand (timediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (timestampdiff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (to_unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 100)\nand (try_to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand ('20'::INTEGER == 20)\nand (make_interval(100, 11) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)\nand (STRING(5) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_varchar(454, '999') IS NOT NULL)\nand (from_json('{\"a\":1, \"b\":0.8}', 'a INT, b DOUBLE') IS NOT NULL)\nand (get_json_object('{\"a\":\"b\"}', '$.a') IS NOT NULL)\nand (to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), MAP('timestampFormat', 'dd/MM/yyyy')) IS NOT NULL)\nand (to_csv(named_struct('a', 1, 'b', 2)) IS NOT NULL)\nand (from_xml('<p><time>26/08/2015</time></p>', 'time Timestamp', MAP('timestampFormat', 'dd/MM/yyyy')) != NULL)\nand (schema_of_xml('<p><a attr=\"2\">1</a><a>3</a></p>', MAP('excludeAttribute', 'true')) IS NOT NULL)\nand (current_metastore() != NULL)\nand (current_schema() != NULL)\nand (current_version() != NULL)\nand (equal_null(2, 2))\nand (\n      iff(\n        1 < 2, \n        'a', \n        'b') == 'a'\n    )\nand (is_account_group_member('admins'))\nand (is_member('admins'))\nand (luhn_check('12345') == NULL)\nand (user() != NULL)\nand (h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0) != NULL)\nand (h3_coverash3string('{\"type\":\"LineString\",\"coordinates\":[[-122.4194,37.7749],[-118.2437,34.0522],[-74.0060,40.7128]]}', 1) != NULL)\nand (h3_longlatash3(-122.4783, 37.8199, 13) > 0)\nand (h3_longlatash3string(-122.4783, 37.8199, 13) != NULL)\nand (h3_pointash3('POINT(-122.4783 37.8199)', 13) > 0)\nand (h3_pointash3string('{\"type\":\"Point\",\"coordinates\":[]}', 15) == NULL)\nand (h3_pointash3string('POINT(-122.4783 37.8199)', 13) != NULL)\nand (\n      h3_polyfillash3(\n        unhex(\n          '0103000000010000000400000050fc1873d79a5ec0d0d556ec2fe342404182e2c7988f5dc0f46c567dae064140aaf1d24d628052c05e4bc8073d5b444050fc1873d79a5ec0d0d556ec2fe34240'), \n        2) != NULL\n    )\nand (h3_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3('Not-a-valid-rep', 2) == NULL)\nand (h3_try_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_boundaryasgeojson('8009fffffffffff') != NULL)\nand (h3_boundaryasgeojson(599686042433355775) != NULL)\nand (hex(h3_boundaryaswkb(599686042433355775)) != NULL)\nand (h3_boundaryaswkt(599686042433355775) != NULL)\nand (h3_centerasgeojson(599686042433355775) != NULL)\nand (hex(h3_centeraswkb('8009fffffffffff')) == NULL)\nand (h3_centeraswkt('8009fffffffffff') != NULL)\nand (h3_h3tostring(599686042433355775) != NULL)\nand (h3_stringtoh3('85283473fffffff') == NULL)\nand (h3_ischildof('88283471b9fffff', '85283473fffffff'))\nand (h3_ispentagon(590112357393367039))\nand (h3_isvalid('85283473fffffff'))\nand (h3_try_validate(590112357393367039) != NULL)\nand (h3_validate(590112357393367039) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_hexring(599686042433355775, 1) != NULL)\nand (h3_kring(599686042433355775, 1) != NULL)\nand (h3_kringdistances(599686042433355775, 1) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_maxchild(599686042433355775, 10) != NULL)\nand (h3_minchild(599686042433355775, 10) != NULL)\nand (h3_resolution(599686042433355775) == 5)\nand (h3_tochildren(599686042433355775, 6) != NULL)\nand (h3_toparent(599686042433355775, 0) != NULL)\nand (\n      h3_compact(\n        ARRAY(\n          599686042433355775, \n          599686030622195711, \n          599686044580839423, \n          599686038138388479, \n          599686043507097599, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686040285872127, \n          599686041359613951, \n          599686039212130303, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647)) != NULL\n    )\nand (\n      h3_uncompact(\n        ARRAY(\n          599686030622195711, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647, \n          595182446027210751), \n        5) != NULL\n    )"
                  },
                  "sortType" : "asc",
                  "nullsType" : "nulls last"
                } ]
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "e41fzdBT",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "customer_id",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "first_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "last_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "in0"
                } ],
                "outputs" : [ {
                  "id" : "TbJZqLqt",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "customer_id",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "first_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "last_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 8
            },
            "Filter_1_1##lQLo8tyT" : {
              "id" : "Filter_1_1##lQLo8tyT",
              "component" : "Filter",
              "metadata" : {
                "label" : "Filter_1_1",
                "phase" : 0,
                "macroDependencies" : [ ],
                "isLabelGrayed" : false
              },
              "properties" : {
                "columnsSelector" : [ ],
                "condition" : {
                  "expression" : "CAST(customer_id AS INT) > 5\nand CAST(customer_id AS INT) != 0\nor first_name LIKE '%A%'\nor ((1 & 1) == 1)\nor ((2 | 2) == 2)\nand 10 * CAST(customer_id AS INT) == 20\nand last_name != first_name\nand (CAST(customer_id AS INT) BETWEEN 10 AND 20)\nand (ARRAY(10, 20, 30)[2] == 30)\nand (MAP(1, 'Hello', 2, 'World')[1] == 'Hello')\nand (10 ^ 20 == 50)\nand (MAP('three', 3).four == NULL)\nand (named_struct('a', 5, 'b', 'Spark').a == 5)\nand (1 = 2 and 1 == 2)\nand (1 >= 2 and 1 <= 2 and 1 != 3 or 2 > 4 or 4 < 5)\nand (\n      EXISTS(\n        ARRAY(1, NULL, 3), \n        x -> x % 2 == 0)\n    )\nor ilike('Spark', '_PARK')\nor (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\nand (1 IS DISTINCT FROM 5)\nand ('invalid' IS false)\nand isnull(1)\nand ('t' IS NOT true)\nand (1 <=> '1')\nand (1 <> CAST(customer_id AS INT))\nand (10 - 2 + 10 == 8)\nand (NOT true)\nand (false or true)\nand (2 % 0 == 0)\nand ('Spark' || 'SQL' == 'SparkSQL')\nand (r'%SystemDrive%\\Users\\John' LIKE r'%SystemDrive%\\\\Users%')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (2L / 2L == 10)\nand (~ 0 == -1)\nand (base64(aes_encrypt('Spark', 'abcdefghijklmnop')) == NULL)\nand (CAST(aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop') AS STRING) == NULL)\nand (ascii('234') == 234)\nand (base64('Spark SQL') == NULL)\nand (bin(13) == NULL)\nand (binary('Spark SQL') == NULL)\nand (btrim('abcaabaSparkSQLabcaaba', 'abc') != NULL)\nand (char(65) != NULL)\nand (char_length('Spark SQL ') == 10)\nand (character_length('Spark SQL ') == 10)\nand (concat(customer_id, 'hello') != NULL)\nand (concat_ws(',', 'Spark', ARRAY('S', 'Q', NULL, 'L'), NULL) != NULL)\nand contains('SparkSQL', 'Spork')\nand (crc32('Spark') > 0)\nand chr(65) != NULL\nand (3 ^ 5 == 6)\nand (hex(encode('Spark SQL', 'US-ASCII')) != NULL)\nand endswith('SparkSQL', 'SQL')\nand (find_in_set('ab', 'abc,b,ab,c,def') == 2)\nand (format_number(12332.123456, 4) == 2)\nand (format_number(12332.123456, '#.###') == 10)\nand (format_string('Hello World %d %s', 100, 'days') != NULL)\nand (hex('Spark SQL') != NULL)\nand (r'%SystemDrive%\\Users\\John' LIKE '%SystemDrive%\\\\\\\\Users%')\nand (initcap('sPark sql') != NULL)\nand (instr('SparkSQL', 'R') == 2)\nand (lcase('LowerCase') != NULL)\nand (LEFT('Spark SQL', 3) != NULL)\nand (length('Spark SQL ') > 20)\nand (levenshtein('kitten', 'sitting') > 10)\nand (locate('bar', 'abcbarbar') > 2)\nand (locate('bar', 'abcbarbar', 5) > 2)\nand (lower('LowerCase') != NULL)\nand (lpad('hi', 1, '??') != NULL)\nand (hex(lpad(x'1020', 5, x'05')) != NULL)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (md5('Spark') != NULL)\nand (octet_length('Spark SQL') != NULL)\nand (parse_url('http://spark.apache.org/path?query=1', 'HOST') != NULL)\nand (position('bar', 'abcbarbar') > 10)\nand (position('bar', 'abcbarbar', 5) > 5)\nand (printf('Hello World %d %s', 100, 'days') != NULL)\nand (r'%SystemDrive%\\Users\\John' RLIKE r'%SystemDrive%\\\\Users.*')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) > 10)\nand (regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1) != NULL)\nand (regexp_replace('100-200', '(\\\\d+)', 'num') != NULL)\nand (repeat('123', 2) != NULL)\nand (replace('ABCabc', 'abc', 'DEF') != NULL)\nand (reverse('Spark SQL') != NULL)\nand (RIGHT('Spark SQL', 3) != NULL)\nand (rpad('hi', 5, 'ab') != NULL)\nand (hex(rpad(x'1020', 5, x'05')) != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (sentences('Hi there! Good morning.', 'en', 'US') != NULL)\nand (sha('Spark') != NULL)\nand (sha1('Spark') != NULL)\nand (sha2('Spark', 256) != NULL)\nand (soundex('Miller') != NULL)\nand (concat('1', space(2), '1') != NULL)\nand (('->' || split_part('Hello,world,!', ',', 1) || '<-') != NULL)\nand (('->' || split_part('', ',', 1) || '<-') != NULL)\nand (('->' || split_part('Hello,World,!', ',', 0) || '<-') != NULL)\nand (startswith('SparkSQL', 'Spark'))\nand (startswith(NULL, 'Spark'))\nand (substr('Spark SQL', 5, 1) != NULL)\nand (substring_index('www.apache.org', '.', 2) != NULL)\nand (CAST(to_binary('537061726B') AS STRING) != NULL)\nand (CAST(to_binary('537061726B', 'hex') AS STRING) != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (translate('AaBbCc', 'abc', '123') != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (ucase('SparkSql') != NULL)\nand (CAST(unbase64('U3BhcmsgU1FM') AS STRING) != NULL)\nand (decode(unhex('537061726B2053514C'), 'UTF-8') != NULL)\nand (upper('SparkSql') != NULL)\nand (10 / 2 == 5)\nand ((3 | 5) == 2)\nand ((DATE'2021-03-20' - INTERVAL '2' MONTH) != NULL)\nand (10 - 2 + 2 == 4)\nand (2 % 1.8 == 2)\nand (3 ^ 5 == 3)\nand (3 & 5 == 2)\nand (3 * 2 == 2)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (abs(-1) == 1)\nand (acos(1) == 1)\nand (acosh(1) == 1)\nand (asin(0) == 1)\nand (asinh(0) == 1)\nand (atan(0) == 1)\nand (atan2(0, 0) == 1)\nand (atanh(0) == 1)\nand (BIGINT(current_timestamp) > 1)\nand (bit_count(-1) > 1)\nand (bit_get(23Y, 1) == 1)\nand (bround(13.5, -1) == 1)\nand (round(13.5, -1) == 1)\nand (cbrt(27.0) == 3)\nand (ceil(3345.1, -2) == 1)\nand (ceiling(5.4) == 6)\nand (ceiling(3345.1, -2) == 1)\nand (conv('100', 2, 10) == 4)\nand (conv('FFFFFFFFFFFFFFFF', 16, 10) == 1)\nand (cos(pi()) == -1)\nand (cosh(0) == 1)\nand (cot(1) == 1)\nand (csc(pi() / 2) == 2)\nand (decimal('5.2') == 5)\nand (degrees(3.141592653589793) == 10)\nand (double('5.2') == 4)\nand (e() == 2)\nand (exp(1) == 2)\nand (expm1(0) == 1)\nand (factorial(2) == 2)\nand (FLOAT('5.2') == 5)\nand (floor(-0.1) == -1)\nand (floor(3345.1, -2) == 20)\nand (getbit(23Y, 0) == 1)\nand (hypot(3, 4) == 5)\nand (INT(-5.6) == 5)\nand (isnan(CAST('NaN' AS double)))\nand (ln(1) == 1)\nand (log(10, 100) == 2)\nand (log1p(0) == 1)\nand (log2(2) == 1)\nand (log10(10) == 1)\nand (nanvl(CAST('NaN' AS DOUBLE), 123) == 2)\nand (negative(1) == -1)\nand (pmod(-10, 3) == 2)\nand (positive(-1) == -1)\nand (pow(2, 3) * power(2, 3) == 8)\nand (radians(180) == 10)\nand (rand(0) * random(0) == 1)\nand (randn(0) == 1)\nand (rint(12.3456) == 1)\nand (round(2.5, 0) == 3)\nand (sec(pi()) == -1)\nand (sin(0) == 0)\nand (shiftleft(2, 1) == 2)\nand (shiftright(4, 1) == 2)\nand (shiftrightunsigned(4, 1) == 2)\nand (sign(40) == 1)\nand (signum(40) == 1)\nand (sinh(0) == 1)\nand (smallint(-5.6) == 5)\nand (sqrt(4) == 2)\nand (tan(0) == 1)\nand (tanh(0) == 1)\nand (tinyint('12') * tinyint(5.4) == 1)\nand (try_add(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_add(1, 2) == 3)\nand (try_divide(3, 2) == 3)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand (try_subtract(1, 2) == 2)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_subtract(-128Y, 1Y) != NULL)\nand (width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2) == 3)\nand (width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) == 10)\nand (ARRAY(10, 20, 30) != NULL)\nand (\n      (\n        aggregate(\n          ARRAY(1, 2, 3), \n          0, \n          (acc, x) -> acc + x, \n          acc -> acc * 10)\n      ) == 1\n    )\nand (array_contains(ARRAY(1, 2, 3), 2))\nand (array_distinct(ARRAY(1, 2, 3, NULL, 3)) != NULL)\nand (array_except(ARRAY(1, 2, 2, 3), ARRAY(1, 1, 3, 5)) != NULL)\nand (array_intersect(ARRAY(1, 2, 3), ARRAY(1, 3, 3, 5)) != NULL)\nand (array_join(ARRAY('hello', 'world'), ',') != NULL)\nand (array_join(ARRAY('hello', NULL, 'world'), ',', '*') == NULL)\nand (array_max(ARRAY(1, 20, NULL, 3)) > 10)\nand (array_min(ARRAY(1, 20, NULL, 3)) == 1)\nand (array_position(ARRAY(3, 2, 1, 4, 1), 1) == 2)\nand (array_remove(ARRAY(1, 2, 3, NULL, 3, 2), 3) != NULL)\nand (array_repeat('123', 2) != NULL)\nand (array_size(ARRAY(1, NULL, 3, NULL)) == 2)\nand (array_sort(ARRAY('bc', 'ab', 'dc')) != NULL)\nand (array_union(ARRAY(1, 2, 2, 3), ARRAY(1, 3, 5)) != NULL)\nand (arrays_overlap(ARRAY(1, 2, NULL, 3), ARRAY(NULL, 4, 5)) == NULL)\nand (arrays_zip(ARRAY(1, 2), ARRAY('shoe', 'string', 'budget')) == NULL)\nand (cardinality(ARRAY('b', 'd', 'c', 'a')) == 2)\nand (concat(ARRAY(1, 2, 3), ARRAY(4, 5), ARRAY(6)) != NULL)\nand (element_at(MAP(1, 'a', 2, 'b'), 2) == NULL)\nand (\n      EXISTS(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 0)\n    )\nand (\n      EXISTS(\n        ARRAY(0, NULL, 2, 3, NULL), \n        x -> x IS NULL)\n    )\nand (\n      filter(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 1) != NULL\n    )\nand (flatten(ARRAY(ARRAY(1, 2), ARRAY(3, 4))) != NULL)\nand (\n      forall(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 0) == NULL\n    )\nand (reverse(ARRAY(2, 1, 4, 3)) != NULL)\nand (sequence(5, 1) != NULL)\nand (cardinality(ARRAY('b', 'd', 'c', 'a')) == 10)\nand (slice(ARRAY(1, 2, 3, 4), 2, 2) != NULL)\nand (sort_array(ARRAY('b', 'd', NULL, 'c', 'a'), true) != NULL)\nand (\n      transform(\n        ARRAY(1, 2, 3), \n        x -> x + 1) != NULL\n    )\nand (try_element_at(ARRAY(1, 2, 3), 2) == 2)\nand (\n      zip_with(\n        ARRAY('a', 'b', 'c'), \n        ARRAY('d', 'e', 'f'), \n        (x, y) -> concat(x, y)) != NULL\n    )\nand (MAP(1, 'Hello', 2, 'World')[1] != NULL)\nand (cardinality(MAP('a', 1, 'b', 2)) == 2)\nand (element_at(MAP(1, 'a', 2, 'b'), 3) == NULL)\nand (MAP(1.0, '2', 3.0, '4') IS NOT NULL)\nand (map_concat(MAP(1, 'a', 2, 'b'), MAP(3, 'c')) IS NOT NULL)\nand (map_contains_key(MAP(1, 'a', 2, 'b'), 2))\nand (map_entries(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_filter(\n        MAP(1, 0, 2, 2, 3, -1), \n        (k, v) -> k > v) IS NOT NULL\n    )\nand (map_from_arrays(ARRAY(1.0, 3.0), ARRAY('2', '4')) IS NOT NULL)\nand (map_from_entries(ARRAY(STRUCT(1, 'a'), STRUCT(2, 'b'))) IS NOT NULL)\nand (map_keys(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (map_values(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_zip_with(\n        MAP(1, 'a', 2, 'b'), \n        MAP(1, 'x', 2, 'y'), \n        (k, v1, v2) -> concat(v1, v2)) IS NOT NULL\n    )\nand (cardinality(MAP('a', 1, 'b', 2)) == 2)\nand (str_to_map('a:1,b:2,c:3', ',', ':') IS NOT NULL)\nand (\n      transform_keys(\n        map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n        (k, v) -> k + 1) IS NOT NULL\n    )\nand (\n      transform_values(\n        map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n        (k, v) -> k + v) IS NOT NULL\n    )\nand (try_element_at(MAP(1, 'a', 2, 'b'), 2) IS NOT NULL)\nand ((INTERVAL '3:15' HOUR TO MINUTE / 3) IS NOT NULL)\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand (typeof(current_timestamp - (current_date + INTERVAL '1' DAY)) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (add_months('2016-08-31', -6) != NULL)\nand (current_date() != NULL)\nand (current_timestamp() != NULL)\nand (current_timezone() != NULL)\nand (DATE('2021-03-21') != NULL)\nand (date_add('2016-07-30', 1) != NULL)\nand (date_format('2016-04-08', 'y') == 2016)\nand (date_from_unix_date(1) != NULL)\nand (date_sub('2016-07-30', 1) != NULL)\nand (date_trunc('YEAR', '2015-03-05T09:32:05.359') != NULL)\nand (datediff('2009-07-31', '2009-07-30') == 1)\nand (day('2009-07-30') == 30)\nand (dayofmonth('2009-07-30') == 30)\nand (dayofweek('2009-07-30') == 5)\nand (dayofyear('2016-04-09') == 100)\nand (EXTRACT(SECONDS FROM INTERVAL '5:00:30.001' HOUR TO SECOND) == 30)\nand (EXTRACT(WEEK FROM TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') != NULL)\nand (from_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (from_utc_timestamp('2016-08-31', 'Asia/Seoul') != NULL)\nand (hour('2009-07-30 12:58:59') == 10)\nand (last_day('2009-01-12') IS NOT NULL)\nand (make_date(2013, 7, 15) IS NOT NULL)\nand (make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)\nand (make_ym_interval(100, 5) IS NOT NULL)\nand (minute('2009-07-30 12:58:59') == 58)\nand (month('2016-07-30') == 7)\nand (months_between('1997-02-28 10:30:00', '1996-10-30') == 3)\nand (months_between('1997-02-28 10:30:00', '1996-10-30', false) == 2)\nand (next_day('2015-01-14', 'TU') != NULL)\nand (now() != NULL)\nand (quarter('2016-08-31') == 3)\nand (second('2009-07-30 12:58:59') == 59)\nand (TIMESTAMP(123) != NULL)\nand (TIMESTAMP('2020-04-30 12:25:13.45') != NULL)\nand (timestamp_micros(1230219000123123) != NULL)\nand (timestamp_millis(1230219000123) != NULL)\nand (timestamp_seconds(1230219000) != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (trunc('2015-10-27', 'YEAR') != NULL)\nand (trunc('2019-08-04', 'quarter') != NULL)\nand (try_add(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_add(DATE'2021-03-31', INTERVAL '1' MONTH) != NULL)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (try_subtract(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (unix_date(DATE('1970-01-02')) == 1)\nand (unix_micros(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_millis(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 1)\nand (weekday(DATE'2009-07-30') == 1)\nand (EXTRACT(DAYOFWEEK_ISO FROM DATE'2009-07-30') == 4)\nand (weekofyear('2008-02-20') == 8)\nand (year('2016-07-30') == 2016)\nand (ARRAY(1, 2, 3) != NULL)\nand (BIGINT('5') == 5)\nand (binary('Spark SQL') != NULL)\nand (BOOLEAN(1))\nand (CAST(5.6 AS DECIMAL (2, 0)) != NULL)\nand (CAST(INTERVAL '1-2' YEAR TO MONTH AS INTEGER) == 12)\nand (DATE('2021-03-21') != NULL)\nand (decimal('5.2') == 5)\nand (double('5.2') / 2 == 5)\nand (FLOAT('5.2') / 2 == 2)\nand (INT('5') == 5)\nand (make_date(2013, 7, 15) != NULL)\nand (make_dt_interval(100, 13) != NULL)\nand (make_ym_interval(100, 5) == NULL)\nand (MAP(1.0, '2', 3.0, '4') IS NOT NULL)\nand (named_struct('a', 1, 'b', 2, 'c', 3) IS NOT NULL)\nand (smallint('5') == 5)\nand (STRUCT(1, 2, 3) IS NOT NULL)\nand (tinyint('12') == 12)\nand (TIMESTAMP('2020-04-30 12:25:13.45') != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31 00:12:00') != NULL)\nand (from_csv('1, 0.8', 'a INT, b DOUBLE') != NULL)\nand (schema_of_csv('1,abc') != NULL)\nand (json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') == 5)\nand (json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') != NULL)\nand (schema_of_json('[{\"col\":01}]', MAP('allowNumericLeadingZeros', 'true')) != NULL)\nand (to_json(named_struct('a', 1, 'b', 2)) != NULL)\nand (to_json(MAP(named_struct('a', 1), named_struct('b', 2))) != NULL)\nand (to_json(ARRAY((MAP('a', 1)))) != NULL)\nand (xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()') != NULL)\nand (xpath_boolean('<a><b>1</b></a>', 'a/b'))\nand (xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 3)\nand (xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c') != NULL)\nand (\n      assert_true(\n        0 < 1) == NULL\n    )\nand (\n      (\n        CASE\n          WHEN 1 > 0\n            THEN 1\n          WHEN 2 > 0\n            THEN 2.0\n          ELSE 1.2\n        END\n      ) == 1\n    )\nand (\n      (\n        CASE 3\n          WHEN 1\n            THEN 'A'\n          WHEN 2\n            THEN 'B'\n          WHEN 3\n            THEN 'C'\n        END\n      ) != NULL\n    )\nand (coalesce(2, 5 / 0) == 2)\nand (current_catalog() != NULL)\nand (current_database() != NULL)\nand (current_user() != NULL)\nand (decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks') != NULL)\nand (elt(1, 'scala', 'java') != NULL)\nand (greatest(10, 9, 2, 4, 3) == 10)\nand (hash('Spark', ARRAY(123), 2) != NULL)\nand (\n      if(\n        1 < 2, \n        'a', \n        'b') != NULL\n    )\nand (ifnull(NULL, ARRAY('2')) != NULL)\nand (isnull(1))\nand (isnotnull(1))\nand (least(10, 9, 2, 4, 3) == 2)\nand (monotonically_increasing_id() > 10)\nand (nullif(2, 2) == NULL)\nand (nvl(NULL, 2) == 2)\nand (nvl2(NULL, 2, 1) == 1)\nand (typeof(1) != NULL)\nand (uuid() != NULL)\nand (xxhash64('Spark', ARRAY(123), 2) != NULL)\nand ('20'::INTEGER == 20)\nand like('Spark', '_park')\nand ('Spark' LIKE SOME('_park', '_ock'))\nand (bitmap_count(x'00') == 10)\nand (charindex('bar', 'abcbarbar') == 1)\nand (decode(x'FEFF0053007000610072006B002000530051004C', 'UTF-16') != NULL)\nand (like('Spark', '_park'))\nand (len('Spark SQL ') > 10)\nand (levenshtein('kitten', 'sitting', 4) > 10)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', 'Z', 'z', '9', 'X') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', lowerChar => 'z', upperChar => 'X') != NULL)\nand (mask('AaBb123-&ASDXYZ921312asd', NULL, NULL, NULL, NULL) != NULL)\nand (overlay('Spark SQL' PLACING '_' FROM 6) != NULL)\nand (overlay('Spark SQL' PLACING 'tructured' FROM 2 FOR 4) != NULL)\nand (overlay(encode('Spark SQL', 'utf-8') PLACING encode('_', 'utf-8') FROM 6) != NULL)\nand (position('bar' IN 'abcbarbar') > 2)\nand (regexp_count('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en') > 2)\nand (regexp_instr('Mary had a little lamb', NULL) != NULL)\nand (regexp_substr(NULL, 'Ste(v|ph)en') != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (STRING(4) != NULL)\nand (substr('Spark SQL', -3) != NULL)\nand (substr('Spark SQL' FROM 5 FOR 1) != NULL)\nand (substr('Spark SQL' FROM -3) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_char(DATE'2016-04-08', 'y') != NULL)\nand (to_char(encode('abc', 'utf-8'), 'utf-8') != NULL)\nand (to_varchar(454, '999') != NULL)\nand (to_varchar(DATE'2016-04-08', 'y') != NULL)\nand (to_varchar(x'537061726b2053514c', 'hex') != NULL)\nand (TRIM( 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(BOTH 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(LEADING 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(TRAILING 'SL' FROM 'SSparkSQLS') != NULL)\nand (\n      CAST(try_aes_decrypt(\n        unbase64('MTIzNDU2Nzg5MDEyMdXvR41sJqwZ6hnTU8FRTTtXbL8yeChIZA=='), \n        '1234567890abcdef', \n        'GCM', \n        'DEFAULT', \n        'Some AAD') AS STRING) != NULL\n    )\nand (url_decode('http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1') != NULL)\nand (url_encode('http://spark.apache.org/path?query=1') != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' + INTERVAL '3' SECOND) != NULL)\nand (bit_reverse(-1) == -1)\nand (bitmap_bit_position(-32768) == 1)\nand (bitmap_bucket_number(-32768) == 1)\nand (MOD(2, 1.8) == 2)\nand (array_append(ARRAY(1, 2, 3), 0) == NULL)\nand (array_compact(ARRAY(1, 2, NULL, 3, NULL, 3)) == NULL)\nand (array_insert(ARRAY('a', 'b', 'c'), 1, 'z') != NULL)\nand (array_prepend(ARRAY(1, 2, 3), 0) != NULL)\nand (get(ARRAY(1, 2, 3), 2) != NULL)\nand (\n      reduce(\n        ARRAY(1, 2, 3), \n        0, \n        (acc, x) -> acc + x) == 2\n    )\nand (shuffle(ARRAY(1, 20, 3, 5)) != NULL)\nand (map_contains_key(MAP(1, 'a', 2, 'b'), 2))\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand (date_diff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (date_part('SECONDS', TIMESTAMP'2019-10-01 00:00:01.000001') == 1)\nand (date_part('Week', TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (dateadd('2016-07-30', 1) != NULL)\nand (dateadd(MICROSECOND, 5, TIMESTAMP'2022-02-28 00:00:00') != NULL)\nand (datediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 11:59:59') == 0)\nand (make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887, 'CET') IS NOT NULL)\nand (make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)\nand (now() != NULL)\nand (timediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (timestampdiff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (to_unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 100)\nand (try_to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand ('20'::INTEGER == 20)\nand (make_interval(100, 11) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)\nand (STRING(5) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_varchar(454, '999') IS NOT NULL)\nand (from_json('{\"a\":1, \"b\":0.8}', 'a INT, b DOUBLE') IS NOT NULL)\nand (get_json_object('{\"a\":\"b\"}', '$.a') IS NOT NULL)\nand (to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), MAP('timestampFormat', 'dd/MM/yyyy')) IS NOT NULL)\nand (to_csv(named_struct('a', 1, 'b', 2)) IS NOT NULL)\nand (from_xml('<p><time>26/08/2015</time></p>', 'time Timestamp', MAP('timestampFormat', 'dd/MM/yyyy')) != NULL)\nand (schema_of_xml('<p><a attr=\"2\">1</a><a>3</a></p>', MAP('excludeAttribute', 'true')) IS NOT NULL)\nand (current_metastore() != NULL)\nand (current_schema() != NULL)\nand (current_version() != NULL)\nand (equal_null(2, 2))\nand (\n      iff(\n        1 < 2, \n        'a', \n        'b') == 'a'\n    )\nand (is_account_group_member('admins'))\nand (is_member('admins'))\nand (luhn_check('12345') == NULL)\nand (user() != NULL)\nand (h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0) != NULL)\nand (h3_coverash3string('{\"type\":\"LineString\",\"coordinates\":[[-122.4194,37.7749],[-118.2437,34.0522],[-74.0060,40.7128]]}', 1) != NULL)\nand (h3_longlatash3(-122.4783, 37.8199, 13) > 0)\nand (h3_longlatash3string(-122.4783, 37.8199, 13) != NULL)\nand (h3_pointash3('POINT(-122.4783 37.8199)', 13) > 0)\nand (h3_pointash3string('{\"type\":\"Point\",\"coordinates\":[]}', 15) == NULL)\nand (h3_pointash3string('POINT(-122.4783 37.8199)', 13) != NULL)\nand (\n      h3_polyfillash3(\n        unhex(\n          '0103000000010000000400000050fc1873d79a5ec0d0d556ec2fe342404182e2c7988f5dc0f46c567dae064140aaf1d24d628052c05e4bc8073d5b444050fc1873d79a5ec0d0d556ec2fe34240'), \n        2) != NULL\n    )\nand (h3_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3('Not-a-valid-rep', 2) == NULL)\nand (h3_try_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_boundaryasgeojson('8009fffffffffff') != NULL)\nand (h3_boundaryasgeojson(599686042433355775) != NULL)\nand (hex(h3_boundaryaswkb(599686042433355775)) != NULL)\nand (h3_boundaryaswkt(599686042433355775) != NULL)\nand (h3_centerasgeojson(599686042433355775) != NULL)\nand (hex(h3_centeraswkb('8009fffffffffff')) == NULL)\nand (h3_centeraswkt('8009fffffffffff') != NULL)\nand (h3_h3tostring(599686042433355775) != NULL)\nand (h3_stringtoh3('85283473fffffff') == NULL)\nand (h3_ischildof('88283471b9fffff', '85283473fffffff'))\nand (h3_ispentagon(590112357393367039))\nand (h3_isvalid('85283473fffffff'))\nand (h3_try_validate(590112357393367039) != NULL)\nand (h3_validate(590112357393367039) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_hexring(599686042433355775, 1) != NULL)\nand (h3_kring(599686042433355775, 1) != NULL)\nand (h3_kringdistances(599686042433355775, 1) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_maxchild(599686042433355775, 10) != NULL)\nand (h3_minchild(599686042433355775, 10) != NULL)\nand (h3_resolution(599686042433355775) == 5)\nand (h3_tochildren(599686042433355775, 6) != NULL)\nand (h3_toparent(599686042433355775, 0) != NULL)\nand (\n      h3_compact(\n        ARRAY(\n          599686042433355775, \n          599686030622195711, \n          599686044580839423, \n          599686038138388479, \n          599686043507097599, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686040285872127, \n          599686041359613951, \n          599686039212130303, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647)) != NULL\n    )\nand (\n      h3_uncompact(\n        ARRAY(\n          599686030622195711, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647, \n          595182446027210751), \n        5) != NULL\n    )"
                }
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "epTipmcP",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "customer_id",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "first_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "last_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "in0"
                } ],
                "outputs" : [ {
                  "id" : "eGaqJHMJ",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "customer_id",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "first_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "last_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 13
            },
            "SQLStatement_1_1##tN516Isp" : {
              "id" : "SQLStatement_1_1##tN516Isp",
              "component" : "SQLStatement",
              "metadata" : {
                "label" : "SQLStatement_1_1",
                "phase" : 0,
                "isLabelGrayed" : false
              },
              "properties" : {
                "fileTabs" : [ {
                  "path" : "out",
                  "id" : "out",
                  "language" : "sql",
                  "content" : "SELECT \n  substr(w_warehouse_name, 1, 20),\n  sm_type,\n  cc_name,\n  sum(CASE\n    WHEN (cs_ship_date_sk - cs_sold_date_sk <= 30)\n      THEN 1\n    ELSE 0\n  END) AS days_30,\n  sum(\n    CASE\n      WHEN (cs_ship_date_sk - cs_sold_date_sk > 30) and (cs_ship_date_sk - cs_sold_date_sk <= 60)\n        THEN 1\n      ELSE 0\n    END) AS days_31_60,\n  sum(\n    CASE\n      WHEN (cs_ship_date_sk - cs_sold_date_sk > 60) and (cs_ship_date_sk - cs_sold_date_sk <= 90)\n        THEN 1\n      ELSE 0\n    END) AS days_61_90,\n  sum(\n    CASE\n      WHEN (cs_ship_date_sk - cs_sold_date_sk > 90) and (cs_ship_date_sk - cs_sold_date_sk <= 120)\n        THEN 1\n      ELSE 0\n    END) AS days_90_120,\n  sum(CASE\n    WHEN (cs_ship_date_sk - cs_sold_date_sk > 120)\n      THEN 1\n    ELSE 0\n  END) AS days_more_than_120\n\nFROM hive_metastore.qa_database.catalog_sales, hive_metastore.qa_database.warehouse, hive_metastore.qa_database.ship_mode, hive_metastore.qa_database.call_center, hive_metastore.qa_database.date_dim\n\nWHERE d_month_seq BETWEEN 1200 AND 1200 + 11\n      and cs_ship_date_sk = d_date_sk\n      and cs_warehouse_sk = w_warehouse_sk\n      and cs_ship_mode_sk = sm_ship_mode_sk\n      and cs_call_center_sk = cc_call_center_sk\n\nGROUP BY \n  substr(w_warehouse_name, 1, 20), sm_type, cc_name\n\nORDER BY substr(w_warehouse_name, 1, 20), sm_type, cc_name\n\nLIMIT 100\n"
                } ]
              },
              "ports" : {
                "inputs" : [ ],
                "outputs" : [ {
                  "id" : "jg6dE6Wf",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "substr(w_warehouse_name, 1, 20)",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "sm_type",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "cc_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "days_30",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_31_60",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_61_90",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_90_120",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_more_than_120",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 3
            },
            "Aggregate_1_1##PguZ2Rq3" : {
              "id" : "Aggregate_1_1##PguZ2Rq3",
              "component" : "Aggregate",
              "metadata" : {
                "label" : "Aggregate_1_1",
                "phase" : 0,
                "macroDependencies" : [ ],
                "isLabelGrayed" : false
              },
              "properties" : {
                "aggregate" : [ {
                  "expression" : {
                    "expression" : "CAST(customer_id AS INT) > 5"
                  },
                  "alias" : "c1"
                }, {
                  "expression" : {
                    "expression" : "CAST(customer_id AS INT) > 5\nand CAST(customer_id AS INT) != 0\nor first_name LIKE '%A%'\nor ((1 & 1) == 1)\nor ((2 | 2) == 2)\nand 10 * CAST(customer_id AS INT) == 20\nand last_name != first_name\nand (CAST(customer_id AS INT) BETWEEN 10 AND 20)\nand (ARRAY(10, 20, 30)[2] == 30)\nand (MAP(1, 'Hello', 2, 'World')[1] == 'Hello')\nand (10 ^ 20 == 50)\nand (MAP('three', 3).four == NULL)\nand (named_struct('a', 5, 'b', 'Spark').a == 5)\nand (1 = 2 and 1 == 2)\nand (1 >= 2 and 1 <= 2 and 1 != 3 or 2 > 4 or 4 < 5)\nand (\n      EXISTS(\n        ARRAY(1, NULL, 3), \n        x -> x % 2 == 0)\n    )\nor ilike('Spark', '_PARK')\nor (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\nand (1 IS DISTINCT FROM 5)\nand ('invalid' IS false)\nand isnull(1)\nand ('t' IS NOT true)\nand (1 <=> '1')\nand (1 <> CAST(customer_id AS INT))\nand (10 - 2 + 10 == 8)\nand (NOT true)\nand (false or true)\nand (2 % 0 == 0)\nand ('Spark' || 'SQL' == 'SparkSQL')\nand (r'%SystemDrive%\\Users\\John' LIKE r'%SystemDrive%\\\\Users%')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (2L / 2L == 10)\nand (~ 0 == -1)\nand (base64(aes_encrypt('Spark', 'abcdefghijklmnop')) == NULL)\nand (CAST(aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop') AS STRING) == NULL)\nand (ascii('234') == 234)\nand (base64('Spark SQL') == NULL)\nand (bin(13) == NULL)\nand (binary('Spark SQL') == NULL)\nand (btrim('abcaabaSparkSQLabcaaba', 'abc') != NULL)\nand (char(65) != NULL)\nand (char_length('Spark SQL ') == 10)\nand (character_length('Spark SQL ') == 10)\nand (concat(customer_id, 'hello') != NULL)\nand (concat_ws(',', 'Spark', ARRAY('S', 'Q', NULL, 'L'), NULL) != NULL)\nand contains('SparkSQL', 'Spork')\nand (crc32('Spark') > 0)\nand chr(65) != NULL\nand (3 ^ 5 == 6)\nand (hex(encode('Spark SQL', 'US-ASCII')) != NULL)\nand endswith('SparkSQL', 'SQL')\nand (find_in_set('ab', 'abc,b,ab,c,def') == 2)\nand (format_number(12332.123456, 4) == 2)\nand (format_number(12332.123456, '#.###') == 10)\nand (format_string('Hello World %d %s', 100, 'days') != NULL)\nand (hex('Spark SQL') != NULL)\nand (r'%SystemDrive%\\Users\\John' LIKE '%SystemDrive%\\\\\\\\Users%')\nand (initcap('sPark sql') != NULL)\nand (instr('SparkSQL', 'R') == 2)\nand (lcase('LowerCase') != NULL)\nand (LEFT('Spark SQL', 3) != NULL)\nand (length('Spark SQL ') > 20)\nand (levenshtein('kitten', 'sitting') > 10)\nand (locate('bar', 'abcbarbar') > 2)\nand (locate('bar', 'abcbarbar', 5) > 2)\nand (lower('LowerCase') != NULL)\nand (lpad('hi', 1, '??') != NULL)\nand (hex(lpad(x'1020', 5, x'05')) != NULL)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (md5('Spark') != NULL)\nand (octet_length('Spark SQL') != NULL)\nand (parse_url('http://spark.apache.org/path?query=1', 'HOST') != NULL)\nand (position('bar', 'abcbarbar') > 10)\nand (position('bar', 'abcbarbar', 5) > 5)\nand (printf('Hello World %d %s', 100, 'days') != NULL)\nand (r'%SystemDrive%\\Users\\John' RLIKE r'%SystemDrive%\\\\Users.*')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) > 10)\nand (regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1) != NULL)\nand (regexp_replace('100-200', '(\\\\d+)', 'num') != NULL)\nand (repeat('123', 2) != NULL)\nand (replace('ABCabc', 'abc', 'DEF') != NULL)\nand (reverse('Spark SQL') != NULL)\nand (RIGHT('Spark SQL', 3) != NULL)\nand (rpad('hi', 5, 'ab') != NULL)\nand (hex(rpad(x'1020', 5, x'05')) != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (sentences('Hi there! Good morning.', 'en', 'US') != NULL)\nand (sha('Spark') != NULL)\nand (sha1('Spark') != NULL)\nand (sha2('Spark', 256) != NULL)\nand (soundex('Miller') != NULL)\nand (concat('1', space(2), '1') != NULL)\nand (('->' || split_part('Hello,world,!', ',', 1) || '<-') != NULL)\nand (('->' || split_part('', ',', 1) || '<-') != NULL)\nand (('->' || split_part('Hello,World,!', ',', 0) || '<-') != NULL)\nand (startswith('SparkSQL', 'Spark'))\nand (startswith(NULL, 'Spark'))\nand (substr('Spark SQL', 5, 1) != NULL)\nand (substring_index('www.apache.org', '.', 2) != NULL)\nand (CAST(to_binary('537061726B') AS STRING) != NULL)\nand (CAST(to_binary('537061726B', 'hex') AS STRING) != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (translate('AaBbCc', 'abc', '123') != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (ucase('SparkSql') != NULL)\nand (CAST(unbase64('U3BhcmsgU1FM') AS STRING) != NULL)\nand (decode(unhex('537061726B2053514C'), 'UTF-8') != NULL)\nand (upper('SparkSql') != NULL)\nand (10 / 2 == 5)\nand ((3 | 5) == 2)\nand ((DATE'2021-03-20' - INTERVAL '2' MONTH) != NULL)\nand (10 - 2 + 2 == 4)\nand (2 % 1.8 == 2)\nand (3 ^ 5 == 3)\nand (3 & 5 == 2)\nand (3 * 2 == 2)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (abs(-1) == 1)\nand (acos(1) == 1)\nand (acosh(1) == 1)\nand (asin(0) == 1)\nand (asinh(0) == 1)\nand (atan(0) == 1)\nand (atan2(0, 0) == 1)\nand (atanh(0) == 1)\nand (BIGINT(current_timestamp) > 1)\nand (bit_count(-1) > 1)\nand (bit_get(23Y, 1) == 1)\nand (bround(13.5, -1) == 1)\nand (round(13.5, -1) == 1)\nand (cbrt(27.0) == 3)\nand (ceil(3345.1, -2) == 1)\nand (ceiling(5.4) == 6)\nand (ceiling(3345.1, -2) == 1)\nand (conv('100', 2, 10) == 4)\nand (conv('FFFFFFFFFFFFFFFF', 16, 10) == 1)\nand (cos(pi()) == -1)\nand (cosh(0) == 1)\nand (cot(1) == 1)\nand (csc(pi() / 2) == 2)\nand (decimal('5.2') == 5)\nand (degrees(3.141592653589793) == 10)\nand (double('5.2') == 4)\nand (e() == 2)\nand (exp(1) == 2)\nand (expm1(0) == 1)\nand (factorial(2) == 2)\nand (FLOAT('5.2') == 5)\nand (floor(-0.1) == -1)\nand (floor(3345.1, -2) == 20)\nand (getbit(23Y, 0) == 1)\nand (hypot(3, 4) == 5)\nand (INT(-5.6) == 5)\nand (isnan(CAST('NaN' AS double)))\nand (ln(1) == 1)\nand (log(10, 100) == 2)\nand (log1p(0) == 1)\nand (log2(2) == 1)\nand (log10(10) == 1)\nand (nanvl(CAST('NaN' AS DOUBLE), 123) == 2)\nand (negative(1) == -1)\nand (pmod(-10, 3) == 2)\nand (positive(-1) == -1)\nand (pow(2, 3) * power(2, 3) == 8)\nand (radians(180) == 10)\nand (rand(0) * random(0) == 1)\nand (randn(0) == 1)\nand (rint(12.3456) == 1)\nand (round(2.5, 0) == 3)\nand (sec(pi()) == -1)\nand (sin(0) == 0)\nand (shiftleft(2, 1) == 2)\nand (shiftright(4, 1) == 2)\nand (shiftrightunsigned(4, 1) == 2)\nand (sign(40) == 1)\nand (signum(40) == 1)\nand (sinh(0) == 1)\nand (smallint(-5.6) == 5)\nand (sqrt(4) == 2)\nand (tan(0) == 1)\nand (tanh(0) == 1)\nand (tinyint('12') * tinyint(5.4) == 1)\nand (try_add(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_add(1, 2) == 3)\nand (try_divide(3, 2) == 3)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand (try_subtract(1, 2) == 2)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_subtract(-128Y, 1Y) != NULL)\nand (width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2) == 3)\nand (width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) == 10)\nand (ARRAY(10, 20, 30) != NULL)\nand (\n      (\n        aggregate(\n          ARRAY(1, 2, 3), \n          0, \n          (acc, x) -> acc + x, \n          acc -> acc * 10)\n      ) == 1\n    )\nand (array_contains(ARRAY(1, 2, 3), 2))\nand (array_distinct(ARRAY(1, 2, 3, NULL, 3)) != NULL)\nand (array_except(ARRAY(1, 2, 2, 3), ARRAY(1, 1, 3, 5)) != NULL)\nand (array_intersect(ARRAY(1, 2, 3), ARRAY(1, 3, 3, 5)) != NULL)\nand (array_join(ARRAY('hello', 'world'), ',') != NULL)\nand (array_join(ARRAY('hello', NULL, 'world'), ',', '*') == NULL)\nand (array_max(ARRAY(1, 20, NULL, 3)) > 10)\nand (array_min(ARRAY(1, 20, NULL, 3)) == 1)\nand (array_position(ARRAY(3, 2, 1, 4, 1), 1) == 2)\nand (array_remove(ARRAY(1, 2, 3, NULL, 3, 2), 3) != NULL)\nand (array_repeat('123', 2) != NULL)\nand (array_size(ARRAY(1, NULL, 3, NULL)) == 2)\nand (array_sort(ARRAY('bc', 'ab', 'dc')) != NULL)\nand (array_union(ARRAY(1, 2, 2, 3), ARRAY(1, 3, 5)) != NULL)\nand (arrays_overlap(ARRAY(1, 2, NULL, 3), ARRAY(NULL, 4, 5)) == NULL)\nand (arrays_zip(ARRAY(1, 2), ARRAY('shoe', 'string', 'budget')) == NULL)\nand (cardinality(ARRAY('b', 'd', 'c', 'a')) == 2)\nand (concat(ARRAY(1, 2, 3), ARRAY(4, 5), ARRAY(6)) != NULL)\nand (element_at(MAP(1, 'a', 2, 'b'), 2) == NULL)\nand (\n      EXISTS(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 0)\n    )\nand (\n      EXISTS(\n        ARRAY(0, NULL, 2, 3, NULL), \n        x -> x IS NULL)\n    )\nand (\n      filter(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 1) != NULL\n    )\nand (flatten(ARRAY(ARRAY(1, 2), ARRAY(3, 4))) != NULL)\nand (\n      forall(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 0) == NULL\n    )\nand (reverse(ARRAY(2, 1, 4, 3)) != NULL)\nand (sequence(5, 1) != NULL)\nand (cardinality(ARRAY('b', 'd', 'c', 'a')) == 10)\nand (slice(ARRAY(1, 2, 3, 4), 2, 2) != NULL)\nand (sort_array(ARRAY('b', 'd', NULL, 'c', 'a'), true) != NULL)\nand (\n      transform(\n        ARRAY(1, 2, 3), \n        x -> x + 1) != NULL\n    )\nand (try_element_at(ARRAY(1, 2, 3), 2) == 2)\nand (\n      zip_with(\n        ARRAY('a', 'b', 'c'), \n        ARRAY('d', 'e', 'f'), \n        (x, y) -> concat(x, y)) != NULL\n    )\nand (MAP(1, 'Hello', 2, 'World')[1] != NULL)\nand (cardinality(MAP('a', 1, 'b', 2)) == 2)\nand (element_at(MAP(1, 'a', 2, 'b'), 3) == NULL)\nand (MAP(1.0, '2', 3.0, '4') IS NOT NULL)\nand (map_concat(MAP(1, 'a', 2, 'b'), MAP(3, 'c')) IS NOT NULL)\nand (map_contains_key(MAP(1, 'a', 2, 'b'), 2))\nand (map_entries(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_filter(\n        MAP(1, 0, 2, 2, 3, -1), \n        (k, v) -> k > v) IS NOT NULL\n    )\nand (map_from_arrays(ARRAY(1.0, 3.0), ARRAY('2', '4')) IS NOT NULL)\nand (map_from_entries(ARRAY(STRUCT(1, 'a'), STRUCT(2, 'b'))) IS NOT NULL)\nand (map_keys(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (map_values(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_zip_with(\n        MAP(1, 'a', 2, 'b'), \n        MAP(1, 'x', 2, 'y'), \n        (k, v1, v2) -> concat(v1, v2)) IS NOT NULL\n    )\nand (cardinality(MAP('a', 1, 'b', 2)) == 2)\nand (str_to_map('a:1,b:2,c:3', ',', ':') IS NOT NULL)\nand (\n      transform_keys(\n        map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n        (k, v) -> k + 1) IS NOT NULL\n    )\nand (\n      transform_values(\n        map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n        (k, v) -> k + v) IS NOT NULL\n    )\nand (try_element_at(MAP(1, 'a', 2, 'b'), 2) IS NOT NULL)\nand ((INTERVAL '3:15' HOUR TO MINUTE / 3) IS NOT NULL)\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand (typeof(current_timestamp - (current_date + INTERVAL '1' DAY)) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (add_months('2016-08-31', -6) != NULL)\nand (current_date() != NULL)\nand (current_timestamp() != NULL)\nand (current_timezone() != NULL)\nand (DATE('2021-03-21') != NULL)\nand (date_add('2016-07-30', 1) != NULL)\nand (date_format('2016-04-08', 'y') == 2016)\nand (date_from_unix_date(1) != NULL)\nand (date_sub('2016-07-30', 1) != NULL)\nand (date_trunc('YEAR', '2015-03-05T09:32:05.359') != NULL)\nand (datediff('2009-07-31', '2009-07-30') == 1)\nand (day('2009-07-30') == 30)\nand (dayofmonth('2009-07-30') == 30)\nand (dayofweek('2009-07-30') == 5)\nand (dayofyear('2016-04-09') == 100)\nand (EXTRACT(SECONDS FROM INTERVAL '5:00:30.001' HOUR TO SECOND) == 30)\nand (EXTRACT(WEEK FROM TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') != NULL)\nand (from_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (from_utc_timestamp('2016-08-31', 'Asia/Seoul') != NULL)\nand (hour('2009-07-30 12:58:59') == 10)\nand (last_day('2009-01-12') IS NOT NULL)\nand (make_date(2013, 7, 15) IS NOT NULL)\nand (make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)\nand (make_ym_interval(100, 5) IS NOT NULL)\nand (minute('2009-07-30 12:58:59') == 58)\nand (month('2016-07-30') == 7)\nand (months_between('1997-02-28 10:30:00', '1996-10-30') == 3)\nand (months_between('1997-02-28 10:30:00', '1996-10-30', false) == 2)\nand (next_day('2015-01-14', 'TU') != NULL)\nand (now() != NULL)\nand (quarter('2016-08-31') == 3)\nand (second('2009-07-30 12:58:59') == 59)\nand (TIMESTAMP(123) != NULL)\nand (TIMESTAMP('2020-04-30 12:25:13.45') != NULL)\nand (timestamp_micros(1230219000123123) != NULL)\nand (timestamp_millis(1230219000123) != NULL)\nand (timestamp_seconds(1230219000) != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (trunc('2015-10-27', 'YEAR') != NULL)\nand (trunc('2019-08-04', 'quarter') != NULL)\nand (try_add(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_add(DATE'2021-03-31', INTERVAL '1' MONTH) != NULL)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (try_subtract(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (unix_date(DATE('1970-01-02')) == 1)\nand (unix_micros(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_millis(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 1)\nand (weekday(DATE'2009-07-30') == 1)\nand (EXTRACT(DAYOFWEEK_ISO FROM DATE'2009-07-30') == 4)\nand (weekofyear('2008-02-20') == 8)\nand (year('2016-07-30') == 2016)\nand (ARRAY(1, 2, 3) != NULL)\nand (BIGINT('5') == 5)\nand (binary('Spark SQL') != NULL)\nand (BOOLEAN(1))\nand (CAST(5.6 AS DECIMAL (2, 0)) != NULL)\nand (CAST(INTERVAL '1-2' YEAR TO MONTH AS INTEGER) == 12)\nand (DATE('2021-03-21') != NULL)\nand (decimal('5.2') == 5)\nand (double('5.2') / 2 == 5)\nand (FLOAT('5.2') / 2 == 2)\nand (INT('5') == 5)\nand (make_date(2013, 7, 15) != NULL)\nand (make_dt_interval(100, 13) != NULL)\nand (make_ym_interval(100, 5) == NULL)\nand (MAP(1.0, '2', 3.0, '4') IS NOT NULL)\nand (named_struct('a', 1, 'b', 2, 'c', 3) IS NOT NULL)\nand (smallint('5') == 5)\nand (STRUCT(1, 2, 3) IS NOT NULL)\nand (tinyint('12') == 12)\nand (TIMESTAMP('2020-04-30 12:25:13.45') != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31 00:12:00') != NULL)\nand (from_csv('1, 0.8', 'a INT, b DOUBLE') != NULL)\nand (schema_of_csv('1,abc') != NULL)\nand (json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') == 5)\nand (json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') != NULL)\nand (schema_of_json('[{\"col\":01}]', MAP('allowNumericLeadingZeros', 'true')) != NULL)\nand (to_json(named_struct('a', 1, 'b', 2)) != NULL)\nand (to_json(MAP(named_struct('a', 1), named_struct('b', 2))) != NULL)\nand (to_json(ARRAY((MAP('a', 1)))) != NULL)\nand (xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()') != NULL)\nand (xpath_boolean('<a><b>1</b></a>', 'a/b'))\nand (xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 3)\nand (xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c') != NULL)\nand (\n      assert_true(\n        0 < 1) == NULL\n    )\nand (\n      (\n        CASE\n          WHEN 1 > 0\n            THEN 1\n          WHEN 2 > 0\n            THEN 2.0\n          ELSE 1.2\n        END\n      ) == 1\n    )\nand (\n      (\n        CASE 3\n          WHEN 1\n            THEN 'A'\n          WHEN 2\n            THEN 'B'\n          WHEN 3\n            THEN 'C'\n        END\n      ) != NULL\n    )\nand (coalesce(2, 5 / 0) == 2)\nand (current_catalog() != NULL)\nand (current_database() != NULL)\nand (current_user() != NULL)\nand (decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks') != NULL)\nand (elt(1, 'scala', 'java') != NULL)\nand (greatest(10, 9, 2, 4, 3) == 10)\nand (hash('Spark', ARRAY(123), 2) != NULL)\nand (\n      if(\n        1 < 2, \n        'a', \n        'b') != NULL\n    )\nand (ifnull(NULL, ARRAY('2')) != NULL)\nand (isnull(1))\nand (isnotnull(1))\nand (least(10, 9, 2, 4, 3) == 2)\nand (monotonically_increasing_id() > 10)\nand (nullif(2, 2) == NULL)\nand (nvl(NULL, 2) == 2)\nand (nvl2(NULL, 2, 1) == 1)\nand (typeof(1) != NULL)\nand (uuid() != NULL)\nand (xxhash64('Spark', ARRAY(123), 2) != NULL)\nand ('20'::INTEGER == 20)\nand like('Spark', '_park')\nand ('Spark' LIKE SOME('_park', '_ock'))\nand (bitmap_count(x'00') == 10)\nand (charindex('bar', 'abcbarbar') == 1)\nand (decode(x'FEFF0053007000610072006B002000530051004C', 'UTF-16') != NULL)\nand (like('Spark', '_park'))\nand (len('Spark SQL ') > 10)\nand (levenshtein('kitten', 'sitting', 4) > 10)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', 'Z', 'z', '9', 'X') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', lowerChar => 'z', upperChar => 'X') != NULL)\nand (mask('AaBb123-&ASDXYZ921312asd', NULL, NULL, NULL, NULL) != NULL)\nand (overlay('Spark SQL' PLACING '_' FROM 6) != NULL)\nand (overlay('Spark SQL' PLACING 'tructured' FROM 2 FOR 4) != NULL)\nand (overlay(encode('Spark SQL', 'utf-8') PLACING encode('_', 'utf-8') FROM 6) != NULL)\nand (position('bar' IN 'abcbarbar') > 2)\nand (regexp_count('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en') > 2)\nand (regexp_instr('Mary had a little lamb', NULL) != NULL)\nand (regexp_substr(NULL, 'Ste(v|ph)en') != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (STRING(4) != NULL)\nand (substr('Spark SQL', -3) != NULL)\nand (substr('Spark SQL' FROM 5 FOR 1) != NULL)\nand (substr('Spark SQL' FROM -3) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_char(DATE'2016-04-08', 'y') != NULL)\nand (to_char(encode('abc', 'utf-8'), 'utf-8') != NULL)\nand (to_varchar(454, '999') != NULL)\nand (to_varchar(DATE'2016-04-08', 'y') != NULL)\nand (to_varchar(x'537061726b2053514c', 'hex') != NULL)\nand (TRIM( 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(BOTH 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(LEADING 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(TRAILING 'SL' FROM 'SSparkSQLS') != NULL)\nand (\n      CAST(try_aes_decrypt(\n        unbase64('MTIzNDU2Nzg5MDEyMdXvR41sJqwZ6hnTU8FRTTtXbL8yeChIZA=='), \n        '1234567890abcdef', \n        'GCM', \n        'DEFAULT', \n        'Some AAD') AS STRING) != NULL\n    )\nand (url_decode('http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1') != NULL)\nand (url_encode('http://spark.apache.org/path?query=1') != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' + INTERVAL '3' SECOND) != NULL)\nand (bit_reverse(-1) == -1)\nand (bitmap_bit_position(-32768) == 1)\nand (bitmap_bucket_number(-32768) == 1)\nand (MOD(2, 1.8) == 2)\nand (array_append(ARRAY(1, 2, 3), 0) == NULL)\nand (array_compact(ARRAY(1, 2, NULL, 3, NULL, 3)) == NULL)\nand (array_insert(ARRAY('a', 'b', 'c'), 1, 'z') != NULL)\nand (array_prepend(ARRAY(1, 2, 3), 0) != NULL)\nand (get(ARRAY(1, 2, 3), 2) != NULL)\nand (\n      reduce(\n        ARRAY(1, 2, 3), \n        0, \n        (acc, x) -> acc + x) == 2\n    )\nand (shuffle(ARRAY(1, 20, 3, 5)) != NULL)\nand (map_contains_key(MAP(1, 'a', 2, 'b'), 2))\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand (date_diff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (date_part('SECONDS', TIMESTAMP'2019-10-01 00:00:01.000001') == 1)\nand (date_part('Week', TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (dateadd('2016-07-30', 1) != NULL)\nand (dateadd(MICROSECOND, 5, TIMESTAMP'2022-02-28 00:00:00') != NULL)\nand (datediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 11:59:59') == 0)\nand (make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887, 'CET') IS NOT NULL)\nand (make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)\nand (now() != NULL)\nand (timediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (timestampdiff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (to_unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 100)\nand (try_to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand ('20'::INTEGER == 20)\nand (make_interval(100, 11) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)\nand (STRING(5) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_varchar(454, '999') IS NOT NULL)\nand (from_json('{\"a\":1, \"b\":0.8}', 'a INT, b DOUBLE') IS NOT NULL)\nand (get_json_object('{\"a\":\"b\"}', '$.a') IS NOT NULL)\nand (to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), MAP('timestampFormat', 'dd/MM/yyyy')) IS NOT NULL)\nand (to_csv(named_struct('a', 1, 'b', 2)) IS NOT NULL)\nand (from_xml('<p><time>26/08/2015</time></p>', 'time Timestamp', MAP('timestampFormat', 'dd/MM/yyyy')) != NULL)\nand (schema_of_xml('<p><a attr=\"2\">1</a><a>3</a></p>', MAP('excludeAttribute', 'true')) IS NOT NULL)\nand (current_metastore() != NULL)\nand (current_schema() != NULL)\nand (current_version() != NULL)\nand (equal_null(2, 2))\nand (\n      iff(\n        1 < 2, \n        'a', \n        'b') == 'a'\n    )\nand (is_account_group_member('admins'))\nand (is_member('admins'))\nand (luhn_check('12345') == NULL)\nand (user() != NULL)\nand (h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0) != NULL)\nand (h3_coverash3string('{\"type\":\"LineString\",\"coordinates\":[[-122.4194,37.7749],[-118.2437,34.0522],[-74.0060,40.7128]]}', 1) != NULL)\nand (h3_longlatash3(-122.4783, 37.8199, 13) > 0)\nand (h3_longlatash3string(-122.4783, 37.8199, 13) != NULL)\nand (h3_pointash3('POINT(-122.4783 37.8199)', 13) > 0)\nand (h3_pointash3string('{\"type\":\"Point\",\"coordinates\":[]}', 15) == NULL)\nand (h3_pointash3string('POINT(-122.4783 37.8199)', 13) != NULL)\nand (\n      h3_polyfillash3(\n        unhex(\n          '0103000000010000000400000050fc1873d79a5ec0d0d556ec2fe342404182e2c7988f5dc0f46c567dae064140aaf1d24d628052c05e4bc8073d5b444050fc1873d79a5ec0d0d556ec2fe34240'), \n        2) != NULL\n    )\nand (h3_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3('Not-a-valid-rep', 2) == NULL)\nand (h3_try_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_boundaryasgeojson('8009fffffffffff') != NULL)\nand (h3_boundaryasgeojson(599686042433355775) != NULL)\nand (hex(h3_boundaryaswkb(599686042433355775)) != NULL)\nand (h3_boundaryaswkt(599686042433355775) != NULL)\nand (h3_centerasgeojson(599686042433355775) != NULL)\nand (hex(h3_centeraswkb('8009fffffffffff')) == NULL)\nand (h3_centeraswkt('8009fffffffffff') != NULL)\nand (h3_h3tostring(599686042433355775) != NULL)\nand (h3_stringtoh3('85283473fffffff') == NULL)\nand (h3_ischildof('88283471b9fffff', '85283473fffffff'))\nand (h3_ispentagon(590112357393367039))\nand (h3_isvalid('85283473fffffff'))\nand (h3_try_validate(590112357393367039) != NULL)\nand (h3_validate(590112357393367039) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_hexring(599686042433355775, 1) != NULL)\nand (h3_kring(599686042433355775, 1) != NULL)\nand (h3_kringdistances(599686042433355775, 1) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_maxchild(599686042433355775, 10) != NULL)\nand (h3_minchild(599686042433355775, 10) != NULL)\nand (h3_resolution(599686042433355775) == 5)\nand (h3_tochildren(599686042433355775, 6) != NULL)\nand (h3_toparent(599686042433355775, 0) != NULL)\nand (\n      h3_compact(\n        ARRAY(\n          599686042433355775, \n          599686030622195711, \n          599686044580839423, \n          599686038138388479, \n          599686043507097599, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686040285872127, \n          599686041359613951, \n          599686039212130303, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647)) != NULL\n    )\nand (\n      h3_uncompact(\n        ARRAY(\n          599686030622195711, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647, \n          595182446027210751), \n        5) != NULL\n    )"
                  },
                  "alias" : "c2"
                } ],
                "allowSelection" : true,
                "condition" : {
                  "expression" : ""
                },
                "activeTab" : "aggregate",
                "columnsSelector" : [ ],
                "groupBy" : [ {
                  "expression" : {
                    "expression" : "last_name"
                  }
                }, {
                  "expression" : {
                    "expression" : "first_name"
                  }
                }, {
                  "expression" : {
                    "expression" : "customer_id"
                  }
                } ]
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "vwdVz7qw",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "customer_id",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "first_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "last_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "in0"
                } ],
                "outputs" : [ {
                  "id" : "w4HRpFLr",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "c1",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    }, {
                      "name" : "c2",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 10
            },
            "all_type_partiti##xaMWzLrY" : {
              "id" : "all_type_partiti##xaMWzLrY",
              "component" : "Source",
              "metadata" : {
                "label" : "all_type_partitioned_1_1",
                "phase" : 0,
                "isLabelGrayed" : false
              },
              "properties" : {
                "table" : {
                  "name" : "all_type_partitioned",
                  "sourceType" : "Source",
                  "sourceName" : "spark_catalog.qa_database"
                }
              },
              "ports" : {
                "inputs" : [ ],
                "outputs" : [ {
                  "id" : "nrjo6uTS",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "databricks",
                    "fields" : [ {
                      "name" : "c_tinyint",
                      "dataType" : {
                        "type" : "TinyInt"
                      }
                    }, {
                      "name" : "c_smallint",
                      "dataType" : {
                        "type" : "SmallInt"
                      }
                    }, {
                      "name" : "c_int",
                      "dataType" : {
                        "type" : "Integer"
                      }
                    }, {
                      "name" : "c_bigint",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "c_float",
                      "dataType" : {
                        "type" : "Float"
                      }
                    }, {
                      "name" : "c_double",
                      "dataType" : {
                        "type" : "Double"
                      }
                    }, {
                      "name" : "c_string",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "c_boolean",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    }, {
                      "name" : "c_array",
                      "dataType" : {
                        "type" : "Array",
                        "dataType" : {
                          "type" : "String"
                        }
                      }
                    }, {
                      "name" : "c_struct",
                      "dataType" : {
                        "type" : "Struct",
                        "fields" : [ {
                          "name" : "city",
                          "dataType" : {
                            "type" : "String"
                          }
                        }, {
                          "name" : "state",
                          "dataType" : {
                            "type" : "String"
                          }
                        }, {
                          "name" : "pin",
                          "dataType" : {
                            "type" : "Bigint"
                          }
                        } ]
                      }
                    }, {
                      "name" : "p_int",
                      "dataType" : {
                        "type" : "Integer"
                      }
                    }, {
                      "name" : "p_string",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 0
            },
            "Reformat_3_1##QiIsaXLw" : {
              "id" : "Reformat_3_1##QiIsaXLw",
              "component" : "Reformat",
              "metadata" : {
                "label" : "Reformat_3_1",
                "phase" : 0,
                "macroDependencies" : [ ],
                "isLabelGrayed" : false
              },
              "properties" : {
                "columnsSelector" : [ ],
                "expressions" : [ {
                  "expression" : {
                    "expression" : "CAST(customer_id AS INT) > 5"
                  },
                  "alias" : "c1"
                }, {
                  "expression" : {
                    "expression" : "CAST(customer_id AS INT) != 0"
                  },
                  "alias" : "c2"
                } ]
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "llEl9TOl",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "customer_id",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "first_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "last_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "in0"
                } ],
                "outputs" : [ {
                  "id" : "L63PaW8B",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "c1",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    }, {
                      "name" : "c2",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 11
            },
            "Reformatfsdfdsf1##UPiQ56mx" : {
              "id" : "Reformatfsdfdsf1##UPiQ56mx",
              "component" : "Reformat",
              "metadata" : {
                "label" : "Reformatfsdfdsf12",
                "phase" : 0,
                "macroDependencies" : [ ],
                "isLabelGrayed" : false
              },
              "properties" : {
                "columnsSelector" : [ ],
                "expressions" : [ {
                  "expression" : {
                    "expression" : "CAST(c_int AS STRING)"
                  },
                  "alias" : "customer_id"
                }, {
                  "expression" : {
                    "expression" : "c_string"
                  },
                  "alias" : "first_name"
                }, {
                  "expression" : {
                    "expression" : "c_string"
                  },
                  "alias" : "last_name"
                } ]
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "xuLBIT0v",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "databricks",
                    "fields" : [ {
                      "name" : "c_tinyint",
                      "dataType" : {
                        "type" : "TinyInt"
                      }
                    }, {
                      "name" : "c_smallint",
                      "dataType" : {
                        "type" : "SmallInt"
                      }
                    }, {
                      "name" : "c_int",
                      "dataType" : {
                        "type" : "Integer"
                      }
                    }, {
                      "name" : "c_bigint",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "c_float",
                      "dataType" : {
                        "type" : "Float"
                      }
                    }, {
                      "name" : "c_double",
                      "dataType" : {
                        "type" : "Double"
                      }
                    }, {
                      "name" : "c_string",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "c_boolean",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    }, {
                      "name" : "c_array",
                      "dataType" : {
                        "type" : "Array",
                        "dataType" : {
                          "type" : "String"
                        }
                      }
                    }, {
                      "name" : "c_struct",
                      "dataType" : {
                        "type" : "Struct",
                        "fields" : [ {
                          "name" : "city",
                          "dataType" : {
                            "type" : "String"
                          }
                        }, {
                          "name" : "state",
                          "dataType" : {
                            "type" : "String"
                          }
                        }, {
                          "name" : "pin",
                          "dataType" : {
                            "type" : "Bigint"
                          }
                        } ]
                      }
                    }, {
                      "name" : "p_int",
                      "dataType" : {
                        "type" : "Integer"
                      }
                    }, {
                      "name" : "p_string",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "all_type_partitioned_1_1"
                } ],
                "outputs" : [ {
                  "id" : "xzqXO3vj",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "customer_id",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "first_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "last_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 1
            },
            "Join_1_1##bPPz3ocm" : {
              "id" : "Join_1_1##bPPz3ocm",
              "component" : "Join",
              "metadata" : {
                "label" : "Join_1_1",
                "phase" : 0,
                "macroDependencies" : [ ],
                "isLabelGrayed" : false
              },
              "properties" : {
                "conditions" : [ {
                  "alias" : "in1",
                  "expression" : {
                    "expression" : "in0.cc_name != in1.i_item_desc"
                  },
                  "joinType" : "INNER"
                }, {
                  "alias" : "in2",
                  "expression" : {
                    "expression" : "in1.i_current_price != in2.h8_30_to_9"
                  },
                  "joinType" : "INNER"
                } ],
                "expressions" : [ {
                  "expression" : {
                    "expression" : "in0.`substr(w_warehouse_name, 1, 20)`"
                  },
                  "alias" : "substrw_warehouse_name120"
                }, {
                  "expression" : {
                    "expression" : "in0.sm_type"
                  },
                  "alias" : "sm_type"
                }, {
                  "expression" : {
                    "expression" : "in0.cc_name"
                  },
                  "alias" : "cc_name"
                }, {
                  "expression" : {
                    "expression" : "in0.days_30"
                  },
                  "alias" : "days_30"
                }, {
                  "expression" : {
                    "expression" : "in0.days_31_60"
                  },
                  "alias" : "days_31_60"
                }, {
                  "expression" : {
                    "expression" : "in0.days_61_90"
                  },
                  "alias" : "days_61_90"
                }, {
                  "expression" : {
                    "expression" : "in0.days_90_120"
                  },
                  "alias" : "days_90_120"
                }, {
                  "expression" : {
                    "expression" : "in0.days_more_than_120"
                  },
                  "alias" : "days_more_than_120"
                }, {
                  "expression" : {
                    "expression" : "in1.i_item_id"
                  },
                  "alias" : "i_item_id"
                }, {
                  "expression" : {
                    "expression" : "in2.h8_30_to_9"
                  },
                  "alias" : "h8_30_to_9"
                } ],
                "activeTab" : "conditions",
                "columnsSelector" : [ ],
                "headAlias" : "in0"
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "R58zJuKu",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "substr(w_warehouse_name, 1, 20)",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "sm_type",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "cc_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "days_30",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_31_60",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_61_90",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_90_120",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_more_than_120",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  },
                  "slug" : "in0"
                }, {
                  "id" : "QBWQ4MPo",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "i_item_id",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "i_item_desc",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "i_category",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "i_class",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "i_current_price",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "itemrevenue",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "revenueratio",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "in1"
                }, {
                  "id" : "wWLfsS6C",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "h8_30_to_9",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "h9_to_9_30",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "h9_30_to_10",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "h10_to_10_30",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "h10_30_to_11",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "h11_to_11_30",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "h11_30_to_12",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "h12_to_12_30",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  },
                  "slug" : "in2"
                } ],
                "outputs" : [ {
                  "id" : "gO2fxTw4",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "substrw_warehouse_name120",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "sm_type",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "cc_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "days_30",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_31_60",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_61_90",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_90_120",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "days_more_than_120",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "i_item_id",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "h8_30_to_9",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 7
            },
            "store_sales##CRtL3Ktv" : {
              "id" : "store_sales##CRtL3Ktv",
              "component" : "Source",
              "metadata" : {
                "label" : "store_sales",
                "phase" : 0,
                "isLabelGrayed" : false
              },
              "properties" : {
                "table" : {
                  "name" : "store_sales",
                  "sourceType" : "Source",
                  "sourceName" : "spark_catalog.qa_database"
                }
              },
              "ports" : {
                "inputs" : [ ],
                "outputs" : [ {
                  "id" : "ht5LWDZn",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "databricks",
                    "fields" : [ {
                      "name" : "SS_SOLD_DATE_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_SOLD_TIME_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_ITEM_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_CUSTOMER_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_CDEMO_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_HDEMO_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_ADDR_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_STORE_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_PROMO_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_TICKET_NUMBER",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_QUANTITY",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_WHOLESALE_COST",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_LIST_PRICE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_SALES_PRICE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_EXT_DISCOUNT_AMT",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_EXT_SALES_PRICE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_EXT_WHOLESALE_COST",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_EXT_LIST_PRICE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_EXT_TAX",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_COUPON_AMT",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_NET_PAID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_NET_PAID_INC_TAX",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_NET_PROFIT",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 4
            },
            "Reformat_4_1##kb0UAvQN" : {
              "id" : "Reformat_4_1##kb0UAvQN",
              "component" : "Reformat",
              "metadata" : {
                "label" : "Reformat_4_1",
                "phase" : 0,
                "macroDependencies" : [ ],
                "isLabelGrayed" : false
              },
              "properties" : {
                "columnsSelector" : [ ],
                "expressions" : [ {
                  "expression" : {
                    "expression" : "customer_id"
                  },
                  "alias" : "customer_id1"
                }, {
                  "expression" : {
                    "expression" : "first_name"
                  },
                  "alias" : "first_name1"
                }, {
                  "expression" : {
                    "expression" : "last_name"
                  },
                  "alias" : "last_name1"
                } ]
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "edJMJMQG",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "customer_id",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "first_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "last_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "in0"
                } ],
                "outputs" : [ {
                  "id" : "S6SEBnSE",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "customer_id1",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "first_name1",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "last_name1",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 2
            },
            "SQLStatement_3##fjogIHXI" : {
              "id" : "SQLStatement_3##fjogIHXI",
              "component" : "SQLStatement",
              "metadata" : {
                "label" : "SQLStatement_3",
                "phase" : 0,
                "isLabelGrayed" : false
              },
              "properties" : {
                "fileTabs" : [ {
                  "path" : "out",
                  "id" : "out",
                  "language" : "sql",
                  "content" : "SELECT *\n\nFROM (\n  SELECT count(*) AS h8_30_to_9\n  \n  FROM spark_catalog.qa_database.store_sales, spark_catalog.qa_database.household_demographics, spark_catalog.qa_database.time_dim, spark_catalog.qa_database.store\n  \n  WHERE ss_sold_time_sk = time_dim.t_time_sk\n        and ss_hdemo_sk = household_demographics.hd_demo_sk\n        and ss_store_sk = s_store_sk\n        and time_dim.t_hour = 8\n        and time_dim.t_minute >= 30\n        and (\n              (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count <= 0 + 2)\n              or (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count <= 1 + 2)\n              or (household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count <= -1 + 2)\n            )\n        and store.s_store_name = 'ese'\n) AS s1, (\n  SELECT count(*) AS h9_to_9_30\n  \n  FROM spark_catalog.qa_database.store_sales, spark_catalog.qa_database.household_demographics, spark_catalog.qa_database.time_dim, spark_catalog.qa_database.store\n  \n  WHERE ss_sold_time_sk = time_dim.t_time_sk\n        and ss_hdemo_sk = household_demographics.hd_demo_sk\n        and ss_store_sk = s_store_sk\n        and time_dim.t_hour = 9\n        and time_dim.t_minute < 30\n        and (\n              (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count <= 0 + 2)\n              or (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count <= 1 + 2)\n              or (household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count <= -1 + 2)\n            )\n        and store.s_store_name = 'ese'\n) AS s2, (\n  SELECT count(*) AS h9_30_to_10\n  \n  FROM spark_catalog.qa_database.store_sales, spark_catalog.qa_database.household_demographics, spark_catalog.qa_database.time_dim, spark_catalog.qa_database.store\n  \n  WHERE ss_sold_time_sk = time_dim.t_time_sk\n        and ss_hdemo_sk = household_demographics.hd_demo_sk\n        and ss_store_sk = s_store_sk\n        and time_dim.t_hour = 9\n        and time_dim.t_minute >= 30\n        and (\n              (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count <= 0 + 2)\n              or (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count <= 1 + 2)\n              or (household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count <= -1 + 2)\n            )\n        and store.s_store_name = 'ese'\n) AS s3, (\n  SELECT count(*) AS h10_to_10_30\n  \n  FROM store_sales, spark_catalog.qa_database.household_demographics, spark_catalog.qa_database.time_dim, spark_catalog.qa_database.store\n  \n  WHERE ss_sold_time_sk = time_dim.t_time_sk\n        and ss_hdemo_sk = household_demographics.hd_demo_sk\n        and ss_store_sk = s_store_sk\n        and time_dim.t_hour = 10\n        and time_dim.t_minute < 30\n        and (\n              (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count <= 0 + 2)\n              or (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count <= 1 + 2)\n              or (household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count <= -1 + 2)\n            )\n        and store.s_store_name = 'ese'\n) AS s4, (\n  SELECT count(*) AS h10_30_to_11\n  \n  FROM spark_catalog.qa_database.store_sales, spark_catalog.qa_database.household_demographics, spark_catalog.qa_database.time_dim, spark_catalog.qa_database.store\n  \n  WHERE ss_sold_time_sk = time_dim.t_time_sk\n        and ss_hdemo_sk = household_demographics.hd_demo_sk\n        and ss_store_sk = s_store_sk\n        and time_dim.t_hour = 10\n        and time_dim.t_minute >= 30\n        and (\n              (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count <= 0 + 2)\n              or (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count <= 1 + 2)\n              or (household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count <= -1 + 2)\n            )\n        and store.s_store_name = 'ese'\n) AS s5, (\n  SELECT count(*) AS h11_to_11_30\n  \n  FROM spark_catalog.qa_database.store_sales, spark_catalog.qa_database.household_demographics, spark_catalog.qa_database.time_dim, spark_catalog.qa_database.store\n  \n  WHERE ss_sold_time_sk = time_dim.t_time_sk\n        and ss_hdemo_sk = household_demographics.hd_demo_sk\n        and ss_store_sk = s_store_sk\n        and time_dim.t_hour = 11\n        and time_dim.t_minute < 30\n        and (\n              (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count <= 0 + 2)\n              or (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count <= 1 + 2)\n              or (household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count <= -1 + 2)\n            )\n        and store.s_store_name = 'ese'\n) AS s6, (\n  SELECT count(*) AS h11_30_to_12\n  \n  FROM hive_metastore.qa_database.store_sales, hive_metastore.qa_database.household_demographics, hive_metastore.qa_database.time_dim, hive_metastore.qa_database.store\n  \n  WHERE ss_sold_time_sk = time_dim.t_time_sk\n        and ss_hdemo_sk = household_demographics.hd_demo_sk\n        and ss_store_sk = s_store_sk\n        and time_dim.t_hour = 11\n        and time_dim.t_minute >= 30\n        and (\n              (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count <= 0 + 2)\n              or (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count <= 1 + 2)\n              or (household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count <= -1 + 2)\n            )\n        and store.s_store_name = 'ese'\n) AS s7, (\n  SELECT count(*) AS h12_to_12_30\n  \n  FROM hive_metastore.qa_database.store_sales, hive_metastore.qa_database.household_demographics, hive_metastore.qa_database.time_dim, hive_metastore.qa_database.store\n  \n  WHERE ss_sold_time_sk = time_dim.t_time_sk\n        and ss_hdemo_sk = household_demographics.hd_demo_sk\n        and ss_store_sk = s_store_sk\n        and time_dim.t_hour = 12\n        and time_dim.t_minute < 30\n        and (\n              (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count <= 0 + 2)\n              or (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count <= 1 + 2)\n              or (household_demographics.hd_dep_count = -1 and household_demographics.hd_vehicle_count <= -1 + 2)\n            )\n        and store.s_store_name = 'ese'\n) AS s8\n"
                } ]
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "KoNFpIi5",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "databricks",
                    "fields" : [ {
                      "name" : "SS_SOLD_DATE_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_SOLD_TIME_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_ITEM_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_CUSTOMER_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_CDEMO_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_HDEMO_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_ADDR_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_STORE_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_PROMO_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_TICKET_NUMBER",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_QUANTITY",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_WHOLESALE_COST",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_LIST_PRICE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_SALES_PRICE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_EXT_DISCOUNT_AMT",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_EXT_SALES_PRICE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_EXT_WHOLESALE_COST",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_EXT_LIST_PRICE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_EXT_TAX",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_COUPON_AMT",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_NET_PAID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_NET_PAID_INC_TAX",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_NET_PROFIT",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "store_sales"
                } ],
                "outputs" : [ {
                  "id" : "vFe3bNoD",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "h8_30_to_9",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "h9_to_9_30",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "h9_30_to_10",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "h10_to_10_30",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "h10_30_to_11",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "h11_to_11_30",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "h11_30_to_12",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "h12_to_12_30",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 5
            },
            "SQLStatement_2##TeY7g42J" : {
              "id" : "SQLStatement_2##TeY7g42J",
              "component" : "SQLStatement",
              "metadata" : {
                "label" : "SQLStatement_2",
                "phase" : 0,
                "isLabelGrayed" : false
              },
              "properties" : {
                "fileTabs" : [ {
                  "path" : "out",
                  "id" : "out",
                  "language" : "sql",
                  "content" : "SELECT \n  i_item_id,\n  i_item_desc,\n  i_category,\n  i_class,\n  i_current_price,\n  sum(ss_ext_sales_price) AS itemrevenue,\n  sum(ss_ext_sales_price) * 100 / sum(sum(ss_ext_sales_price)) OVER (PARTITION BY i_class) AS revenueratio\n\nFROM store_sales, item, date_dim\n\nWHERE ss_item_sk = i_item_sk\n      and i_category IN ('Women', 'Electronics', 'Shoes')\n      and ss_sold_date_sk = d_date_sk\n      and d_date BETWEEN CAST('2002-05-27' AS DATE) AND dateadd(DAY, 30, to_date('2002-05-27'))\n\nGROUP BY \n  i_item_id, i_item_desc, i_category, i_class, i_current_price\n\nORDER BY i_category, i_class, i_item_id, i_item_desc, revenueratio\n"
                } ]
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "XU6yjyvX",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "databricks",
                    "fields" : [ {
                      "name" : "SS_SOLD_DATE_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_SOLD_TIME_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_ITEM_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_CUSTOMER_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_CDEMO_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_HDEMO_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_ADDR_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_STORE_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_PROMO_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_TICKET_NUMBER",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_QUANTITY",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_WHOLESALE_COST",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_LIST_PRICE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_SALES_PRICE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_EXT_DISCOUNT_AMT",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_EXT_SALES_PRICE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_EXT_WHOLESALE_COST",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_EXT_LIST_PRICE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_EXT_TAX",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_COUPON_AMT",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_NET_PAID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_NET_PAID_INC_TAX",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SS_NET_PROFIT",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "store_sales"
                }, {
                  "id" : "sE8wLtT8",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "databricks",
                    "fields" : [ {
                      "name" : "I_ITEM_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "I_ITEM_ID",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "I_REC_START_DATE",
                      "dataType" : {
                        "type" : "Date"
                      }
                    }, {
                      "name" : "I_REC_END_DATE",
                      "dataType" : {
                        "type" : "Date"
                      }
                    }, {
                      "name" : "I_ITEM_DESC",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "I_CURRENT_PRICE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "I_WHOLESALE_COST",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "I_BRAND_ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "I_BRAND",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "I_CLASS_ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "I_CLASS",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "I_CATEGORY_ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "I_CATEGORY",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "I_MANUFACT_ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "I_MANUFACT",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "I_SIZE",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "I_FORMULATION",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "I_COLOR",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "I_UNITS",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "I_CONTAINER",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "I_MANAGER_ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "I_PRODUCT_NAME",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "item"
                }, {
                  "id" : "U4YF2jyj",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "databricks",
                    "fields" : [ {
                      "name" : "D_DATE_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "D_DATE_ID",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "D_DATE",
                      "dataType" : {
                        "type" : "Date"
                      }
                    }, {
                      "name" : "D_MONTH_SEQ",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "D_WEEK_SEQ",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "D_QUARTER_SEQ",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "D_YEAR",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "D_DOW",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "D_MOY",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "D_DOM",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "D_QOY",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "D_FY_YEAR",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "D_FY_QUARTER_SEQ",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "D_FY_WEEK_SEQ",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "D_DAY_NAME",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "D_QUARTER_NAME",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "D_HOLIDAY",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "D_WEEKEND",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "D_FOLLOWING_HOLIDAY",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "D_FIRST_DOM",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "D_LAST_DOM",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "D_SAME_DAY_LY",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "D_SAME_DAY_LQ",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "D_CURRENT_DAY",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "D_CURRENT_WEEK",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "D_CURRENT_MONTH",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "D_CURRENT_QUARTER",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "D_CURRENT_YEAR",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "date_dim"
                } ],
                "outputs" : [ {
                  "id" : "yLHyZWCB",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "i_item_id",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "i_item_desc",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "i_category",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "i_class",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "i_current_price",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "itemrevenue",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "revenueratio",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 6
            },
            "Join_2##hMFnAnpj" : {
              "id" : "Join_2##hMFnAnpj",
              "component" : "Join",
              "metadata" : {
                "label" : "Join_2",
                "phase" : 0,
                "macroDependencies" : [ ],
                "isLabelGrayed" : false
              },
              "properties" : {
                "conditions" : [ {
                  "alias" : "in1",
                  "expression" : {
                    "expression" : "in0.customer_id = in1.customer_id1"
                  },
                  "joinType" : "INNER"
                } ],
                "expressions" : [ {
                  "expression" : {
                    "expression" : "CAST(customer_id AS INT) > 5"
                  },
                  "alias" : "c1"
                }, {
                  "expression" : {
                    "expression" : "CAST(customer_id AS INT) > 5\nand CAST(customer_id AS INT) != 0\nor first_name LIKE '%A%'\nor ((1 & 1) == 1)\nor ((2 | 2) == 2)\nand 10 * CAST(customer_id AS INT) == 20\nand last_name != first_name\nand (CAST(customer_id AS INT) BETWEEN 10 AND 20)\nand (ARRAY(10, 20, 30)[2] == 30)\nand (MAP(1, 'Hello', 2, 'World')[1] == 'Hello')\nand (10 ^ 20 == 50)\nand (MAP('three', 3).four == NULL)\nand (named_struct('a', 5, 'b', 'Spark').a == 5)\nand (1 = 2 and 1 == 2)\nand (1 >= 2 and 1 <= 2 and 1 != 3 or 2 > 4 or 4 < 5)\nand (\n      EXISTS(\n        ARRAY(1, NULL, 3), \n        x -> x % 2 == 0)\n    )\nor ilike('Spark', '_PARK')\nor (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\nand (1 IS DISTINCT FROM 5)\nand ('invalid' IS false)\nand isnull(1)\nand ('t' IS NOT true)\nand (1 <=> '1')\nand (1 <> CAST(customer_id AS INT))\nand (10 - 2 + 10 == 8)\nand (NOT true)\nand (false or true)\nand (2 % 0 == 0)\nand ('Spark' || 'SQL' == 'SparkSQL')\nand (r'%SystemDrive%\\Users\\John' LIKE r'%SystemDrive%\\\\Users%')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (2L / 2L == 10)\nand (~ 0 == -1)\nand (base64(aes_encrypt('Spark', 'abcdefghijklmnop')) == NULL)\nand (CAST(aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop') AS STRING) == NULL)\nand (ascii('234') == 234)\nand (base64('Spark SQL') == NULL)\nand (bin(13) == NULL)\nand (binary('Spark SQL') == NULL)\nand (btrim('abcaabaSparkSQLabcaaba', 'abc') != NULL)\nand (char(65) != NULL)\nand (char_length('Spark SQL ') == 10)\nand (character_length('Spark SQL ') == 10)\nand (concat(customer_id, 'hello') != NULL)\nand (concat_ws(',', 'Spark', ARRAY('S', 'Q', NULL, 'L'), NULL) != NULL)\nand contains('SparkSQL', 'Spork')\nand (crc32('Spark') > 0)\nand chr(65) != NULL\nand (3 ^ 5 == 6)\nand (hex(encode('Spark SQL', 'US-ASCII')) != NULL)\nand endswith('SparkSQL', 'SQL')\nand (find_in_set('ab', 'abc,b,ab,c,def') == 2)\nand (format_number(12332.123456, 4) == 2)\nand (format_number(12332.123456, '#.###') == 10)\nand (format_string('Hello World %d %s', 100, 'days') != NULL)\nand (hex('Spark SQL') != NULL)\nand (r'%SystemDrive%\\Users\\John' LIKE '%SystemDrive%\\\\\\\\Users%')\nand (initcap('sPark sql') != NULL)\nand (instr('SparkSQL', 'R') == 2)\nand (lcase('LowerCase') != NULL)\nand (LEFT('Spark SQL', 3) != NULL)\nand (length('Spark SQL ') > 20)\nand (levenshtein('kitten', 'sitting') > 10)\nand (locate('bar', 'abcbarbar') > 2)\nand (locate('bar', 'abcbarbar', 5) > 2)\nand (lower('LowerCase') != NULL)\nand (lpad('hi', 1, '??') != NULL)\nand (hex(lpad(x'1020', 5, x'05')) != NULL)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (md5('Spark') != NULL)\nand (octet_length('Spark SQL') != NULL)\nand (parse_url('http://spark.apache.org/path?query=1', 'HOST') != NULL)\nand (position('bar', 'abcbarbar') > 10)\nand (position('bar', 'abcbarbar', 5) > 5)\nand (printf('Hello World %d %s', 100, 'days') != NULL)\nand (r'%SystemDrive%\\Users\\John' RLIKE r'%SystemDrive%\\\\Users.*')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) > 10)\nand (regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1) != NULL)\nand (regexp_replace('100-200', '(\\\\d+)', 'num') != NULL)\nand (repeat('123', 2) != NULL)\nand (replace('ABCabc', 'abc', 'DEF') != NULL)\nand (reverse('Spark SQL') != NULL)\nand (RIGHT('Spark SQL', 3) != NULL)\nand (rpad('hi', 5, 'ab') != NULL)\nand (hex(rpad(x'1020', 5, x'05')) != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (sentences('Hi there! Good morning.', 'en', 'US') != NULL)\nand (sha('Spark') != NULL)\nand (sha1('Spark') != NULL)\nand (sha2('Spark', 256) != NULL)\nand (soundex('Miller') != NULL)\nand (concat('1', space(2), '1') != NULL)\nand (('->' || split_part('Hello,world,!', ',', 1) || '<-') != NULL)\nand (('->' || split_part('', ',', 1) || '<-') != NULL)\nand (('->' || split_part('Hello,World,!', ',', 0) || '<-') != NULL)\nand (startswith('SparkSQL', 'Spark'))\nand (startswith(NULL, 'Spark'))\nand (substr('Spark SQL', 5, 1) != NULL)\nand (substring_index('www.apache.org', '.', 2) != NULL)\nand (CAST(to_binary('537061726B') AS STRING) != NULL)\nand (CAST(to_binary('537061726B', 'hex') AS STRING) != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (translate('AaBbCc', 'abc', '123') != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (ucase('SparkSql') != NULL)\nand (CAST(unbase64('U3BhcmsgU1FM') AS STRING) != NULL)\nand (decode(unhex('537061726B2053514C'), 'UTF-8') != NULL)\nand (upper('SparkSql') != NULL)\nand (10 / 2 == 5)\nand ((3 | 5) == 2)\nand ((DATE'2021-03-20' - INTERVAL '2' MONTH) != NULL)\nand (10 - 2 + 2 == 4)\nand (2 % 1.8 == 2)\nand (3 ^ 5 == 3)\nand (3 & 5 == 2)\nand (3 * 2 == 2)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (abs(-1) == 1)\nand (acos(1) == 1)\nand (acosh(1) == 1)\nand (asin(0) == 1)\nand (asinh(0) == 1)\nand (atan(0) == 1)\nand (atan2(0, 0) == 1)\nand (atanh(0) == 1)\nand (BIGINT(current_timestamp) > 1)\nand (bit_count(-1) > 1)\nand (bit_get(23Y, 1) == 1)\nand (bround(13.5, -1) == 1)\nand (round(13.5, -1) == 1)\nand (cbrt(27.0) == 3)\nand (ceil(3345.1, -2) == 1)\nand (ceiling(5.4) == 6)\nand (ceiling(3345.1, -2) == 1)\nand (conv('100', 2, 10) == 4)\nand (conv('FFFFFFFFFFFFFFFF', 16, 10) == 1)\nand (cos(pi()) == -1)\nand (cosh(0) == 1)\nand (cot(1) == 1)\nand (csc(pi() / 2) == 2)\nand (decimal('5.2') == 5)\nand (degrees(3.141592653589793) == 10)\nand (double('5.2') == 4)\nand (e() == 2)\nand (exp(1) == 2)\nand (expm1(0) == 1)\nand (factorial(2) == 2)\nand (FLOAT('5.2') == 5)\nand (floor(-0.1) == -1)\nand (floor(3345.1, -2) == 20)\nand (getbit(23Y, 0) == 1)\nand (hypot(3, 4) == 5)\nand (INT(-5.6) == 5)\nand (isnan(CAST('NaN' AS double)))\nand (ln(1) == 1)\nand (log(10, 100) == 2)\nand (log1p(0) == 1)\nand (log2(2) == 1)\nand (log10(10) == 1)\nand (nanvl(CAST('NaN' AS DOUBLE), 123) == 2)\nand (negative(1) == -1)\nand (pmod(-10, 3) == 2)\nand (positive(-1) == -1)\nand (pow(2, 3) * power(2, 3) == 8)\nand (radians(180) == 10)\nand (rand(0) * random(0) == 1)\nand (randn(0) == 1)\nand (rint(12.3456) == 1)\nand (round(2.5, 0) == 3)\nand (sec(pi()) == -1)\nand (sin(0) == 0)\nand (shiftleft(2, 1) == 2)\nand (shiftright(4, 1) == 2)\nand (shiftrightunsigned(4, 1) == 2)\nand (sign(40) == 1)\nand (signum(40) == 1)\nand (sinh(0) == 1)\nand (smallint(-5.6) == 5)\nand (sqrt(4) == 2)\nand (tan(0) == 1)\nand (tanh(0) == 1)\nand (tinyint('12') * tinyint(5.4) == 1)\nand (try_add(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_add(1, 2) == 3)\nand (try_divide(3, 2) == 3)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand (try_subtract(1, 2) == 2)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_subtract(-128Y, 1Y) != NULL)\nand (width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2) == 3)\nand (width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) == 10)\nand (ARRAY(10, 20, 30) != NULL)\nand (\n      (\n        aggregate(\n          ARRAY(1, 2, 3), \n          0, \n          (acc, x) -> acc + x, \n          acc -> acc * 10)\n      ) == 1\n    )\nand (array_contains(ARRAY(1, 2, 3), 2))\nand (array_distinct(ARRAY(1, 2, 3, NULL, 3)) != NULL)\nand (array_except(ARRAY(1, 2, 2, 3), ARRAY(1, 1, 3, 5)) != NULL)\nand (array_intersect(ARRAY(1, 2, 3), ARRAY(1, 3, 3, 5)) != NULL)\nand (array_join(ARRAY('hello', 'world'), ',') != NULL)\nand (array_join(ARRAY('hello', NULL, 'world'), ',', '*') == NULL)\nand (array_max(ARRAY(1, 20, NULL, 3)) > 10)\nand (array_min(ARRAY(1, 20, NULL, 3)) == 1)\nand (array_position(ARRAY(3, 2, 1, 4, 1), 1) == 2)\nand (array_remove(ARRAY(1, 2, 3, NULL, 3, 2), 3) != NULL)\nand (array_repeat('123', 2) != NULL)\nand (array_size(ARRAY(1, NULL, 3, NULL)) == 2)\nand (array_sort(ARRAY('bc', 'ab', 'dc')) != NULL)\nand (array_union(ARRAY(1, 2, 2, 3), ARRAY(1, 3, 5)) != NULL)\nand (arrays_overlap(ARRAY(1, 2, NULL, 3), ARRAY(NULL, 4, 5)) == NULL)\nand (arrays_zip(ARRAY(1, 2), ARRAY('shoe', 'string', 'budget')) == NULL)\nand (cardinality(ARRAY('b', 'd', 'c', 'a')) == 2)\nand (concat(ARRAY(1, 2, 3), ARRAY(4, 5), ARRAY(6)) != NULL)\nand (element_at(MAP(1, 'a', 2, 'b'), 2) == NULL)\nand (\n      EXISTS(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 0)\n    )\nand (\n      EXISTS(\n        ARRAY(0, NULL, 2, 3, NULL), \n        x -> x IS NULL)\n    )\nand (\n      filter(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 1) != NULL\n    )\nand (flatten(ARRAY(ARRAY(1, 2), ARRAY(3, 4))) != NULL)\nand (\n      forall(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 0) == NULL\n    )\nand (reverse(ARRAY(2, 1, 4, 3)) != NULL)\nand (sequence(5, 1) != NULL)\nand (cardinality(ARRAY('b', 'd', 'c', 'a')) == 10)\nand (slice(ARRAY(1, 2, 3, 4), 2, 2) != NULL)\nand (sort_array(ARRAY('b', 'd', NULL, 'c', 'a'), true) != NULL)\nand (\n      transform(\n        ARRAY(1, 2, 3), \n        x -> x + 1) != NULL\n    )\nand (try_element_at(ARRAY(1, 2, 3), 2) == 2)\nand (\n      zip_with(\n        ARRAY('a', 'b', 'c'), \n        ARRAY('d', 'e', 'f'), \n        (x, y) -> concat(x, y)) != NULL\n    )\nand (MAP(1, 'Hello', 2, 'World')[1] != NULL)\nand (cardinality(MAP('a', 1, 'b', 2)) == 2)\nand (element_at(MAP(1, 'a', 2, 'b'), 3) == NULL)\nand (MAP(1.0, '2', 3.0, '4') IS NOT NULL)\nand (map_concat(MAP(1, 'a', 2, 'b'), MAP(3, 'c')) IS NOT NULL)\nand (map_contains_key(MAP(1, 'a', 2, 'b'), 2))\nand (map_entries(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_filter(\n        MAP(1, 0, 2, 2, 3, -1), \n        (k, v) -> k > v) IS NOT NULL\n    )\nand (map_from_arrays(ARRAY(1.0, 3.0), ARRAY('2', '4')) IS NOT NULL)\nand (map_from_entries(ARRAY(STRUCT(1, 'a'), STRUCT(2, 'b'))) IS NOT NULL)\nand (map_keys(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (map_values(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_zip_with(\n        MAP(1, 'a', 2, 'b'), \n        MAP(1, 'x', 2, 'y'), \n        (k, v1, v2) -> concat(v1, v2)) IS NOT NULL\n    )\nand (cardinality(MAP('a', 1, 'b', 2)) == 2)\nand (str_to_map('a:1,b:2,c:3', ',', ':') IS NOT NULL)\nand (\n      transform_keys(\n        map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n        (k, v) -> k + 1) IS NOT NULL\n    )\nand (\n      transform_values(\n        map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n        (k, v) -> k + v) IS NOT NULL\n    )\nand (try_element_at(MAP(1, 'a', 2, 'b'), 2) IS NOT NULL)\nand ((INTERVAL '3:15' HOUR TO MINUTE / 3) IS NOT NULL)\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand (typeof(current_timestamp - (current_date + INTERVAL '1' DAY)) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (add_months('2016-08-31', -6) != NULL)\nand (current_date() != NULL)\nand (current_timestamp() != NULL)\nand (current_timezone() != NULL)\nand (DATE('2021-03-21') != NULL)\nand (date_add('2016-07-30', 1) != NULL)\nand (date_format('2016-04-08', 'y') == 2016)\nand (date_from_unix_date(1) != NULL)\nand (date_sub('2016-07-30', 1) != NULL)\nand (date_trunc('YEAR', '2015-03-05T09:32:05.359') != NULL)\nand (datediff('2009-07-31', '2009-07-30') == 1)\nand (day('2009-07-30') == 30)\nand (dayofmonth('2009-07-30') == 30)\nand (dayofweek('2009-07-30') == 5)\nand (dayofyear('2016-04-09') == 100)\nand (EXTRACT(SECONDS FROM INTERVAL '5:00:30.001' HOUR TO SECOND) == 30)\nand (EXTRACT(WEEK FROM TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') != NULL)\nand (from_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (from_utc_timestamp('2016-08-31', 'Asia/Seoul') != NULL)\nand (hour('2009-07-30 12:58:59') == 10)\nand (last_day('2009-01-12') IS NOT NULL)\nand (make_date(2013, 7, 15) IS NOT NULL)\nand (make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)\nand (make_ym_interval(100, 5) IS NOT NULL)\nand (minute('2009-07-30 12:58:59') == 58)\nand (month('2016-07-30') == 7)\nand (months_between('1997-02-28 10:30:00', '1996-10-30') == 3)\nand (months_between('1997-02-28 10:30:00', '1996-10-30', false) == 2)\nand (next_day('2015-01-14', 'TU') != NULL)\nand (now() != NULL)\nand (quarter('2016-08-31') == 3)\nand (second('2009-07-30 12:58:59') == 59)\nand (TIMESTAMP(123) != NULL)\nand (TIMESTAMP('2020-04-30 12:25:13.45') != NULL)\nand (timestamp_micros(1230219000123123) != NULL)\nand (timestamp_millis(1230219000123) != NULL)\nand (timestamp_seconds(1230219000) != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (trunc('2015-10-27', 'YEAR') != NULL)\nand (trunc('2019-08-04', 'quarter') != NULL)\nand (try_add(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_add(DATE'2021-03-31', INTERVAL '1' MONTH) != NULL)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (try_subtract(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (unix_date(DATE('1970-01-02')) == 1)\nand (unix_micros(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_millis(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 1)\nand (weekday(DATE'2009-07-30') == 1)\nand (EXTRACT(DAYOFWEEK_ISO FROM DATE'2009-07-30') == 4)\nand (weekofyear('2008-02-20') == 8)\nand (year('2016-07-30') == 2016)\nand (ARRAY(1, 2, 3) != NULL)\nand (BIGINT('5') == 5)\nand (binary('Spark SQL') != NULL)\nand (BOOLEAN(1))\nand (CAST(5.6 AS DECIMAL (2, 0)) != NULL)\nand (CAST(INTERVAL '1-2' YEAR TO MONTH AS INTEGER) == 12)\nand (DATE('2021-03-21') != NULL)\nand (decimal('5.2') == 5)\nand (double('5.2') / 2 == 5)\nand (FLOAT('5.2') / 2 == 2)\nand (INT('5') == 5)\nand (make_date(2013, 7, 15) != NULL)\nand (make_dt_interval(100, 13) != NULL)\nand (make_ym_interval(100, 5) == NULL)\nand (MAP(1.0, '2', 3.0, '4') IS NOT NULL)\nand (named_struct('a', 1, 'b', 2, 'c', 3) IS NOT NULL)\nand (smallint('5') == 5)\nand (STRUCT(1, 2, 3) IS NOT NULL)\nand (tinyint('12') == 12)\nand (TIMESTAMP('2020-04-30 12:25:13.45') != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31 00:12:00') != NULL)\nand (from_csv('1, 0.8', 'a INT, b DOUBLE') != NULL)\nand (schema_of_csv('1,abc') != NULL)\nand (json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') == 5)\nand (json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') != NULL)\nand (schema_of_json('[{\"col\":01}]', MAP('allowNumericLeadingZeros', 'true')) != NULL)\nand (to_json(named_struct('a', 1, 'b', 2)) != NULL)\nand (to_json(MAP(named_struct('a', 1), named_struct('b', 2))) != NULL)\nand (to_json(ARRAY((MAP('a', 1)))) != NULL)\nand (xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()') != NULL)\nand (xpath_boolean('<a><b>1</b></a>', 'a/b'))\nand (xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 3)\nand (xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c') != NULL)\nand (\n      assert_true(\n        0 < 1) == NULL\n    )\nand (\n      (\n        CASE\n          WHEN 1 > 0\n            THEN 1\n          WHEN 2 > 0\n            THEN 2.0\n          ELSE 1.2\n        END\n      ) == 1\n    )\nand (\n      (\n        CASE 3\n          WHEN 1\n            THEN 'A'\n          WHEN 2\n            THEN 'B'\n          WHEN 3\n            THEN 'C'\n        END\n      ) != NULL\n    )\nand (coalesce(2, 5 / 0) == 2)\nand (current_catalog() != NULL)\nand (current_database() != NULL)\nand (current_user() != NULL)\nand (decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks') != NULL)\nand (elt(1, 'scala', 'java') != NULL)\nand (greatest(10, 9, 2, 4, 3) == 10)\nand (hash('Spark', ARRAY(123), 2) != NULL)\nand (\n      if(\n        1 < 2, \n        'a', \n        'b') != NULL\n    )\nand (ifnull(NULL, ARRAY('2')) != NULL)\nand (isnull(1))\nand (isnotnull(1))\nand (least(10, 9, 2, 4, 3) == 2)\nand (monotonically_increasing_id() > 10)\nand (nullif(2, 2) == NULL)\nand (nvl(NULL, 2) == 2)\nand (nvl2(NULL, 2, 1) == 1)\nand (typeof(1) != NULL)\nand (uuid() != NULL)\nand (xxhash64('Spark', ARRAY(123), 2) != NULL)\nand ('20'::INTEGER == 20)\nand like('Spark', '_park')\nand ('Spark' LIKE SOME('_park', '_ock'))\nand (bitmap_count(x'00') == 10)\nand (charindex('bar', 'abcbarbar') == 1)\nand (decode(x'FEFF0053007000610072006B002000530051004C', 'UTF-16') != NULL)\nand (like('Spark', '_park'))\nand (len('Spark SQL ') > 10)\nand (levenshtein('kitten', 'sitting', 4) > 10)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', 'Z', 'z', '9', 'X') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', lowerChar => 'z', upperChar => 'X') != NULL)\nand (mask('AaBb123-&ASDXYZ921312asd', NULL, NULL, NULL, NULL) != NULL)\nand (overlay('Spark SQL' PLACING '_' FROM 6) != NULL)\nand (overlay('Spark SQL' PLACING 'tructured' FROM 2 FOR 4) != NULL)\nand (overlay(encode('Spark SQL', 'utf-8') PLACING encode('_', 'utf-8') FROM 6) != NULL)\nand (position('bar' IN 'abcbarbar') > 2)\nand (regexp_count('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en') > 2)\nand (regexp_instr('Mary had a little lamb', NULL) != NULL)\nand (regexp_substr(NULL, 'Ste(v|ph)en') != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (STRING(4) != NULL)\nand (substr('Spark SQL', -3) != NULL)\nand (substr('Spark SQL' FROM 5 FOR 1) != NULL)\nand (substr('Spark SQL' FROM -3) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_char(DATE'2016-04-08', 'y') != NULL)\nand (to_char(encode('abc', 'utf-8'), 'utf-8') != NULL)\nand (to_varchar(454, '999') != NULL)\nand (to_varchar(DATE'2016-04-08', 'y') != NULL)\nand (to_varchar(x'537061726b2053514c', 'hex') != NULL)\nand (TRIM( 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(BOTH 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(LEADING 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(TRAILING 'SL' FROM 'SSparkSQLS') != NULL)\nand (\n      CAST(try_aes_decrypt(\n        unbase64('MTIzNDU2Nzg5MDEyMdXvR41sJqwZ6hnTU8FRTTtXbL8yeChIZA=='), \n        '1234567890abcdef', \n        'GCM', \n        'DEFAULT', \n        'Some AAD') AS STRING) != NULL\n    )\nand (url_decode('http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1') != NULL)\nand (url_encode('http://spark.apache.org/path?query=1') != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' + INTERVAL '3' SECOND) != NULL)\nand (bit_reverse(-1) == -1)\nand (bitmap_bit_position(-32768) == 1)\nand (bitmap_bucket_number(-32768) == 1)\nand (MOD(2, 1.8) == 2)\nand (array_append(ARRAY(1, 2, 3), 0) == NULL)\nand (array_compact(ARRAY(1, 2, NULL, 3, NULL, 3)) == NULL)\nand (array_insert(ARRAY('a', 'b', 'c'), 1, 'z') != NULL)\nand (array_prepend(ARRAY(1, 2, 3), 0) != NULL)\nand (get(ARRAY(1, 2, 3), 2) != NULL)\nand (\n      reduce(\n        ARRAY(1, 2, 3), \n        0, \n        (acc, x) -> acc + x) == 2\n    )\nand (shuffle(ARRAY(1, 20, 3, 5)) != NULL)\nand (map_contains_key(MAP(1, 'a', 2, 'b'), 2))\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand (date_diff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (date_part('SECONDS', TIMESTAMP'2019-10-01 00:00:01.000001') == 1)\nand (date_part('Week', TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (dateadd('2016-07-30', 1) != NULL)\nand (dateadd(MICROSECOND, 5, TIMESTAMP'2022-02-28 00:00:00') != NULL)\nand (datediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 11:59:59') == 0)\nand (make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887, 'CET') IS NOT NULL)\nand (make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)\nand (now() != NULL)\nand (timediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (timestampdiff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (to_unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 100)\nand (try_to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand ('20'::INTEGER == 20)\nand (make_interval(100, 11) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)\nand (STRING(5) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_varchar(454, '999') IS NOT NULL)\nand (from_json('{\"a\":1, \"b\":0.8}', 'a INT, b DOUBLE') IS NOT NULL)\nand (get_json_object('{\"a\":\"b\"}', '$.a') IS NOT NULL)\nand (to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), MAP('timestampFormat', 'dd/MM/yyyy')) IS NOT NULL)\nand (to_csv(named_struct('a', 1, 'b', 2)) IS NOT NULL)\nand (from_xml('<p><time>26/08/2015</time></p>', 'time Timestamp', MAP('timestampFormat', 'dd/MM/yyyy')) != NULL)\nand (schema_of_xml('<p><a attr=\"2\">1</a><a>3</a></p>', MAP('excludeAttribute', 'true')) IS NOT NULL)\nand (current_metastore() != NULL)\nand (current_schema() != NULL)\nand (current_version() != NULL)\nand (equal_null(2, 2))\nand (\n      iff(\n        1 < 2, \n        'a', \n        'b') == 'a'\n    )\nand (is_account_group_member('admins'))\nand (is_member('admins'))\nand (luhn_check('12345') == NULL)\nand (user() != NULL)\nand (h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0) != NULL)\nand (h3_coverash3string('{\"type\":\"LineString\",\"coordinates\":[[-122.4194,37.7749],[-118.2437,34.0522],[-74.0060,40.7128]]}', 1) != NULL)\nand (h3_longlatash3(-122.4783, 37.8199, 13) > 0)\nand (h3_longlatash3string(-122.4783, 37.8199, 13) != NULL)\nand (h3_pointash3('POINT(-122.4783 37.8199)', 13) > 0)\nand (h3_pointash3string('{\"type\":\"Point\",\"coordinates\":[]}', 15) == NULL)\nand (h3_pointash3string('POINT(-122.4783 37.8199)', 13) != NULL)\nand (\n      h3_polyfillash3(\n        unhex(\n          '0103000000010000000400000050fc1873d79a5ec0d0d556ec2fe342404182e2c7988f5dc0f46c567dae064140aaf1d24d628052c05e4bc8073d5b444050fc1873d79a5ec0d0d556ec2fe34240'), \n        2) != NULL\n    )\nand (h3_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3('Not-a-valid-rep', 2) == NULL)\nand (h3_try_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_boundaryasgeojson('8009fffffffffff') != NULL)\nand (h3_boundaryasgeojson(599686042433355775) != NULL)\nand (hex(h3_boundaryaswkb(599686042433355775)) != NULL)\nand (h3_boundaryaswkt(599686042433355775) != NULL)\nand (h3_centerasgeojson(599686042433355775) != NULL)\nand (hex(h3_centeraswkb('8009fffffffffff')) == NULL)\nand (h3_centeraswkt('8009fffffffffff') != NULL)\nand (h3_h3tostring(599686042433355775) != NULL)\nand (h3_stringtoh3('85283473fffffff') == NULL)\nand (h3_ischildof('88283471b9fffff', '85283473fffffff'))\nand (h3_ispentagon(590112357393367039))\nand (h3_isvalid('85283473fffffff'))\nand (h3_try_validate(590112357393367039) != NULL)\nand (h3_validate(590112357393367039) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_hexring(599686042433355775, 1) != NULL)\nand (h3_kring(599686042433355775, 1) != NULL)\nand (h3_kringdistances(599686042433355775, 1) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_maxchild(599686042433355775, 10) != NULL)\nand (h3_minchild(599686042433355775, 10) != NULL)\nand (h3_resolution(599686042433355775) == 5)\nand (h3_tochildren(599686042433355775, 6) != NULL)\nand (h3_toparent(599686042433355775, 0) != NULL)\nand (\n      h3_compact(\n        ARRAY(\n          599686042433355775, \n          599686030622195711, \n          599686044580839423, \n          599686038138388479, \n          599686043507097599, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686040285872127, \n          599686041359613951, \n          599686039212130303, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647)) != NULL\n    )\nand (\n      h3_uncompact(\n        ARRAY(\n          599686030622195711, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647, \n          595182446027210751), \n        5) != NULL\n    )"
                  },
                  "alias" : "c2"
                } ],
                "activeTab" : "conditions",
                "columnsSelector" : [ ],
                "headAlias" : "in0"
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "PPHD9rk3",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "customer_id",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "first_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "last_name",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "in0"
                }, {
                  "id" : "apTYJn27",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "customer_id1",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "first_name1",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "last_name1",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "in1"
                } ],
                "outputs" : [ {
                  "id" : "lGUoyVwk",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "c1",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    }, {
                      "name" : "c2",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 9
            }
          },
          "connections" : [ {
            "id" : "yuDT2O44",
            "source" : "combine_multiple##zJpgoMpB",
            "sourcePort" : "cPcOUy8d",
            "target" : "Subgraph_8##Z5aYsBYs",
            "targetPort" : "aY0HPkmt"
          }, {
            "id" : "tqMGfAiP",
            "source" : "all_type_partiti##xaMWzLrY",
            "sourcePort" : "nrjo6uTS",
            "target" : "Reformatfsdfdsf1##UPiQ56mx",
            "targetPort" : "xuLBIT0v"
          }, {
            "id" : "VoV2HPNV",
            "source" : "Reformatfsdfdsf1##UPiQ56mx",
            "sourcePort" : "xzqXO3vj",
            "target" : "Reformat_4_1##kb0UAvQN",
            "targetPort" : "edJMJMQG"
          }, {
            "id" : "V5DIgUov",
            "source" : "store_sales##CRtL3Ktv",
            "sourcePort" : "ht5LWDZn",
            "target" : "SQLStatement_3##fjogIHXI",
            "targetPort" : "KoNFpIi5"
          }, {
            "id" : "ijDi0HFY",
            "source" : "store_sales##CRtL3Ktv",
            "sourcePort" : "ht5LWDZn",
            "target" : "SQLStatement_2##TeY7g42J",
            "targetPort" : "XU6yjyvX"
          }, {
            "id" : "q27pZtx9",
            "source" : "Subgraph_8##Z5aYsBYs",
            "sourcePort" : "D6M5cm30",
            "target" : "SQLStatement_2##TeY7g42J",
            "targetPort" : "sE8wLtT8"
          }, {
            "id" : "ueXrfe4F",
            "source" : "Subgraph_8##Z5aYsBYs",
            "sourcePort" : "f4O5xAs3",
            "target" : "SQLStatement_2##TeY7g42J",
            "targetPort" : "U4YF2jyj"
          }, {
            "id" : "ckacHpqd",
            "source" : "SQLStatement_1_1##tN516Isp",
            "sourcePort" : "jg6dE6Wf",
            "target" : "Join_1_1##bPPz3ocm",
            "targetPort" : "R58zJuKu"
          }, {
            "id" : "YYwJ4gja",
            "source" : "SQLStatement_2##TeY7g42J",
            "sourcePort" : "yLHyZWCB",
            "target" : "Join_1_1##bPPz3ocm",
            "targetPort" : "QBWQ4MPo"
          }, {
            "id" : "m0us0Ao1",
            "source" : "SQLStatement_3##fjogIHXI",
            "sourcePort" : "vFe3bNoD",
            "target" : "Join_1_1##bPPz3ocm",
            "targetPort" : "wWLfsS6C"
          }, {
            "id" : "timZxYpp",
            "source" : "Reformatfsdfdsf1##UPiQ56mx",
            "sourcePort" : "xzqXO3vj",
            "target" : "OrderBy_1_1##scicTbxJ",
            "targetPort" : "e41fzdBT"
          }, {
            "id" : "rgsQiapb",
            "source" : "Reformatfsdfdsf1##UPiQ56mx",
            "sourcePort" : "xzqXO3vj",
            "target" : "Join_2##hMFnAnpj",
            "targetPort" : "PPHD9rk3"
          }, {
            "id" : "GDqeKkuS",
            "source" : "Reformat_4_1##kb0UAvQN",
            "sourcePort" : "S6SEBnSE",
            "target" : "Join_2##hMFnAnpj",
            "targetPort" : "apTYJn27"
          }, {
            "id" : "H6laHD3n",
            "source" : "Reformatfsdfdsf1##UPiQ56mx",
            "sourcePort" : "xzqXO3vj",
            "target" : "Aggregate_1_1##PguZ2Rq3",
            "targetPort" : "vwdVz7qw"
          }, {
            "id" : "zPBMgFOg",
            "source" : "Reformatfsdfdsf1##UPiQ56mx",
            "sourcePort" : "xzqXO3vj",
            "target" : "Reformat_3_1##QiIsaXLw",
            "targetPort" : "llEl9TOl"
          }, {
            "id" : "OLaGPQH0",
            "source" : "Join_1_1##bPPz3ocm",
            "sourcePort" : "gO2fxTw4",
            "target" : "combine_multiple##zJpgoMpB",
            "targetPort" : "Sp5baC0m"
          }, {
            "id" : "IqjOzYFG",
            "source" : "OrderBy_1_1##scicTbxJ",
            "sourcePort" : "TbJZqLqt",
            "target" : "combine_multiple##zJpgoMpB",
            "targetPort" : "MB9uvOvd"
          }, {
            "id" : "PZfPutNz",
            "source" : "Aggregate_1_1##PguZ2Rq3",
            "sourcePort" : "w4HRpFLr",
            "target" : "combine_multiple##zJpgoMpB",
            "targetPort" : "aAx2VHbz"
          }, {
            "id" : "AhIU0NCr",
            "source" : "Reformat_3_1##QiIsaXLw",
            "sourcePort" : "L63PaW8B",
            "target" : "combine_multiple##zJpgoMpB",
            "targetPort" : "nDvKHqDQ"
          }, {
            "id" : "Hox6yqsY",
            "source" : "Join_2##hMFnAnpj",
            "sourcePort" : "lGUoyVwk",
            "target" : "combine_multiple##zJpgoMpB",
            "targetPort" : "sJ0FxCf1"
          }, {
            "id" : "rycDEZRm",
            "source" : "Reformatfsdfdsf1##UPiQ56mx",
            "sourcePort" : "xzqXO3vj",
            "target" : "Filter_1_1##lQLo8tyT",
            "targetPort" : "epTipmcP"
          } ],
          "ports" : {
            "inputs" : [ {
              "id" : "D6M5cm30",
              "schema" : {
                "entityType" : "",
                "providerType" : "databricks",
                "fields" : [ {
                  "name" : "I_ITEM_SK",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "I_ITEM_ID",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "I_REC_START_DATE",
                  "dataType" : {
                    "type" : "Date"
                  }
                }, {
                  "name" : "I_REC_END_DATE",
                  "dataType" : {
                    "type" : "Date"
                  }
                }, {
                  "name" : "I_ITEM_DESC",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "I_CURRENT_PRICE",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "I_WHOLESALE_COST",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "I_BRAND_ID",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "I_BRAND",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "I_CLASS_ID",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "I_CLASS",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "I_CATEGORY_ID",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "I_CATEGORY",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "I_MANUFACT_ID",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "I_MANUFACT",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "I_SIZE",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "I_FORMULATION",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "I_COLOR",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "I_UNITS",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "I_CONTAINER",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "I_MANAGER_ID",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "I_PRODUCT_NAME",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "item"
            }, {
              "id" : "f4O5xAs3",
              "schema" : {
                "entityType" : "",
                "providerType" : "databricks",
                "fields" : [ {
                  "name" : "D_DATE_SK",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "D_DATE_ID",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "D_DATE",
                  "dataType" : {
                    "type" : "Date"
                  }
                }, {
                  "name" : "D_MONTH_SEQ",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "D_WEEK_SEQ",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "D_QUARTER_SEQ",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "D_YEAR",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "D_DOW",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "D_MOY",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "D_DOM",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "D_QOY",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "D_FY_YEAR",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "D_FY_QUARTER_SEQ",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "D_FY_WEEK_SEQ",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "D_DAY_NAME",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "D_QUARTER_NAME",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "D_HOLIDAY",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "D_WEEKEND",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "D_FOLLOWING_HOLIDAY",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "D_FIRST_DOM",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "D_LAST_DOM",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "D_SAME_DAY_LY",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "D_SAME_DAY_LQ",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "D_CURRENT_DAY",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "D_CURRENT_WEEK",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "D_CURRENT_MONTH",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "D_CURRENT_QUARTER",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "D_CURRENT_YEAR",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "date_dim"
            } ],
            "outputs" : [ {
              "id" : "aY0HPkmt",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "substrw_warehouse_name120",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "sm_type",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "cc_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "days_30",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "days_31_60",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "days_61_90",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "days_90_120",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "days_more_than_120",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "i_item_id",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "h8_30_to_9",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "properties" : { },
          "canonical" : false,
          "index" : 6
        },
        "Subgraph_1##nKxpEsfy" : {
          "id" : "Subgraph_1##nKxpEsfy",
          "component" : "Subgraph",
          "metadata" : {
            "label" : "Subgraph_1",
            "phase" : 0
          },
          "processes" : {
            "Reformat_4##wptdywTv" : {
              "id" : "Reformat_4##wptdywTv",
              "component" : "Reformat",
              "metadata" : {
                "label" : "Reformat_4",
                "phase" : 0,
                "macroDependencies" : [ ],
                "isLabelGrayed" : false
              },
              "properties" : {
                "columnsSelector" : [ ],
                "expressions" : [ {
                  "expression" : {
                    "expression" : "T_TIME_SK"
                  },
                  "alias" : "T_TIME_SK"
                }, {
                  "expression" : {
                    "expression" : "T_TIME_ID"
                  },
                  "alias" : "T_TIME_ID"
                }, {
                  "expression" : {
                    "expression" : "T_TIME"
                  },
                  "alias" : "T_TIME"
                }, {
                  "expression" : {
                    "expression" : "T_HOUR"
                  },
                  "alias" : "T_HOUR"
                }, {
                  "expression" : {
                    "expression" : "T_MINUTE"
                  },
                  "alias" : "T_MINUTE"
                }, {
                  "expression" : {
                    "expression" : "T_SECOND"
                  },
                  "alias" : "T_SECOND"
                }, {
                  "expression" : {
                    "expression" : "T_AM_PM"
                  },
                  "alias" : "T_AM_PM"
                }, {
                  "expression" : {
                    "expression" : "T_SHIFT"
                  },
                  "alias" : "T_SHIFT"
                }, {
                  "expression" : {
                    "expression" : "T_SUB_SHIFT"
                  },
                  "alias" : "T_SUB_SHIFT"
                }, {
                  "expression" : {
                    "expression" : "T_MEAL_TIME"
                  },
                  "alias" : "T_MEAL_TIME"
                } ]
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "dFYB0Tqc",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "databricks",
                    "fields" : [ {
                      "name" : "T_TIME_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_TIME_ID",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "T_TIME",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_HOUR",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_MINUTE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_SECOND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_AM_PM",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "T_SHIFT",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "T_SUB_SHIFT",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "T_MEAL_TIME",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "in0"
                } ],
                "outputs" : [ {
                  "id" : "iVtTTxmK",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "T_TIME_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_TIME_ID",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "T_TIME",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_HOUR",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_MINUTE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_SECOND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_AM_PM",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "T_SHIFT",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "T_SUB_SHIFT",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "T_MEAL_TIME",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 9
            },
            "Reformat_2##ZYw6cwtk" : {
              "id" : "Reformat_2##ZYw6cwtk",
              "component" : "Reformat",
              "metadata" : {
                "label" : "Reformat_2",
                "phase" : 0,
                "macroDependencies" : [ ],
                "isLabelGrayed" : false
              },
              "properties" : {
                "columnsSelector" : [ ],
                "expressions" : [ {
                  "expression" : {
                    "expression" : "ID"
                  },
                  "alias" : "ID"
                }, {
                  "expression" : {
                    "expression" : "ORDER_ID"
                  },
                  "alias" : "ORDER_ID"
                }, {
                  "expression" : {
                    "expression" : "PAYMENT_METHOD"
                  },
                  "alias" : "`PAYMENT_METHOD`"
                }, {
                  "expression" : {
                    "expression" : "AMOUNT"
                  },
                  "alias" : "AMOUNT"
                } ]
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "PaCqTyKR",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "databricks",
                    "fields" : [ {
                      "name" : "ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "ORDER_ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "PAYMENT_METHOD",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "AMOUNT",
                      "dataType" : {
                        "type" : "Float"
                      }
                    } ]
                  },
                  "slug" : "in0"
                } ],
                "outputs" : [ {
                  "id" : "Lvh4PklB",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "ORDER_ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "PAYMENT_METHOD",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "AMOUNT",
                      "dataType" : {
                        "type" : "Float"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 6
            },
            "store_returns##qo6Ue2le" : {
              "id" : "store_returns##qo6Ue2le",
              "component" : "Source",
              "metadata" : {
                "label" : "store_returns",
                "phase" : 0,
                "isLabelGrayed" : false
              },
              "properties" : {
                "table" : {
                  "name" : "store_returns",
                  "sourceType" : "Source",
                  "sourceName" : "spark_catalog.qa_suggestion_database"
                }
              },
              "ports" : {
                "inputs" : [ ],
                "outputs" : [ {
                  "id" : "Wgxylfca",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "databricks",
                    "fields" : [ {
                      "name" : "SR_RETURNED_DATE_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_TIME_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_ITEM_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_CUSTOMER_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_CDEMO_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_HDEMO_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_ADDR_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_STORE_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_REASON_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_TICKET_NUMBER",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_QUANTITY",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_AMT",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_TAX",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_AMT_INC_TAX",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_FEE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_SHIP_COST",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_REFUNDED_CASH",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_REVERSED_CHARGE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_STORE_CREDIT",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_NET_LOSS",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 0
            },
            "SQLStatement_4##lpp992Ys" : {
              "id" : "SQLStatement_4##lpp992Ys",
              "component" : "Deduplicate",
              "metadata" : {
                "label" : "SQLStatement_4",
                "phase" : 0,
                "isLabelGrayed" : false
              },
              "properties" : {
                "dedupColumns" : [ {
                  "expression" : {
                    "expression" : "IB_INCOME_BAND_SK"
                  }
                }, {
                  "expression" : {
                    "expression" : "IB_Lower_boUND"
                  }
                }, {
                  "expression" : {
                    "expression" : "IB_UPPER_BOUND"
                  }
                } ],
                "dedupType" : "distinct",
                "columnsSelector" : [ ],
                "orders" : [ ],
                "useOrderBy" : false
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "kQm32Icc",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "databricks",
                    "fields" : [ {
                      "name" : "IB_INCOME_BAND_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "IB_LOWER_BOUND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "IB_UPPER_BOUND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "Income_BAND"
                } ],
                "outputs" : [ {
                  "id" : "iS3iWr8a",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "IB_INCOME_BAND_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "IB_Lower_boUND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "IB_UPPER_BOUND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 3
            },
            "payments##wyfJEMrg" : {
              "id" : "payments##wyfJEMrg",
              "component" : "Source",
              "metadata" : {
                "label" : "payments",
                "phase" : 0,
                "isLabelGrayed" : false
              },
              "properties" : {
                "table" : {
                  "name" : "payments",
                  "sourceType" : "Source",
                  "sourceName" : "spark_catalog.qa_suggestion_database"
                }
              },
              "ports" : {
                "inputs" : [ ],
                "outputs" : [ {
                  "id" : "zQEeXC6L",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "databricks",
                    "fields" : [ {
                      "name" : "ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "ORDER_ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "PAYMENT_METHOD",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "AMOUNT",
                      "dataType" : {
                        "type" : "Float"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 4
            },
            "Reformat_6##CVNY8jIg" : {
              "id" : "Reformat_6##CVNY8jIg",
              "component" : "Reformat",
              "metadata" : {
                "label" : "Reformat_6",
                "phase" : 0,
                "macroDependencies" : [ ],
                "isLabelGrayed" : false
              },
              "properties" : {
                "columnsSelector" : [ ],
                "expressions" : [ {
                  "expression" : {
                    "expression" : "SR_RETURNED_DATE_SK"
                  },
                  "alias" : "SR_RETURNED_DATE_SK"
                }, {
                  "expression" : {
                    "expression" : "SR_RETURN_TIME_SK"
                  },
                  "alias" : "SR_RETURN_TIME_SK"
                } ]
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "PuqQ5PFt",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "SR_RETURNED_Date_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_TIME_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_amt_INC_TAX",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "in0"
                } ],
                "outputs" : [ {
                  "id" : "GJuJJATs",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "SR_RETURNED_DATE_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_TIME_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 7
            },
            "income_band##FkftWBU8" : {
              "id" : "income_band##FkftWBU8",
              "component" : "Source",
              "metadata" : {
                "label" : "income_band",
                "phase" : 0,
                "isLabelGrayed" : false
              },
              "properties" : {
                "table" : {
                  "name" : "income_band",
                  "sourceType" : "Source",
                  "sourceName" : "spark_catalog.qa_suggestion_database"
                }
              },
              "ports" : {
                "inputs" : [ ],
                "outputs" : [ {
                  "id" : "BPJ4aGTI",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "databricks",
                    "fields" : [ {
                      "name" : "IB_INCOME_BAND_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "IB_LOWER_BOUND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "IB_UPPER_BOUND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 2
            },
            "SQLStatement_4_1##fsXqPp4I" : {
              "id" : "SQLStatement_4_1##fsXqPp4I",
              "component" : "Deduplicate",
              "metadata" : {
                "label" : "SQLStatement_4_1",
                "phase" : 0,
                "isLabelGrayed" : false
              },
              "properties" : {
                "dedupColumns" : [ {
                  "expression" : {
                    "expression" : "SR_RETURNED_Date_SK"
                  }
                }, {
                  "expression" : {
                    "expression" : "SR_RETURN_TIME_SK"
                  }
                }, {
                  "expression" : {
                    "expression" : "SR_RETURN_amt_INC_TAX"
                  }
                } ],
                "dedupType" : "distinct",
                "columnsSelector" : [ ],
                "orders" : [ ],
                "useOrderBy" : false
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "j0QgpMih",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "databricks",
                    "fields" : [ {
                      "name" : "SR_RETURNED_DATE_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_TIME_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_ITEM_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_CUSTOMER_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_CDEMO_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_HDEMO_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_ADDR_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_STORE_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_REASON_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_TICKET_NUMBER",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_QUANTITY",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_AMT",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_TAX",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_AMT_INC_TAX",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_FEE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_SHIP_COST",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_REFUNDED_CASH",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_REVERSED_CHARGE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_STORE_CREDIT",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_NET_LOSS",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "Store_RETURNS"
                } ],
                "outputs" : [ {
                  "id" : "GDhOJXAn",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "SR_RETURNED_Date_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_TIME_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_amt_INC_TAX",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 1
            },
            "Reformat_5##NSXPojWo" : {
              "id" : "Reformat_5##NSXPojWo",
              "component" : "Reformat",
              "metadata" : {
                "label" : "Reformat_5",
                "phase" : 0,
                "macroDependencies" : [ ],
                "isLabelGrayed" : false
              },
              "properties" : {
                "columnsSelector" : [ ],
                "expressions" : [ {
                  "expression" : {
                    "expression" : "IB_INCOME_BAND_SK"
                  },
                  "alias" : "IB_INCOME_BAND_SK"
                }, {
                  "expression" : {
                    "expression" : "IB_LOWER_BOUND"
                  },
                  "alias" : "IB_LOWER_BOUND"
                }, {
                  "expression" : {
                    "expression" : "IB_UPPER_BOUND"
                  },
                  "alias" : "IB_UPPER_BOUND"
                } ]
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "yOH6tDb7",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "IB_INCOME_BAND_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "IB_Lower_boUND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "IB_UPPER_BOUND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "in0"
                } ],
                "outputs" : [ {
                  "id" : "zKGNV4tK",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "IB_INCOME_BAND_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "IB_LOWER_BOUND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "IB_UPPER_BOUND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 5
            },
            "Reformat_3##znhWW4vM" : {
              "id" : "Reformat_3##znhWW4vM",
              "component" : "Reformat",
              "metadata" : {
                "label" : "Reformat_3",
                "phase" : 0,
                "macroDependencies" : [ ],
                "isLabelGrayed" : false
              },
              "properties" : {
                "columnsSelector" : [ ],
                "expressions" : [ {
                  "expression" : {
                    "expression" : "ID"
                  },
                  "alias" : "ID"
                }, {
                  "expression" : {
                    "expression" : "USER_ID"
                  },
                  "alias" : "USER_ID"
                }, {
                  "expression" : {
                    "expression" : "ORDER_DATE"
                  },
                  "alias" : "ORDER_DATE"
                }, {
                  "expression" : {
                    "expression" : "STATUS"
                  },
                  "alias" : "STATUS"
                } ]
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "yOAu3ZdJ",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "databricks",
                    "fields" : [ {
                      "name" : "ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "USER_ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "ORDER_DATE",
                      "dataType" : {
                        "type" : "Date"
                      }
                    }, {
                      "name" : "STATUS",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "in0"
                } ],
                "outputs" : [ {
                  "id" : "vjxA5vAW",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "USER_ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "ORDER_DATE",
                      "dataType" : {
                        "type" : "Date"
                      }
                    }, {
                      "name" : "STATUS",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 11
            },
            "time_dim##RPzlXedK" : {
              "id" : "time_dim##RPzlXedK",
              "component" : "Source",
              "metadata" : {
                "label" : "time_dim",
                "phase" : 0,
                "isLabelGrayed" : false
              },
              "properties" : {
                "table" : {
                  "name" : "time_dim",
                  "sourceType" : "Source",
                  "sourceName" : "spark_catalog.qa_suggestion_database"
                }
              },
              "ports" : {
                "inputs" : [ ],
                "outputs" : [ {
                  "id" : "njtUnL2V",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "databricks",
                    "fields" : [ {
                      "name" : "T_TIME_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_TIME_ID",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "T_TIME",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_HOUR",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_MINUTE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_SECOND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_AM_PM",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "T_SHIFT",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "T_SUB_SHIFT",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "T_MEAL_TIME",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 8
            },
            "orders##wsq35K9r" : {
              "id" : "orders##wsq35K9r",
              "component" : "Source",
              "metadata" : {
                "label" : "orders",
                "phase" : 0,
                "isLabelGrayed" : false
              },
              "properties" : {
                "table" : {
                  "name" : "orders",
                  "sourceType" : "Source",
                  "sourceName" : "spark_catalog.qa_suggestion_database"
                }
              },
              "ports" : {
                "inputs" : [ ],
                "outputs" : [ {
                  "id" : "ZojdLINe",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "databricks",
                    "fields" : [ {
                      "name" : "ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "USER_ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "ORDER_DATE",
                      "dataType" : {
                        "type" : "Date"
                      }
                    }, {
                      "name" : "STATUS",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 10
            },
            "combine_multiple##pCivmAxH" : {
              "id" : "combine_multiple##pCivmAxH",
              "component" : "Macro",
              "metadata" : {
                "label" : "combine_multiple_tables_2",
                "phase" : 0,
                "macroDependencies" : [ "SQL_DatabricksSharedBasic.combine_multiple_tables" ],
                "isLabelGrayed" : false
              },
              "properties" : {
                "macroName" : "combine_multiple_tables",
                "parameters" : [ {
                  "name" : "table_1",
                  "value" : "'Reformat_5'"
                }, {
                  "name" : "table_2",
                  "value" : "'Reformat_6'"
                }, {
                  "name" : "table_3",
                  "value" : "'Reformat_4'"
                }, {
                  "name" : "table_4",
                  "value" : "'Reformat_3'"
                }, {
                  "name" : "table_5",
                  "value" : "'Reformat_2'"
                }, {
                  "name" : "col_table_1",
                  "value" : "'IB_LOWER_BOUND'"
                } ],
                "projectName" : "SQL_DatabricksSharedBasic"
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "Bx0p0bgS",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "IB_INCOME_BAND_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "IB_LOWER_BOUND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "IB_UPPER_BOUND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "Reformat_5"
                }, {
                  "id" : "kulECMMS",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "SR_RETURNED_DATE_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "SR_RETURN_TIME_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "Reformat_6"
                }, {
                  "id" : "RRJbgFL7",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "T_TIME_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_TIME_ID",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "T_TIME",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_HOUR",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_MINUTE",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_SECOND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "T_AM_PM",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "T_SHIFT",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "T_SUB_SHIFT",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "T_MEAL_TIME",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "Reformat_4"
                }, {
                  "id" : "j2JbbYlt",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "USER_ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "ORDER_DATE",
                      "dataType" : {
                        "type" : "Date"
                      }
                    }, {
                      "name" : "STATUS",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "Reformat_3"
                }, {
                  "id" : "T7yGaNf7",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "ORDER_ID",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "PAYMENT_METHOD",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "AMOUNT",
                      "dataType" : {
                        "type" : "Float"
                      }
                    } ]
                  },
                  "slug" : "Reformat_2"
                } ],
                "outputs" : [ {
                  "id" : "eNOUtgPX",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "IB_INCOME_BAND_SK",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "IB_LOWER_BOUND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    }, {
                      "name" : "IB_UPPER_BOUND",
                      "dataType" : {
                        "type" : "Decimal"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 12
            }
          },
          "connections" : [ {
            "id" : "BxDNaxyk",
            "source" : "combine_multiple##pCivmAxH",
            "sourcePort" : "eNOUtgPX",
            "target" : "Subgraph_1##nKxpEsfy",
            "targetPort" : "iy4IKXM3"
          }, {
            "id" : "z7ZMSQaM",
            "source" : "store_returns##qo6Ue2le",
            "sourcePort" : "Wgxylfca",
            "target" : "SQLStatement_4_1##fsXqPp4I",
            "targetPort" : "j0QgpMih"
          }, {
            "id" : "JpmGBRE0",
            "source" : "income_band##FkftWBU8",
            "sourcePort" : "BPJ4aGTI",
            "target" : "SQLStatement_4##lpp992Ys",
            "targetPort" : "kQm32Icc"
          }, {
            "id" : "EoEWa9Bz",
            "source" : "SQLStatement_4##lpp992Ys",
            "sourcePort" : "iS3iWr8a",
            "target" : "Reformat_5##NSXPojWo",
            "targetPort" : "yOH6tDb7"
          }, {
            "id" : "pbghsrlV",
            "source" : "payments##wyfJEMrg",
            "sourcePort" : "zQEeXC6L",
            "target" : "Reformat_2##ZYw6cwtk",
            "targetPort" : "PaCqTyKR"
          }, {
            "id" : "dDrPA0U6",
            "source" : "SQLStatement_4_1##fsXqPp4I",
            "sourcePort" : "GDhOJXAn",
            "target" : "Reformat_6##CVNY8jIg",
            "targetPort" : "PuqQ5PFt"
          }, {
            "id" : "VcT3pCeM",
            "source" : "time_dim##RPzlXedK",
            "sourcePort" : "njtUnL2V",
            "target" : "Reformat_4##wptdywTv",
            "targetPort" : "dFYB0Tqc"
          }, {
            "id" : "KQS7NVNn",
            "source" : "orders##wsq35K9r",
            "sourcePort" : "ZojdLINe",
            "target" : "Reformat_3##znhWW4vM",
            "targetPort" : "yOAu3ZdJ"
          }, {
            "id" : "rmH9rXR3",
            "source" : "Reformat_5##NSXPojWo",
            "sourcePort" : "zKGNV4tK",
            "target" : "combine_multiple##pCivmAxH",
            "targetPort" : "Bx0p0bgS"
          }, {
            "id" : "g3ay3Ibl",
            "source" : "Reformat_6##CVNY8jIg",
            "sourcePort" : "GJuJJATs",
            "target" : "combine_multiple##pCivmAxH",
            "targetPort" : "kulECMMS"
          }, {
            "id" : "NsDYckop",
            "source" : "Reformat_4##wptdywTv",
            "sourcePort" : "iVtTTxmK",
            "target" : "combine_multiple##pCivmAxH",
            "targetPort" : "RRJbgFL7"
          }, {
            "id" : "hop59zdC",
            "source" : "Reformat_3##znhWW4vM",
            "sourcePort" : "vjxA5vAW",
            "target" : "combine_multiple##pCivmAxH",
            "targetPort" : "j2JbbYlt"
          }, {
            "id" : "k41lEduv",
            "source" : "Reformat_2##ZYw6cwtk",
            "sourcePort" : "Lvh4PklB",
            "target" : "combine_multiple##pCivmAxH",
            "targetPort" : "T7yGaNf7"
          } ],
          "ports" : {
            "inputs" : [ ],
            "outputs" : [ {
              "id" : "iy4IKXM3",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "IB_INCOME_BAND_SK",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "IB_LOWER_BOUND",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                }, {
                  "name" : "IB_UPPER_BOUND",
                  "dataType" : {
                    "type" : "Decimal"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "properties" : { },
          "canonical" : false,
          "index" : 4
        },
        "Limit_7##QklhtnW9" : {
          "id" : "Limit_7##QklhtnW9",
          "component" : "Limit",
          "metadata" : {
            "label" : "Limit_7",
            "phase" : 0,
            "isLabelGrayed" : false
          },
          "properties" : {
            "limit" : {
              "expression" : "10"
            }
          },
          "ports" : {
            "inputs" : [ {
              "id" : "OCcpnXxL",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "p_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "p_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                }, {
                  "name" : "c_id",
                  "dataType" : {
                    "type" : "Integer"
                  }
                } ]
              },
              "slug" : "env_uitesting_main_model_databricks_1"
            } ],
            "outputs" : [ {
              "id" : "EgU3SI2g",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "p_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "p_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                }, {
                  "name" : "c_id",
                  "dataType" : {
                    "type" : "Integer"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 0
        },
        "all_type_partiti##gJTeAp8S" : {
          "id" : "all_type_partiti##gJTeAp8S",
          "component" : "Source",
          "metadata" : {
            "label" : "all_type_partitioned_1",
            "phase" : 0,
            "isLabelGrayed" : false
          },
          "properties" : {
            "table" : {
              "name" : "all_type_partitioned",
              "sourceType" : "Source",
              "sourceName" : "spark_catalog.qa_database"
            }
          },
          "ports" : {
            "inputs" : [ ],
            "outputs" : [ {
              "id" : "Za2z7lbW",
              "schema" : {
                "entityType" : "",
                "providerType" : "databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                }, {
                  "name" : "p_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "p_string",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 1
        }
      },
      "connections" : [ {
        "id" : "QPWgjKIL",
        "source" : "Join_3##g9GosHMr",
        "sourcePort" : "bQtFXc4r",
        "target" : "Subgraph_10##pzblqig4",
        "targetPort" : "scolMWKE"
      }, {
        "id" : "WazDFczO",
        "source" : "Subgraph_10##pzblqig4",
        "sourcePort" : "NlrE2D5f",
        "target" : "Limit_7##QklhtnW9",
        "targetPort" : "OCcpnXxL"
      }, {
        "id" : "tqlJT683",
        "source" : "all_type_partiti##gJTeAp8S",
        "sourcePort" : "Za2z7lbW",
        "target" : "SQLStatementtest##xJ3LB9ZB",
        "targetPort" : "InnYvxsV"
      }, {
        "id" : "Zhlb95iL",
        "source" : "SQLStatementtest##xJ3LB9ZB",
        "sourcePort" : "yLyFaRkq",
        "target" : "OrderBy_2_1##O1TIFDuY",
        "targetPort" : "nZrCAle2"
      }, {
        "id" : "cdXkqvKP",
        "source" : "Subgraph_10##pzblqig4",
        "sourcePort" : "jDMQxDUF",
        "target" : "Subgraph_8##Z5aYsBYs",
        "targetPort" : "D6M5cm30"
      }, {
        "id" : "hX0h3eeL",
        "source" : "Subgraph_10##pzblqig4",
        "sourcePort" : "EfvURWdO",
        "target" : "Subgraph_8##Z5aYsBYs",
        "targetPort" : "f4O5xAs3"
      }, {
        "id" : "wJ5Z3Acf",
        "source" : "model_with_only_##apDJbyY7",
        "sourcePort" : "P7cbCZ8B",
        "target" : "Join_3##g9GosHMr",
        "targetPort" : "LvGr2U5q"
      }, {
        "id" : "e7iny3Lq",
        "source" : "Limit_7##QklhtnW9",
        "sourcePort" : "EgU3SI2g",
        "target" : "Join_3##g9GosHMr",
        "targetPort" : "xzGcQVgd"
      }, {
        "id" : "zg21Jsrd",
        "source" : "Subgraph_8##Z5aYsBYs",
        "sourcePort" : "aY0HPkmt",
        "target" : "Join_3##g9GosHMr",
        "targetPort" : "B5T5znQd"
      }, {
        "id" : "wlaNQyeU",
        "source" : "OrderBy_2_1##O1TIFDuY",
        "sourcePort" : "HOMc9wU3",
        "target" : "Join_3##g9GosHMr",
        "targetPort" : "UVY5gb8c"
      }, {
        "id" : "uUGMApso",
        "source" : "Subgraph_1##nKxpEsfy",
        "sourcePort" : "iy4IKXM3",
        "target" : "Join_3##g9GosHMr",
        "targetPort" : "hXsSuW7g"
      } ],
      "ports" : {
        "inputs" : [ {
          "id" : "NlrE2D5f",
          "slug" : "env_uitesting_main_model_databricks_1"
        }, {
          "id" : "jDMQxDUF",
          "slug" : "item"
        }, {
          "id" : "EfvURWdO",
          "slug" : "date_dim"
        } ],
        "outputs" : [ {
          "id" : "scolMWKE",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : { },
      "canonical" : false,
      "index" : 38
    },
    "SQLStatement_3_1##QMBiKexT" : {
      "id" : "SQLStatement_3_1##QMBiKexT",
      "component" : "Reformat",
      "metadata" : {
        "label" : "SQLStatement_3_1_1",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "expressions" : [ ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "G6YLM9Yr",
          "slug" : "SQLStatement_1_4"
        } ],
        "outputs" : [ {
          "id" : "tH7fag0D",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 44
    },
    "SQLStatement_2_1##hIGuepnA" : {
      "id" : "SQLStatement_2_1##hIGuepnA",
      "component" : "Reformat",
      "metadata" : {
        "label" : "SQLStatement_2_1",
        "phase" : 0,
        "macroDependencies" : [ ],
        "isLabelGrayed" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "expressions" : [ {
          "expression" : {
            "expression" : "customer_id"
          }
        }, {
          "expression" : {
            "expression" : "first_name"
          }
        }, {
          "expression" : {
            "expression" : "c1"
          }
        }, {
          "expression" : {
            "expression" : "c3"
          }
        }, {
          "expression" : {
            "expression" : "c6"
          }
        }, {
          "expression" : {
            "expression" : "c13"
          }
        }, {
          "expression" : {
            "expression" : "c14"
          }
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "q5zul11w",
          "slug" : "AllExReformat"
        } ],
        "outputs" : [ {
          "id" : "aKu5nwbA",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 18
    },
    "all_type_parquet##G1Ck5ydx" : {
      "id" : "all_type_parquet##G1Ck5ydx",
      "component" : "Source",
      "metadata" : {
        "label" : "all_type_parquet_1_2",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "table" : {
          "name" : "all_type_parquet",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "BtIH9ere",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 51
    },
    "Reformat_2_1##fpew3mCh" : {
      "id" : "Reformat_2_1##fpew3mCh",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Reformat_2_1",
        "phase" : 0,
        "macroDependencies" : [ ],
        "comment" : "Filters customer data based on various complex criteria for targeted analysis.",
        "isLabelGrayed" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "expressions" : [ {
          "expression" : {
            "expression" : "customer_id"
          },
          "alias" : "customer_id"
        }, {
          "expression" : {
            "expression" : "first_name"
          },
          "alias" : "first_name"
        }, {
          "expression" : {
            "expression" : "last_name"
          },
          "alias" : "last_name"
        }, {
          "expression" : {
            "expression" : "CAST(customer_id AS INT) > 5\nand CAST(customer_id AS INT) != 0\nor first_name LIKE '%A%'\nor ((1 & 1) == 1)\nor ((2 | 2) == 2)\nand 10 * CAST(customer_id AS INT) == 20\nand last_name != first_name\nand (CAST(customer_id AS INT) BETWEEN 10 AND 20)\nand (ARRAY(10, 20, 30)[2] == 30)\nand (MAP(1, 'Hello', 2, 'World')[1] == 'Hello')\nand (10 ^ 20 == 50)\nand (MAP('three', 3).four == NULL)\nand (named_struct('a', 5, 'b', 'Spark').a == 5)\nand (1 = 2 and 1 == 2)\nand (1 >= 2 and 1 <= 2 and 1 != 3 or 2 > 4 or 4 < 5)\nand (\n      EXISTS(\n        ARRAY(1, NULL, 3), \n        x -> x % 2 == 0)\n    )\nor ilike('Spark', '_PARK')\nor (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\nand (1 IS DISTINCT FROM 5)\nand ('invalid' IS false)\nand isnull(1)\nand ('t' IS NOT true)\nand (1 <=> '1')\nand (1 <> CAST(customer_id AS INT))\nand (10 - 2 + 10 == 8)\nand (NOT true)\nand (false or true)\nand (2 % 0 == 0)\nand ('Spark' || 'SQL' == 'SparkSQL')\nand (r'%SystemDrive%\\Users\\John' LIKE r'%SystemDrive%\\\\Users%')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (2L / 2L == 10)\nand (~ 0 == -1)\nand (base64(aes_encrypt('Spark', 'abcdefghijklmnop')) == NULL)\nand (CAST(aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop') AS STRING) == NULL)\nand (ascii('234') == 234)\nand (base64('Spark SQL') == NULL)\nand (bin(13) == NULL)\nand (binary('Spark SQL') == NULL)\nand (btrim('abcaabaSparkSQLabcaaba', 'abc') != NULL)\nand (char(65) != NULL)\nand (char_length('Spark SQL ') == 10)\nand (character_length('Spark SQL ') == 10)\nand (concat(customer_id, 'hello') != NULL)\nand (concat_ws(',', 'Spark', ARRAY('S', 'Q', NULL, 'L'), NULL) != NULL)\nand contains('SparkSQL', 'Spork')\nand (crc32('Spark') > 0)\nand chr(65) != NULL\nand (3 ^ 5 == 6)\nand (hex(encode('Spark SQL', 'US-ASCII')) != NULL)\nand endswith('SparkSQL', 'SQL')\nand (find_in_set('ab', 'abc,b,ab,c,def') == 2)\nand (format_number(12332.123456, 4) == 2)\nand (format_number(12332.123456, '#.###') == 10)\nand (format_string('Hello World %d %s', 100, 'days') != NULL)\nand (hex('Spark SQL') != NULL)\nand (r'%SystemDrive%\\Users\\John' LIKE '%SystemDrive%\\\\\\\\Users%')\nand (initcap('sPark sql') != NULL)\nand (instr('SparkSQL', 'R') == 2)\nand (lcase('LowerCase') != NULL)\nand (LEFT('Spark SQL', 3) != NULL)\nand (length('Spark SQL ') > 20)\nand (levenshtein('kitten', 'sitting') > 10)\nand (locate('bar', 'abcbarbar') > 2)\nand (locate('bar', 'abcbarbar', 5) > 2)\nand (lower('LowerCase') != NULL)\nand (lpad('hi', 1, '??') != NULL)\nand (hex(lpad(x'1020', 5, x'05')) != NULL)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (md5('Spark') != NULL)\nand (octet_length('Spark SQL') != NULL)\nand (parse_url('http://spark.apache.org/path?query=1', 'HOST') != NULL)\nand (position('bar', 'abcbarbar') > 10)\nand (position('bar', 'abcbarbar', 5) > 5)\nand (printf('Hello World %d %s', 100, 'days') != NULL)\nand (r'%SystemDrive%\\Users\\John' RLIKE r'%SystemDrive%\\\\Users.*')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) > 10)\nand (regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1) != NULL)\nand (regexp_replace('100-200', '(\\\\d+)', 'num') != NULL)\nand (repeat('123', 2) != NULL)\nand (replace('ABCabc', 'abc', 'DEF') != NULL)\nand (reverse('Spark SQL') != NULL)\nand (RIGHT('Spark SQL', 3) != NULL)\nand (rpad('hi', 5, 'ab') != NULL)\nand (hex(rpad(x'1020', 5, x'05')) != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (sentences('Hi there! Good morning.', 'en', 'US') != NULL)\nand (sha('Spark') != NULL)\nand (sha1('Spark') != NULL)\nand (sha2('Spark', 256) != NULL)\nand (soundex('Miller') != NULL)\nand (concat('1', space(2), '1') != NULL)\nand (('->' || split_part('Hello,world,!', ',', 1) || '<-') != NULL)\nand (('->' || split_part('', ',', 1) || '<-') != NULL)\nand (('->' || split_part('Hello,World,!', ',', 0) || '<-') != NULL)\nand (startswith('SparkSQL', 'Spark'))\nand (startswith(NULL, 'Spark'))\nand (substr('Spark SQL', 5, 1) != NULL)\nand (substring_index('www.apache.org', '.', 2) != NULL)\nand (CAST(to_binary('537061726B') AS STRING) != NULL)\nand (CAST(to_binary('537061726B', 'hex') AS STRING) != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (translate('AaBbCc', 'abc', '123') != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (ucase('SparkSql') != NULL)\nand (CAST(unbase64('U3BhcmsgU1FM') AS STRING) != NULL)\nand (decode(unhex('537061726B2053514C'), 'UTF-8') != NULL)\nand (upper('SparkSql') != NULL)\nand (10 / 2 == 5)\nand ((3 | 5) == 2)\nand ((DATE'2021-03-20' - INTERVAL '2' MONTH) != NULL)\nand (10 - 2 + 2 == 4)\nand (2 % 1.8 == 2)\nand (3 ^ 5 == 3)\nand (3 & 5 == 2)\nand (3 * 2 == 2)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (abs(-1) == 1)\nand (acos(1) == 1)\nand (acosh(1) == 1)\nand (asin(0) == 1)\nand (asinh(0) == 1)\nand (atan(0) == 1)\nand (atan2(0, 0) == 1)\nand (atanh(0) == 1)\nand (BIGINT(current_timestamp) > 1)\nand (bit_count(-1) > 1)\nand (bit_get(23Y, 1) == 1)\nand (bround(13.5, -1) == 1)\nand (round(13.5, -1) == 1)\nand (cbrt(27.0) == 3)\nand (ceil(3345.1, -2) == 1)\nand (ceiling(5.4) == 6)\nand (ceiling(3345.1, -2) == 1)\nand (conv('100', 2, 10) == 4)\nand (conv('FFFFFFFFFFFFFFFF', 16, 10) == 1)\nand (cos(pi()) == -1)\nand (cosh(0) == 1)\nand (cot(1) == 1)\nand (csc(pi() / 2) == 2)\nand (decimal('5.2') == 5)\nand (degrees(3.141592653589793) == 10)\nand (double('5.2') == 4)\nand (e() == 2)\nand (exp(1) == 2)\nand (expm1(0) == 1)\nand (factorial(2) == 2)\nand (FLOAT('5.2') == 5)\nand (floor(-0.1) == -1)\nand (floor(3345.1, -2) == 20)\nand (getbit(23Y, 0) == 1)\nand (hypot(3, 4) == 5)\nand (INT(-5.6) == 5)\nand (isnan(CAST('NaN' AS double)))\nand (ln(1) == 1)\nand (log(10, 100) == 2)\nand (log1p(0) == 1)\nand (log2(2) == 1)\nand (log10(10) == 1)\nand (nanvl(CAST('NaN' AS DOUBLE), 123) == 2)\nand (negative(1) == -1)\nand (pmod(-10, 3) == 2)\nand (positive(-1) == -1)\nand (pow(2, 3) * power(2, 3) == 8)\nand (radians(180) == 10)\nand (rand(0) * random(0) == 1)\nand (randn(0) == 1)\nand (rint(12.3456) == 1)\nand (round(2.5, 0) == 3)\nand (sec(pi()) == -1)\nand (sin(0) == 0)\nand (shiftleft(2, 1) == 2)\nand (shiftright(4, 1) == 2)\nand (shiftrightunsigned(4, 1) == 2)\nand (sign(40) == 1)\nand (signum(40) == 1)\nand (sinh(0) == 1)\nand (smallint(-5.6) == 5)\nand (sqrt(4) == 2)\nand (tan(0) == 1)\nand (tanh(0) == 1)\nand (tinyint('12') * tinyint(5.4) == 1)\nand (try_add(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_add(1, 2) == 3)\nand (try_divide(3, 2) == 3)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand (try_subtract(1, 2) == 2)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_subtract(-128Y, 1Y) != NULL)\nand (width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2) == 3)\nand (width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) == 10)\nand (ARRAY(10, 20, 30) != NULL)\nand (\n      (\n        aggregate(\n          ARRAY(1, 2, 3), \n          0, \n          (acc, x) -> acc + x, \n          acc -> acc * 10)\n      ) == 1\n    )\nand (array_contains(ARRAY(1, 2, 3), 2))\nand (array_distinct(ARRAY(1, 2, 3, NULL, 3)) != NULL)\nand (array_except(ARRAY(1, 2, 2, 3), ARRAY(1, 1, 3, 5)) != NULL)\nand (array_intersect(ARRAY(1, 2, 3), ARRAY(1, 3, 3, 5)) != NULL)\nand (array_join(ARRAY('hello', 'world'), ',') != NULL)\nand (array_join(ARRAY('hello', NULL, 'world'), ',', '*') == NULL)\nand (array_max(ARRAY(1, 20, NULL, 3)) > 10)\nand (array_min(ARRAY(1, 20, NULL, 3)) == 1)\nand (array_position(ARRAY(3, 2, 1, 4, 1), 1) == 2)\nand (array_remove(ARRAY(1, 2, 3, NULL, 3, 2), 3) != NULL)\nand (array_repeat('123', 2) != NULL)\nand (array_size(ARRAY(1, NULL, 3, NULL)) == 2)\nand (array_sort(ARRAY('bc', 'ab', 'dc')) != NULL)\nand (array_union(ARRAY(1, 2, 2, 3), ARRAY(1, 3, 5)) != NULL)\nand (arrays_overlap(ARRAY(1, 2, NULL, 3), ARRAY(NULL, 4, 5)) == NULL)\nand (arrays_zip(ARRAY(1, 2), ARRAY('shoe', 'string', 'budget')) == NULL)\nand (cardinality(ARRAY('b', 'd', 'c', 'a')) == 2)\nand (concat(ARRAY(1, 2, 3), ARRAY(4, 5), ARRAY(6)) != NULL)\nand (element_at(MAP(1, 'a', 2, 'b'), 2) == NULL)\nand (\n      EXISTS(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 0)\n    )\nand (\n      EXISTS(\n        ARRAY(0, NULL, 2, 3, NULL), \n        x -> x IS NULL)\n    )\nand (\n      filter(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 1) != NULL\n    )\nand (flatten(ARRAY(ARRAY(1, 2), ARRAY(3, 4))) != NULL)\nand (\n      forall(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 0) == NULL\n    )\nand (reverse(ARRAY(2, 1, 4, 3)) != NULL)\nand (sequence(5, 1) != NULL)\nand (cardinality(ARRAY('b', 'd', 'c', 'a')) == 10)\nand (slice(ARRAY(1, 2, 3, 4), 2, 2) != NULL)\nand (sort_array(ARRAY('b', 'd', NULL, 'c', 'a'), true) != NULL)\nand (\n      transform(\n        ARRAY(1, 2, 3), \n        x -> x + 1) != NULL\n    )\nand (try_element_at(ARRAY(1, 2, 3), 2) == 2)\nand (\n      zip_with(\n        ARRAY('a', 'b', 'c'), \n        ARRAY('d', 'e', 'f'), \n        (x, y) -> concat(x, y)) != NULL\n    )\nand (MAP(1, 'Hello', 2, 'World')[1] != NULL)\nand (cardinality(MAP('a', 1, 'b', 2)) == 2)\nand (element_at(MAP(1, 'a', 2, 'b'), 3) == NULL)\nand (MAP(1.0, '2', 3.0, '4') IS NOT NULL)\nand (map_concat(MAP(1, 'a', 2, 'b'), MAP(3, 'c')) IS NOT NULL)\nand (map_contains_key(MAP(1, 'a', 2, 'b'), 2))\nand (map_entries(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_filter(\n        MAP(1, 0, 2, 2, 3, -1), \n        (k, v) -> k > v) IS NOT NULL\n    )\nand (map_from_arrays(ARRAY(1.0, 3.0), ARRAY('2', '4')) IS NOT NULL)\nand (map_from_entries(ARRAY(STRUCT(1, 'a'), STRUCT(2, 'b'))) IS NOT NULL)\nand (map_keys(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (map_values(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_zip_with(\n        MAP(1, 'a', 2, 'b'), \n        MAP(1, 'x', 2, 'y'), \n        (k, v1, v2) -> concat(v1, v2)) IS NOT NULL\n    )\nand (cardinality(MAP('a', 1, 'b', 2)) == 2)\nand (str_to_map('a:1,b:2,c:3', ',', ':') IS NOT NULL)\nand (\n      transform_keys(\n        map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n        (k, v) -> k + 1) IS NOT NULL\n    )\nand (\n      transform_values(\n        map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n        (k, v) -> k + v) IS NOT NULL\n    )\nand (try_element_at(MAP(1, 'a', 2, 'b'), 2) IS NOT NULL)\nand ((INTERVAL '3:15' HOUR TO MINUTE / 3) IS NOT NULL)\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand (typeof(current_timestamp - (current_date + INTERVAL '1' DAY)) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (add_months('2016-08-31', -6) != NULL)\nand (current_date() != NULL)\nand (current_timestamp() != NULL)\nand (current_timezone() != NULL)\nand (DATE('2021-03-21') != NULL)\nand (date_add('2016-07-30', 1) != NULL)\nand (date_format('2016-04-08', 'y') == 2016)\nand (date_from_unix_date(1) != NULL)\nand (date_sub('2016-07-30', 1) != NULL)\nand (date_trunc('YEAR', '2015-03-05T09:32:05.359') != NULL)\nand (datediff('2009-07-31', '2009-07-30') == 1)\nand (day('2009-07-30') == 30)\nand (dayofmonth('2009-07-30') == 30)\nand (dayofweek('2009-07-30') == 5)\nand (dayofyear('2016-04-09') == 100)\nand (EXTRACT(SECONDS FROM INTERVAL '5:00:30.001' HOUR TO SECOND) == 30)\nand (EXTRACT(WEEK FROM TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') != NULL)\nand (from_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (from_utc_timestamp('2016-08-31', 'Asia/Seoul') != NULL)\nand (hour('2009-07-30 12:58:59') == 10)\nand (last_day('2009-01-12') IS NOT NULL)\nand (make_date(2013, 7, 15) IS NOT NULL)\nand (make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)\nand (make_ym_interval(100, 5) IS NOT NULL)\nand (minute('2009-07-30 12:58:59') == 58)\nand (month('2016-07-30') == 7)\nand (months_between('1997-02-28 10:30:00', '1996-10-30') == 3)\nand (months_between('1997-02-28 10:30:00', '1996-10-30', false) == 2)\nand (next_day('2015-01-14', 'TU') != NULL)\nand (now() != NULL)\nand (quarter('2016-08-31') == 3)\nand (second('2009-07-30 12:58:59') == 59)\nand (TIMESTAMP(123) != NULL)\nand (TIMESTAMP('2020-04-30 12:25:13.45') != NULL)\nand (timestamp_micros(1230219000123123) != NULL)\nand (timestamp_millis(1230219000123) != NULL)\nand (timestamp_seconds(1230219000) != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (trunc('2015-10-27', 'YEAR') != NULL)\nand (trunc('2019-08-04', 'quarter') != NULL)\nand (try_add(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_add(DATE'2021-03-31', INTERVAL '1' MONTH) != NULL)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (try_subtract(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (unix_date(DATE('1970-01-02')) == 1)\nand (unix_micros(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_millis(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 1)\nand (weekday(DATE'2009-07-30') == 1)\nand (EXTRACT(DAYOFWEEK_ISO FROM DATE'2009-07-30') == 4)\nand (weekofyear('2008-02-20') == 8)\nand (year('2016-07-30') == 2016)\nand (ARRAY(1, 2, 3) != NULL)\nand (BIGINT('5') == 5)\nand (binary('Spark SQL') != NULL)\nand (BOOLEAN(1))\nand (CAST(5.6 AS DECIMAL (2, 0)) != NULL)\nand (CAST(INTERVAL '1-2' YEAR TO MONTH AS INTEGER) == 12)\nand (DATE('2021-03-21') != NULL)\nand (decimal('5.2') == 5)\nand (double('5.2') / 2 == 5)\nand (FLOAT('5.2') / 2 == 2)\nand (INT('5') == 5)\nand (make_date(2013, 7, 15) != NULL)\nand (make_dt_interval(100, 13) != NULL)\nand (make_ym_interval(100, 5) == NULL)\nand (MAP(1.0, '2', 3.0, '4') IS NOT NULL)\nand (named_struct('a', 1, 'b', 2, 'c', 3) IS NOT NULL)\nand (smallint('5') == 5)\nand (STRUCT(1, 2, 3) IS NOT NULL)\nand (tinyint('12') == 12)\nand (TIMESTAMP('2020-04-30 12:25:13.45') != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31 00:12:00') != NULL)\nand (from_csv('1, 0.8', 'a INT, b DOUBLE') != NULL)\nand (schema_of_csv('1,abc') != NULL)\nand (json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') == 5)\nand (json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') != NULL)\nand (schema_of_json('[{\"col\":01}]', MAP('allowNumericLeadingZeros', 'true')) != NULL)\nand (to_json(named_struct('a', 1, 'b', 2)) != NULL)\nand (to_json(MAP(named_struct('a', 1), named_struct('b', 2))) != NULL)\nand (to_json(ARRAY((MAP('a', 1)))) != NULL)\nand (xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()') != NULL)\nand (xpath_boolean('<a><b>1</b></a>', 'a/b'))\nand (xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 3)\nand (xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c') != NULL)\nand (\n      assert_true(\n        0 < 1) == NULL\n    )\nand (\n      (\n        CASE\n          WHEN 1 > 0\n            THEN 1\n          WHEN 2 > 0\n            THEN 2.0\n          ELSE 1.2\n        END\n      ) == 1\n    )\nand (\n      (\n        CASE 3\n          WHEN 1\n            THEN 'A'\n          WHEN 2\n            THEN 'B'\n          WHEN 3\n            THEN 'C'\n        END\n      ) != NULL\n    )\nand (coalesce(2, 5 / 0) == 2)\nand (current_catalog() != NULL)\nand (current_database() != NULL)\nand (current_user() != NULL)\nand (decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks') != NULL)\nand (elt(1, 'scala', 'java') != NULL)\nand (greatest(10, 9, 2, 4, 3) == 10)\nand (hash('Spark', ARRAY(123), 2) != NULL)\nand (\n      if(\n        1 < 2, \n        'a', \n        'b') != NULL\n    )\nand (ifnull(NULL, ARRAY('2')) != NULL)\nand (isnull(1))\nand (isnotnull(1))\nand (least(10, 9, 2, 4, 3) == 2)\nand (monotonically_increasing_id() > 10)\nand (nullif(2, 2) == NULL)\nand (nvl(NULL, 2) == 2)\nand (nvl2(NULL, 2, 1) == 1)\nand (typeof(1) != NULL)\nand (uuid() != NULL)\nand (xxhash64('Spark', ARRAY(123), 2) != NULL)\nand ('20'::INTEGER == 20)\nand like('Spark', '_park')\nand ('Spark' LIKE SOME('_park', '_ock'))\nand (bitmap_count(x'00') == 10)\nand (charindex('bar', 'abcbarbar') == 1)\nand (decode(x'FEFF0053007000610072006B002000530051004C', 'UTF-16') != NULL)\nand (like('Spark', '_park'))\nand (len('Spark SQL ') > 10)\nand (levenshtein('kitten', 'sitting', 4) > 10)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', 'Z', 'z', '9', 'X') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', lowerChar => 'z', upperChar => 'X') != NULL)\nand (mask('AaBb123-&ASDXYZ921312asd', NULL, NULL, NULL, NULL) != NULL)\nand (overlay('Spark SQL' PLACING '_' FROM 6) != NULL)\nand (overlay('Spark SQL' PLACING 'tructured' FROM 2 FOR 4) != NULL)\nand (overlay(encode('Spark SQL', 'utf-8') PLACING encode('_', 'utf-8') FROM 6) != NULL)\nand (position('bar' IN 'abcbarbar') > 2)\nand (regexp_count('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en') > 2)\nand (regexp_instr('Mary had a little lamb', NULL) != NULL)\nand (regexp_substr(NULL, 'Ste(v|ph)en') != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (STRING(4) != NULL)\nand (substr('Spark SQL', -3) != NULL)\nand (substr('Spark SQL' FROM 5 FOR 1) != NULL)\nand (substr('Spark SQL' FROM -3) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_char(DATE'2016-04-08', 'y') != NULL)\nand (to_char(encode('abc', 'utf-8'), 'utf-8') != NULL)\nand (to_varchar(454, '999') != NULL)\nand (to_varchar(DATE'2016-04-08', 'y') != NULL)\nand (to_varchar(x'537061726b2053514c', 'hex') != NULL)\nand (TRIM( 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(BOTH 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(LEADING 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(TRAILING 'SL' FROM 'SSparkSQLS') != NULL)\nand (\n      CAST(try_aes_decrypt(\n        unbase64('MTIzNDU2Nzg5MDEyMdXvR41sJqwZ6hnTU8FRTTtXbL8yeChIZA=='), \n        '1234567890abcdef', \n        'GCM', \n        'DEFAULT', \n        'Some AAD') AS STRING) != NULL\n    )\nand (url_decode('http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1') != NULL)\nand (url_encode('http://spark.apache.org/path?query=1') != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' + INTERVAL '3' SECOND) != NULL)\nand (bit_reverse(-1) == -1)\nand (bitmap_bit_position(-32768) == 1)\nand (bitmap_bucket_number(-32768) == 1)\nand (MOD(2, 1.8) == 2)\nand (array_append(ARRAY(1, 2, 3), 0) == NULL)\nand (array_compact(ARRAY(1, 2, NULL, 3, NULL, 3)) == NULL)\nand (array_insert(ARRAY('a', 'b', 'c'), 1, 'z') != NULL)\nand (array_prepend(ARRAY(1, 2, 3), 0) != NULL)\nand (get(ARRAY(1, 2, 3), 2) != NULL)\nand (\n      reduce(\n        ARRAY(1, 2, 3), \n        0, \n        (acc, x) -> acc + x) == 2\n    )\nand (shuffle(ARRAY(1, 20, 3, 5)) != NULL)\nand (map_contains_key(MAP(1, 'a', 2, 'b'), 2))\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand (date_diff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (date_part('SECONDS', TIMESTAMP'2019-10-01 00:00:01.000001') == 1)\nand (date_part('Week', TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (dateadd('2016-07-30', 1) != NULL)\nand (dateadd(MICROSECOND, 5, TIMESTAMP'2022-02-28 00:00:00') != NULL)\nand (datediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 11:59:59') == 0)\nand (make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887, 'CET') IS NOT NULL)\nand (make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)\nand (now() != NULL)\nand (timediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (timestampdiff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (to_unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 100)\nand (try_to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand ('20'::INTEGER == 20)\nand (make_interval(100, 11) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)\nand (STRING(5) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_varchar(454, '999') IS NOT NULL)\nand (from_json('{\"a\":1, \"b\":0.8}', 'a INT, b DOUBLE') IS NOT NULL)\nand (get_json_object('{\"a\":\"b\"}', '$.a') IS NOT NULL)\nand (to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), MAP('timestampFormat', 'dd/MM/yyyy')) IS NOT NULL)\nand (to_csv(named_struct('a', 1, 'b', 2)) IS NOT NULL)\nand (from_xml('<p><time>26/08/2015</time></p>', 'time Timestamp', MAP('timestampFormat', 'dd/MM/yyyy')) != NULL)\nand (schema_of_xml('<p><a attr=\"2\">1</a><a>3</a></p>', MAP('excludeAttribute', 'true')) IS NOT NULL)\nand (current_metastore() != NULL)\nand (current_schema() != NULL)\nand (current_version() != NULL)\nand (equal_null(2, 2))\nand (\n      iff(\n        1 < 2, \n        'a', \n        'b') == 'a'\n    )\nand (is_account_group_member('admins'))\nand (is_member('admins'))\nand (luhn_check('12345') == NULL)\nand (user() != NULL)\nand (h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0) != NULL)\nand (h3_coverash3string('{\"type\":\"LineString\",\"coordinates\":[[-122.4194,37.7749],[-118.2437,34.0522],[-74.0060,40.7128]]}', 1) != NULL)\nand (h3_longlatash3(-122.4783, 37.8199, 13) > 0)\nand (h3_longlatash3string(-122.4783, 37.8199, 13) != NULL)\nand (h3_pointash3('POINT(-122.4783 37.8199)', 13) > 0)\nand (h3_pointash3string('{\"type\":\"Point\",\"coordinates\":[]}', 15) == NULL)\nand (h3_pointash3string('POINT(-122.4783 37.8199)', 13) != NULL)\nand (\n      h3_polyfillash3(\n        unhex(\n          '0103000000010000000400000050fc1873d79a5ec0d0d556ec2fe342404182e2c7988f5dc0f46c567dae064140aaf1d24d628052c05e4bc8073d5b444050fc1873d79a5ec0d0d556ec2fe34240'), \n        2) != NULL\n    )\nand (h3_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3('Not-a-valid-rep', 2) == NULL)\nand (h3_try_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_boundaryasgeojson('8009fffffffffff') != NULL)\nand (h3_boundaryasgeojson(599686042433355775) != NULL)\nand (hex(h3_boundaryaswkb(599686042433355775)) != NULL)\nand (h3_boundaryaswkt(599686042433355775) != NULL)\nand (h3_centerasgeojson(599686042433355775) != NULL)\nand (hex(h3_centeraswkb('8009fffffffffff')) == NULL)\nand (h3_centeraswkt('8009fffffffffff') != NULL)\nand (h3_h3tostring(599686042433355775) != NULL)\nand (h3_stringtoh3('85283473fffffff') == NULL)\nand (h3_ischildof('88283471b9fffff', '85283473fffffff'))\nand (h3_ispentagon(590112357393367039))\nand (h3_isvalid('85283473fffffff'))\nand (h3_try_validate(590112357393367039) != NULL)\nand (h3_validate(590112357393367039) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_hexring(599686042433355775, 1) != NULL)\nand (h3_kring(599686042433355775, 1) != NULL)\nand (h3_kringdistances(599686042433355775, 1) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_maxchild(599686042433355775, 10) != NULL)\nand (h3_minchild(599686042433355775, 10) != NULL)\nand (h3_resolution(599686042433355775) == 5)\nand (h3_tochildren(599686042433355775, 6) != NULL)\nand (h3_toparent(599686042433355775, 0) != NULL)\nand (\n      h3_compact(\n        ARRAY(\n          599686042433355775, \n          599686030622195711, \n          599686044580839423, \n          599686038138388479, \n          599686043507097599, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686040285872127, \n          599686041359613951, \n          599686039212130303, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647)) != NULL\n    )\nand (\n      h3_uncompact(\n        ARRAY(\n          599686030622195711, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647, \n          595182446027210751), \n        5) != NULL\n    )"
          },
          "alias" : "c_expressions"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "hNVTcaFF",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "V8wzgb9G",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 5
    },
    "raw_customers##pI21Ldam" : {
      "id" : "raw_customers##pI21Ldam",
      "component" : "Seed",
      "metadata" : {
        "label" : "raw_customers",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "table" : {
          "name" : "raw_customers",
          "sourceType" : "Seed"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "lrYIIaYP",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 46
    },
    "SetOperation_1##iqYolvv4" : {
      "id" : "SetOperation_1##iqYolvv4",
      "component" : "SetOperation",
      "metadata" : {
        "label" : "SetOperation_1",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "operationType" : "intersect",
        "preserveDuplicates" : false,
        "useMinus" : false,
        "inputAliases" : [ "in0", "in1" ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "usqRml7D",
          "slug" : "in0"
        }, {
          "id" : "hHgPeQ9R",
          "slug" : "in1"
        } ],
        "outputs" : [ {
          "id" : "yg0f6rPN",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 41
    },
    "AllStunningOne##YqzI9HJz" : {
      "id" : "AllStunningOne##YqzI9HJz",
      "component" : "Reformat",
      "metadata" : {
        "label" : "AllStunningOne",
        "phase" : 0,
        "macroDependencies" : [ "SQL_DatabricksSharedBasic.qa_concat_function_main", "SQL_DatabricksParentProjectMain.qa_boolean_macro", "SQL_BaseGitDepProjectAllFinal.qa_concat_macro_base_column" ],
        "comment" : "Generates a comprehensive dataset combining various data transformations and calculations for analysis.",
        "isLabelGrayed" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "expressions" : [ {
          "expression" : {
            "expression" : "concat(\n  c_array[0], \n  c_struct.city, \n  aes_decrypt(unhex('83F16B2AA704794132802D248E6BFD4E380078182D1544813898AC97E709B28A94'), '0000111122223333'), \n  base64(aes_encrypt('Spark SQL', '1234567890abcdef', 'ECB', 'PKCS')), \n  bin(13), \n  btrim('    SparkSQL   '), \n  char(65), \n  chr(65), \n  concat('Spark', 'SQL'), \n  concat_ws(' ', 'Spark', 'SQL'), \n  crc32('Spark'), \n  current_catalog(), \n  current_database(), \n  current_date(), \n  current_timestamp(), \n  current_timezone(), \n  current_user(), \n  date_add('2016-07-30', 1), \n  date_sub('2016-07-30', 1), \n  date_format('2016-04-08', 'y'), \n  date_from_unix_date(1), \n  date_part('YEAR', TIMESTAMP'2019-08-12 01:00:00.123456'), \n  date_part('MONTH', INTERVAL '2021-11' YEAR TO MONTH), \n  date_part('MINUTE', INTERVAL '123 23:55:59.002001' DAY TO SECOND), \n  date_trunc('HOUR', '2015-03-05T09:32:05.359'), \n  date_trunc('DD', '2015-03-05T09:32:05.359'), \n  datediff('2009-07-31', '2009-07-30'), \n  decode(encode('abc', 'utf-8'), 'utf-8'), \n  e(), \n  elt(1, 'scala', 'java'), \n  format_number(12332.123456, '##################.###'), \n  format_string('Hello World %d %s', 100, 'days'), \n  CAST(from_csv('1, 0.8', 'a INT, b DOUBLE') AS STRING), \n  CAST(from_json(\n    '{\"teacher\": \"Alice\", \"student\": [{\"name\": \"Bob\", \"rank\": 1}, {\"name\": \"Charlie\", \"rank\": 2}]}', \n    'STRUCT<teacher: STRING, student: ARRAY<STRUCT<name: STRING, rank: INT>>>') AS STRING), \n  CAST(from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') AS STRING), \n  CAST(from_utc_timestamp('2016-08-31', 'Asia/Seoul') AS STRING), \n  CAST(get_json_object('{\"a\":\"b\"}', '$.a') AS STRING), \n  hash('Spark', ARRAY(123), 2), \n  hex(17), \n  CAST(hour('2009-07-30 12:58:59') AS STRING), \n  CAST(hypot(3, 4) AS STRING), \n  CAST(ilike('Spark', '_Park') AS STRING), \n  CAST(initcap('sPark sql') AS STRING), \n  CAST(last_day('2009-01-12') AS STRING), \n  CAST(lcase('SparkSql') AS STRING), \n  CAST(if(\n    1 < 2, \n    'a', \n    'b') AS STRING), \n  CAST(ifnull(NULL, ARRAY('2')) AS STRING), \n  LEFT('Spark SQL', 3), \n  lower('SparkSql'), \n  lpad('hi', 5, '??'), \n  ltrim('    SparkSQL   '), \n  CAST(make_date(2013, 7, 15) AS STRING), \n  CAST(make_dt_interval(1, 12, 30, 1.001001) AS STRING), \n  CAST(make_interval(100, 11, 1, 1, 12, 30, 1.001001) AS STRING), \n  CAST(make_timestamp(2019, 6, 30, 23, 59, 60) AS STRING), \n  CAST(make_ym_interval(1, 2) AS STRING), \n  md5('Spark'), \n  next_day('2015-01-14', 'TU'), \n  now(), \n  nullif(2, 2), \n  nvl(NULL, 'hello'), \n  CAST(overlay('Spark SQL' PLACING '_' FROM 6) AS STRING), \n  CAST(parse_url('http://spark.apache.org/path?query=1', 'HOST') AS STRING), \n  printf('Hello World %d %s', 100, 'days'), \n  CAST(regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) AS STRING), \n  CAST(regexp_replace('100-200', '(\\\\d+)', 'num') AS STRING), \n  repeat('123', 2), \n  replace('ABCabc', 'abc', 'DEF'), \n  reverse('Spark SQL'), \n  RIGHT('Spark SQL', 3), \n  rpad('hi', 5, '??'), \n  rtrim('    SparkSQL   '), \n  CAST(schema_of_json('[{\"col\":0}]') AS STRING), \n  sha('Spark'), \n  sha1('Spark'), \n  sha2('Spark', 256), \n  concat(space(2), '1'), \n  split_part('11.12.13', '.', 3), \n  substr('Spark SQL', 5), \n  substring('Spark SQL', 5), \n  substring_index('www.apache.org', '.', 2), \n  timestamp_micros(1230219000123123), \n  timestamp_millis(1230219000123), \n  timestamp_seconds(1.230219000123E9), \n  to_csv(named_struct('a', 1, 'b', 2)), \n  to_date('2009-07-30 04:17:52'), \n  to_timestamp('2016-12-31 00:12:00'), \n  to_unix_timestamp('2016-04-08', 'yyyy-MM-dd'), \n  to_utc_timestamp('2016-08-31', 'Asia/Seoul'), \n  translate('AaBbCc', 'abc', '123'), \n  trunc('2019-08-04', 'week'), \n  try_to_binary('abc', 'utf-8'), \n  try_to_number('454', '999'), \n  typeof(1), \n  ucase('SparkSql'), \n  unbase64('U3BhcmsgU1FM'), \n  decode(unhex('537061726B2053514C'), 'UTF-8'), \n  unix_date(DATE(\"1970-01-02\")), \n  unix_micros(TIMESTAMP('1970-01-01 00:00:01Z')), \n  unix_millis(TIMESTAMP('1970-01-01 00:00:01Z')), \n  unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z')), \n  unix_timestamp('2016-04-08', 'yyyy-MM-dd'), \n  upper('SparkSql'), \n  uuid(), \n  xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c'), \n  xxhash64('Spark', ARRAY(123), 2), \n  YEAR ('2016-07-30'), \n  to_json(ARRAY(named_struct('a', 1, 'b', 2))))"
          },
          "alias" : "c_concat_expr"
        }, {
          "expression" : {
            "expression" : "(1 != 2)\nor (true != NULL)\nor (NULL != NULL)\nor (1 < 2)\nor (2 <= 2)\nor (2 <=> 2)\nor ((2 % 1.8) == 1)\nor (to_date('2009-07-30 04:17:52') < to_date('2009-07-30 04:17:52'))\nor (add_months('2016-08-31', 1) < add_months('2017-08-31', 3))\nor (true and false)\nor array_contains(array_distinct(ARRAY(1, 2, 3)), 2)\nor array_contains(array_except(ARRAY(1, 2, 3), ARRAY(1, 3, 5)), 2)\nor array_contains(array_intersect(ARRAY(1, 2, 3), ARRAY(1, 3, 5)), 10)\nor (array_join(ARRAY('hello', NULL, 'world'), ' ', ',') LIKE '%hello%')\nor (array_max(ARRAY(1, 20, NULL, 3)) > 10)\nor (array_min(ARRAY(1, 20, NULL, 3)) > 20)\nor array_contains(array_remove(ARRAY(1, 2, 3, NULL, 3), 3), 3)\nor array_contains(array_repeat(5, 2), 6)\nor array_contains(array_union(ARRAY(1, 2, 3), ARRAY(1, 3, 5)), 10)\nor arrays_overlap(ARRAY(1, 2, 3), ARRAY(3, 4, 5))\nor (10 BETWEEN 2 AND 20)\nor contains('Spark SQL', 'Spark')\nor endswith('Spark SQL', 'SQL')\nor (\n     EXISTS(\n       ARRAY(1, 2, 3), \n       x -> x % 2 == 0)\n   )\nor array_contains(filter(\n     ARRAY(1, 2, 3), \n     x -> x % 2 == 1), 5)\nor array_contains(flatten(ARRAY(ARRAY(1, 2), ARRAY(3, 4))), 10)\nor forall(\n     ARRAY(1, 2, 3), \n     x -> x % 2 == 0)\nor ilike('Spark', '_Park')\nor (1 IN (2, 3, 4))\nor (isnan(CAST('NaN' AS double)))\nor isnotnull(1)\nor isnull(1)\nor array_contains(json_object_keys('{\"key\": \"value\"}'), 'key1')\nor like('Spark', '_park')\nor map_contains_key(MAP(1, 'a', 2, 'b'), 1)\nor map_contains_key(map_concat(MAP(1, 'a', 2, 'b'), MAP(3, 'c')), 4)\nor map_contains_key(map_filter(\n     MAP(1, 0, 2, 2, 3, -1), \n     (k, v) -> k > v), 3)\nor map_contains_key(map_from_arrays(ARRAY(1.0, 3.0), ARRAY('2', '4')), 2)\nor map_contains_key(map_from_entries(ARRAY(STRUCT(1, 'a'), STRUCT(2, 'b'))), 1)\nor array_contains(map_keys(MAP(1, 'a', 2, 'b')), 2)\nor array_contains(map_values(MAP(1, 'a', 2, 'b')), 'a')\nor map_contains_key(map_zip_with(\n     MAP(1, 'a', 2, 'b'), \n     MAP(1, 'x', 2, 'y'), \n     (k, v1, v2) -> concat(v1, v2)), 1)\nor (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\nor (NOT true)\nor array_contains(regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1), '100')\nor array_contains(sequence(1, 5), 4)\nor array_contains(shuffle(ARRAY(1, 20, 3, 5)), 10)\nor array_contains(slice(ARRAY(1, 2, 3, 4), 2, 2), 4)\nor array_contains(sort_array(ARRAY('b', 'd', NULL, 'c', 'a'), true), 'b')\nor array_contains(split('oneAtwoBthreeC', '[ABC]'), 'one')\nor startswith('Spark SQL', 'Spark')\nor map_contains_key(str_to_map('a:1,b:2,c:3', ',', ':'), 'a')\nor array_contains(transform(\n     ARRAY(1, 2, 3), \n     x -> x + 1), 1)\nor map_contains_key(transform_keys(\n     map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n     (k, v) -> k + 1), 1)\nor map_contains_key(transform_values(\n     map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n     (k, v) -> v + 1), 2)\nor array_contains(xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()'), 'a')\nor xpath_boolean('<a><b>1</b></a>', 'a/b')\nor array_contains(zip_with(\n     ARRAY(1, 2), \n     ARRAY(3, 4), \n     (x, y) -> x + y), 1)"
          },
          "alias" : "c_bool_expr"
        }, {
          "expression" : {
            "expression" : "(2 % 1.8)\n+ '20'::INTEGER\n+ (MOD(2, 1.8))\n+ (3 & 5)\n+ (2 * 3)\n+ (5 + 10)\n- (100 + 45)\n+ (3 / 2)\n+ (3 ^ 5)\n+ abs(-1)\n+ acos(1)\n+ acosh(1)\n+ array_position(ARRAY(3, 2, 1), 1)\n+ array_size(ARRAY('b', 'd', 'c', 'a'))\n+ ascii(2)\n+ asin(0)\n+ asinh(0)\n+ atan(0)\n+ atan2(0, 0)\n+ atanh(0)\n+ bit_count(0)\n+ bit_get(11, 0)\n+ bit_length('Spark SQL')\n+ bround(25, -1)\n+ cardinality(ARRAY('b', 'd', 'c', 'a'))\n+ cardinality(MAP('a', 1, 'b', 2))\n+ CAST('10' AS INT)\n+ cbrt(27.0)\n+ ceil(3.1411, 3)\n+ ceiling(3.1411, 3)\n+ char_length('Spark SQL ')\n+ coalesce(NULL, 1, NULL)\n+ conv('100', 2, 10)\n+ cos(0)\n+ cosh(0)\n+ cot(1)\n+ csc(1)\n+ day('2009-07-30')\n+ dayofmonth('2009-07-30')\n+ dayofweek('2009-07-30')\n+ dayofyear('2016-04-09')\n+ degrees(3.141592653589793)\n+ element_at(ARRAY(1, 2, 3), 2)\n+ exp(0)\n+ expm1(0)\n+ EXTRACT(SECONDS FROM TIMESTAMP'2019-10-01 00:00:01.000001')\n+ EXTRACT(MINUTE FROM INTERVAL '123 23:55:59.002001' DAY TO SECOND)\n+ factorial(2)\n+ find_in_set('ab', 'abc,b,ab,c,def')\n+ floor(-0.1)\n+ getbit(11, 0)\n+ greatest(10, 9, 2, 4, 3)\n+ instr('SparkSQL', 'SQL')\n+ json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]')\n+ least(10, 9, 2, 4, 3)\n+ length('Spark SQL ')\n+ levenshtein('kitten', 'sitting')\n+ ln(10)\n+ locate('bar', 'foobarbar')\n+ log(10, 100)\n+ log10(10)\n+ log1p(0)\n+ log2(2)\n+ minute('2009-07-30 12:58:59')\n+ (2 % 1.8)\n+ month('2016-07-30')\n+ months_between('1997-02-28 10:30:00', '1996-10-30', false)\n+ nanvl(CAST('NaN' AS double), 123)\n+ negative(100)\n+ nvl2(NULL, 2, 1)\n+ octet_length('Spark SQL')\n+ pi()\n+ pmod(10, 3)\n+ position('bar', 'foobarbar')\n+ positive(1)\n+ pow(2, 3)\n+ power(2, 3)\n+ quarter('2016-08-31')\n+ radians(180)\n+ rand()\n+ randn()\n+ random()\n+ rint(12.3456)\n+ round(2.5, 0)\n+ sec(0)\n+ second('2009-07-30 12:58:59')\n+ shiftleft(2, 1)\n+ shiftright(4, 1)\n+ shiftrightunsigned(4, 1)\n+ sign(40)\n+ signum(40)\n+ sin(0)\n+ sinh(0)\n+ size(ARRAY('b', 'd', 'c', 'a'))\n+ sqrt(4)\n+ tan(0)\n+ tanh(0)\n+ to_number('454.00', '000.00')\n+ try_add(1, 2)\n+ try_divide(2L, 2L)\n+ try_element_at(ARRAY(1, 2, 3), 2)\n+ try_multiply(2, 3)\n+ try_subtract(2, 1)\n+ weekday('2009-07-30')\n+ weekofyear('2008-02-20')\n+ (\n    CASE\n      WHEN 1 > 0\n        THEN 1\n      WHEN 2 > 0\n        THEN 2.0\n      ELSE 1.2\n    END\n  )\n+ width_bucket(5.3, 0.2, 10.6, 5)\n+ xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)')\n+ xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)')\n+ xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)')\n+ xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)')\n+ xpath_short('<a><b>1</b><b>2</b></a>', 'sum(a/b)')\n+ (~ 0)"
          },
          "alias" : "`c_add_expr`"
        }, {
          "expression" : {
            "expression" : "c_smallint"
          },
          "alias" : "`c_smallint`"
        }, {
          "expression" : {
            "expression" : "c_tinyint"
          },
          "alias" : "c_tinyint"
        }, {
          "expression" : {
            "expression" : "c_int"
          },
          "alias" : "c_int"
        }, {
          "expression" : {
            "expression" : "c_bigint"
          },
          "alias" : "c_bigint"
        }, {
          "expression" : {
            "expression" : "c_float"
          },
          "alias" : "c_float"
        }, {
          "expression" : {
            "expression" : "c_double"
          },
          "alias" : "c_double"
        }, {
          "expression" : {
            "expression" : "c_string"
          },
          "alias" : "c_string"
        }, {
          "expression" : {
            "expression" : "c_boolean"
          },
          "alias" : "c_boolean"
        }, {
          "expression" : {
            "expression" : "c_array"
          },
          "alias" : "c_array"
        }, {
          "expression" : {
            "expression" : "c_struct"
          },
          "alias" : "c_struct"
        }, {
          "expression" : {
            "expression" : "{{ SQL_DatabricksSharedBasic.qa_concat_function_main('c_string', 'c_boolean') }}"
          },
          "alias" : "c_macro"
        }, {
          "rowType" : "ifGroup",
          "children" : [ {
            "rowType" : "if",
            "condition" : {
              "expression" : "v_int > 20"
            },
            "children" : [ {
              "expression" : {
                "expression" : "concat(c_string, c_float)"
              },
              "alias" : "c_if"
            } ]
          }, {
            "rowType" : "elseIf",
            "condition" : {
              "expression" : " var('v_project_dict') ['b'] == 'hello'"
            },
            "children" : [ {
              "expression" : {
                "expression" : "concat(c_string, c_int)"
              },
              "alias" : "c_if"
            } ]
          }, {
            "rowType" : "else",
            "children" : [ {
              "expression" : {
                "expression" : "concat(c_string, c_bigint)"
              },
              "alias" : "c_if"
            } ]
          } ]
        }, {
          "rowType" : "for",
          "variable" : {
            "expression" : "c_i"
          },
          "iterable" : {
            "expression" : "range(0, 5)"
          },
          "children" : [ {
            "expression" : {
              "expression" : "concat(c_string, {{c_i}})"
            },
            "alias" : "cfor_col_{{c_i}}"
          } ]
        }, {
          "expression" : {
            "expression" : "{{ SQL_DatabricksParentProjectMain.qa_boolean_macro('c_string') }}"
          },
          "alias" : "c_databricks_project_main"
        }, {
          "expression" : {
            "expression" : "{{ SQL_BaseGitDepProjectAllFinal.qa_concat_macro_base_column('c_string') }}"
          },
          "alias" : "c_base_project"
        }, {
          "expression" : {
            "expression" : "concat('{{ dbt_utils.pretty_time() }}', '{{ dbt_utils.pretty_log_format(\"my pretty message\") }}')"
          },
          "alias" : "c_dbt_utils_functions"
        }, {
          "expression" : {
            "expression" : "{{v_expression}}"
          },
          "alias" : "c_use_config_expression"
        }, {
          "expression" : {
            "expression" : "area(c_int, c_int)"
          },
          "alias" : "c_use_databricks_function"
        }, {
          "expression" : {
            "expression" : "to_json(named_struct('a', 1, 'b', 2))"
          },
          "alias" : "c_to_json"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "LZr3ZfIe",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "p1WQgSYw",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 21
    },
    "Limit_1_1##oipKrHWC" : {
      "id" : "Limit_1_1##oipKrHWC",
      "component" : "Limit",
      "metadata" : {
        "label" : "Limit_1_1",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "limit" : {
          "expression" : "100"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "bSGotuks",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "QdSp5f15",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 24
    },
    "SQLStatement_1_2##KqYhoGIO" : {
      "id" : "SQLStatement_1_2##KqYhoGIO",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_1_2",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT cast(ANY (col1) FILTER (  \n         WHERE col2 = 1\n       ) AS string) AS c1\n\nFROM VALUES\n      (false, 1),\n      (false, 2),\n      (true, 2),\n      (NULL, 1) AS tab(col1, col2)\n\nUNION\n\nSELECT cast(ANY (col) AS string) AS c1\n\nFROM VALUES\n      (true),\n      (false),\n      (false) AS tab(col)\n\nUNION\n\nSELECT CAST(approx_count_distinct(col1) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2),\n      (2),\n      (3) AS tab(col1)\n\nUNION\n\nSELECT cast(approx_count_distinct(col1) FILTER (  \n         WHERE col2 = 10\n       ) AS string) AS c1\n\nFROM VALUES\n      (1, 10),\n      (1, 10),\n      (2, 10),\n      (2, 10),\n      (3, 10),\n      (1, 12) AS tab(col1, col2)\n\nUNION\n\nSELECT CAST(approx_percentile(col, ARRAY(0.5, 0.4, 0.1), 100) AS STRING) AS c1\n\nFROM VALUES\n      (0),\n      (1),\n      (2),\n      (10) AS tab(col)\n\nUNION\n\nSELECT CAST(approx_percentile(DISTINCT col, 0.5, 100) AS STRING) AS c1\n\nFROM VALUES\n      (0),\n      (6),\n      (6),\n      (7),\n      (9),\n      (10) AS tab(col)\n\nUNION\n\nSELECT CAST(array_agg(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (NULL),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(array_agg(DISTINCT col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (NULL),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(avg(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(try_avg(col) AS STRING) AS c1\n\nFROM VALUES\n      (10),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(bit_and(col) AS STRING) AS c1\n\nFROM VALUES\n      (3),\n      (5) AS tab(col)\n\nUNION\n\nSELECT cast(bit_and(col) FILTER (  \n         WHERE col < 6\n       ) AS string) AS c1\n\nFROM VALUES\n      (3),\n      (5),\n      (6) AS tab(col)\n\nUNION\n\nSELECT CAST(bit_or(col) AS STRING) AS c1\n\nFROM VALUES\n      (3),\n      (5) AS tab(col)\n\nUNION\n\nSELECT cast(bit_or(col) FILTER (  \n         WHERE col < 8\n       ) AS string) AS c1\n\nFROM VALUES\n      (3),\n      (5),\n      (8) AS tab(col)\n\nUNION\n\nSELECT CAST(bit_xor(col) AS STRING) AS c1\n\nFROM VALUES\n      (3),\n      (3),\n      (5) AS tab(col)\n\nUNION\n\nSELECT CAST(bool_and(col) AS STRING) AS c1\n\nFROM VALUES\n      (true),\n      (true),\n      (true) AS tab(col)\n\nUNION\n\nSELECT CAST(bool_or(col) AS STRING) AS c1\n\nFROM VALUES\n      (true),\n      (false),\n      (false) AS tab(col)\n\nUNION\n\nSELECT CAST(collect_list(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (NULL),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(collect_set(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (NULL),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(corr(c1, c2) AS STRING) AS c1\n\nFROM VALUES\n      (3, 2),\n      (3, 3),\n      (3, 3),\n      (6, 4) AS tab(c1, c2)\n\nUNION\n\nSELECT cast(corr(DISTINCT c1, c2) FILTER (  \n         WHERE c1 != c2\n       ) AS string) AS c1\n\nFROM VALUES\n      (3, 2),\n      (3, 3),\n      (3, 3),\n      (6, 4) AS tab(c1, c2)\n\nUNION\n\nSELECT CAST(count(*) AS STRING) AS c1\n\nFROM VALUES\n      (NULL),\n      (5),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(count(*) AS STRING) AS c1\n\nFROM VALUES\n      (NULL),\n      (5),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT cast(count(col) FILTER (  \n         WHERE col < 10\n       ) AS string) AS c1\n\nFROM VALUES\n      (NULL),\n      (5),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(count_if(\n         col % 2 = 0) AS STRING) AS c1\n\nFROM VALUES\n      (NULL),\n      (0),\n      (1),\n      (2),\n      (2),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(covar_pop(c1, c2) AS STRING) AS c1\n\nFROM VALUES\n      (1, 1),\n      (2, 2),\n      (2, 2),\n      (3, 3) AS tab(c1, c2)\n\nUNION\n\nSELECT CAST(covar_samp(c1, c2) AS STRING) AS c1\n\nFROM VALUES\n      (1, 1),\n      (2, 2),\n      (2, 2),\n      (3, 3) AS tab(c1, c2)\n\nUNION\n\nSELECT CAST(every(col) AS STRING) AS c1\n\nFROM VALUES\n      (true),\n      (true),\n      (true) AS tab(col)\n\nUNION\n\nSELECT CAST(first(col, true) AS STRING) AS c1\n\nFROM VALUES\n      (NULL),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(first_value(col) AS STRING) AS c1\n\nFROM VALUES\n      (10),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(kurtosis(col) AS STRING) AS c1\n\nFROM VALUES\n      (-10),\n      (-20),\n      (100),\n      (100),\n      (1000) AS tab(col)\n\nUNION\n\nSELECT CAST(last(col) AS STRING) AS c1\n\nFROM VALUES\n      (10),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(last_value(col) AS STRING) AS c1\n\nFROM VALUES\n      (10),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(max(col) AS STRING) AS c1\n\nFROM VALUES\n      (10),\n      (50),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(max_by(x, y) AS STRING) AS c1\n\nFROM VALUES\n      (('a', 10)),\n      (('b', 50)),\n      (('c', 20)) AS tab(x, y)\n\nUNION\n\nSELECT CAST(mean(DISTINCT col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2),\n      (NULL) AS tab(col)\n\nUNION\n\nSELECT CAST(min(col) AS STRING) AS c1\n\nFROM VALUES\n      (10),\n      (50),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(min_by(x, y) AS STRING) AS c1\n\nFROM VALUES\n      (('a', 10)),\n      (('b', 50)),\n      (('c', 20)) AS tab(x, y)\n\nUNION\n\nSELECT CAST(percentile(col, 0.3) AS STRING) AS c1\n\nFROM VALUES\n      (0),\n      (10),\n      (10) AS tab(col)\n\nUNION\n\nSELECT CAST(percentile_approx(col, 0.5, 100) AS STRING) AS c1\n\nFROM VALUES\n      (0),\n      (6),\n      (7),\n      (9),\n      (10),\n      (10),\n      (10) AS tab(col)\n\nUNION\n\nSELECT CAST(regr_avgx(y, x) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_avgy(y, x) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_count(y, x) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 2),\n      (2, 3),\n      (2, 4) AS t(y, x)\n\nUNION\n\nSELECT CAST(regr_r2(y, x) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(skewness(col) AS STRING) AS c1\n\nFROM VALUES\n      (-10),\n      (-20),\n      (100),\n      (1000),\n      (1000) AS tab(col)\n\nUNION\n\nSELECT CAST(some(col) AS STRING) AS c1\n\nFROM VALUES\n      (true),\n      (false),\n      (false) AS tab(col)\n\nUNION\n\nSELECT CAST(std(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(stddev(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(stddev_pop(DISTINCT col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(stddev_samp(DISTINCT col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(sum(col) AS STRING) AS c1\n\nFROM VALUES\n      (NULL),\n      (NULL) AS tab(col)\n\nUNION\n\nSELECT CAST(try_avg(DISTINCT col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2) AS tab(col)\n\nUNION\n\nSELECT CAST(try_sum(col) AS STRING) AS c1\n\nFROM VALUES\n      (NULL),\n      (10),\n      (15) AS tab(col)\n\nUNION\n\nSELECT CAST(var_pop(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(var_samp(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(variance(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(a AS STRING) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    dense_rank() OVER (PARTITION BY a ORDER BY b),\n    rank() OVER (PARTITION BY a ORDER BY b),\n    row_number() OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS STRING) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    ntile(2) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS STRING) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    percent_rank(b) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A1', 3),\n        ('A1', 6),\n        ('A1', 7),\n        ('A1', 7),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS STRING) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    dense_rank() OVER (PARTITION BY a ORDER BY b),\n    rank() OVER (PARTITION BY a ORDER BY b),\n    row_number() OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS STRING) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    cume_dist() OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS STRING) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    lag(b) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS STRING) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    lead(b) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS STRING) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    nth_value(b, 2) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(num AS STRING) AS c1\n\nFROM (\n  SELECT \n    explode(MAP(1, 'a', 2, 'b')) AS (num, val),\n    'Spark'\n)\n\nUNION\n\nSELECT CAST(elem AS STRING) AS c1\n\nFROM (\n  SELECT \n    explode_outer(ARRAY(10, 20)) AS elem,\n    'Spark'\n)\n\nUNION\n\nSELECT CAST(name AS STRING) AS c1\n\nFROM (\n  SELECT \n    name,\n    age,\n    count(*)\n  \n  FROM VALUES\n        (2, 'Alice'),\n        (5, 'Bob') AS people(age, name)\n  \n  GROUP BY CUBE(name, age)\n)\n\nUNION\n\nSELECT CAST(name AS STRING) AS c1\n\nFROM (\n  SELECT \n    name,\n    grouping(name),\n    sum(age)\n  \n  FROM VALUES\n        (2, 'Alice'),\n        (5, 'Bob') AS people(age, name)\n  \n  GROUP BY CUBE(name)\n)\n\nUNION\n\nSELECT CAST(name AS STRING) AS c1\n\nFROM (\n  SELECT \n    name,\n    age,\n    grouping_id(name, age),\n    conv(CAST(grouping_id(name, age) AS STRING), 10, 2),\n    avg(height)\n  \n  FROM VALUES\n        (2, 'Alice', 165),\n        (5, 'Bob', 180) AS people(age, name, height)\n  \n  GROUP BY CUBE(name, age)\n)\n\nUNION\n\nSELECT CAST(col1 AS STRING) AS c1\n\nFROM (\n  SELECT \n    'hello' AS col1,\n    stack(2, 1, 2, 3) AS (first, second),\n    'world'\n)\n\nUNION\n\nSELECT CAST(any_value(col) AS STRING) AS c1\n\nFROM VALUES\n      (10),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(approx_top_k(expr) AS STRING) AS c1\n\nFROM VALUES\n      (0),\n      (0),\n      (1),\n      (1),\n      (2),\n      (3),\n      (4),\n      (4) AS tab(expr)\n\nUNION\n\nSELECT CAST(hll_sketch_estimate(hll_sketch_agg(col, 12)) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2),\n      (2),\n      (3) AS tab(col)\n\nUNION\n\n-- SELECT CAST(a AS string) AS c1\n-- FROM (\n--   SELECT hll_sketch_estimate(hll_union(hll_sketch_agg(col1, 4), hll_sketch_agg(col2, 21))) AS a\n--   FROM VALUES\n--         (1, 4),\n--         (1, 4),\n--         (2, 5),\n--         (2, 5),\n--         (3, 6) AS tab(col1, col2)\n-- )\n-- UNION\nSELECT CAST(median(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (2),\n      (3),\n      (4),\n      (NULL) AS tab(col)\n\nUNION\n\nSELECT CAST(regr_intercept(y, x) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_slope(y, x) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(typeof(regr_sxx(y, x)) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_sxy(y, x) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_syy(y, x) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(mode(col) AS STRING) AS c1\n\nFROM VALUES\n      (ARRAY(1, 2)),\n      (ARRAY(1, 2)),\n      (ARRAY(2, 3)) AS tab(col)\n\nUNION\n\nSELECT CAST(approx_top_k(expr, 10, 100) AS STRING) AS c1\n\nFROM VALUES\n      (0),\n      (1),\n      (1),\n      (2),\n      (2),\n      (2) AS tab(expr)\n\nUNION\n\nSELECT CAST(hll_sketch_estimate(hll_sketch_agg(col, 12)) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2),\n      (2),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(hll_sketch_estimate(hll_union_agg(sketch, true)) AS STRING) AS c1\n\nFROM (\n  SELECT hll_sketch_agg(col) AS sketch\n  \n  FROM VALUES\n        (1) AS tab(col)\n  \n  UNION ALL\n  \n  SELECT hll_sketch_agg(col, 20) AS sketch\n  \n  FROM VALUES\n        (1) AS tab(col)\n)\n\nUNION\n\nSELECT CAST(hex(TRIM(TRAILING x'00' FROM bitmap_construct_agg(val))) AS STRING) AS c1\n\nFROM VALUES\n      (0) AS T(val)\n\nUNION\n\nSELECT CAST(num_distinct AS STRING) AS c1\n\nFROM (\n  SELECT sum(num_distinct) AS num_distinct\n  \n  FROM (\n    SELECT \n      bitmap_bucket_number(val),\n      bitmap_count(bitmap_construct_agg(bitmap_bit_position(val)))\n    \n    FROM VALUES\n          (1),\n          (2),\n          (1),\n          (-1),\n          (5),\n          (0),\n          (5) AS t(val)\n    \n    GROUP BY ALL  \n  ) AS distinct_vals_by_bucket(bucket, num_distinct)\n)\n\nUNION\n\nSELECT CAST(hex(count_min_sketch(column => col, confidence => 0.5d, epsilon => 0.5d, seed => 1)) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(num_distinct AS STRING) AS c1\n\nFROM (\n  SELECT sum(num_distinct) AS num_distinct\n  \n  FROM (\n    SELECT \n      bucket,\n      bitmap_count(bitmap_or_agg(num_distinct)) AS num_distinct\n    \n    FROM (\n      (SELECT \n        bitmap_bucket_number(val) AS bucket,\n        bitmap_construct_agg(bitmap_bit_position(val)) AS num_distinct\n      \n      FROM VALUES\n            (1),\n            (2),\n            (1),\n            (-1),\n            (5),\n            (0),\n            (5) AS t(val)\n      \n      GROUP BY ALL)\n      \n      UNION ALL\n      \n      (SELECT \n        bitmap_bucket_number(val) AS bucket,\n        bitmap_construct_agg(bitmap_bit_position(val)) AS num_distinct\n      \n      FROM VALUES\n            (3),\n            (1),\n            (-1),\n            (6),\n            (5),\n            (1),\n            (5),\n            (8) AS t(val)\n      \n      GROUP BY ALL)\n    )\n    \n    GROUP BY ALL  \n  )\n)\n"
        } ]
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "M0l8iode",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 12
    },
    "SQLStatement_2_2##QPEBhr65" : {
      "id" : "SQLStatement_2_2##QPEBhr65",
      "component" : "Filter",
      "metadata" : {
        "label" : "SQLStatement_2_2_1",
        "phase" : 0,
        "macroDependencies" : [ ],
        "isLabelGrayed" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "condition" : {
          "expression" : "{% if var('DATASET_ID', '')  %}\n  c_string = '{{ var(\"DATASET_ID\", \"\")}}'\n{% else %}\n  true\n{% endif %}"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "nIeiN2rB",
          "slug" : "in1"
        } ],
        "outputs" : [ {
          "id" : "UGmpU5hA",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 30
    },
    "all_type_parquet##QoCzHSJp" : {
      "id" : "all_type_parquet##QoCzHSJp",
      "component" : "Source",
      "metadata" : {
        "label" : "all_type_parquet_1_1",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "table" : {
          "name" : "all_type_parquet",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "RaogFw7m",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 52
    },
    "SQLStatement_1_1##qFpuukPd" : {
      "id" : "SQLStatement_1_1##qFpuukPd",
      "component" : "Deduplicate",
      "metadata" : {
        "label" : "SQLStatement_1_1_1",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "dedupColumns" : [ ],
        "dedupType" : "distinct",
        "columnsSelector" : [ ],
        "orders" : [ ],
        "useOrderBy" : false
      },
      "ports" : {
        "inputs" : [ {
          "id" : "Pav6qHKt",
          "slug" : "SQLStatement_1_4"
        } ],
        "outputs" : [ {
          "id" : "zkpV8UIH",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 29
    },
    "all_type_partiti##JqPGws0P" : {
      "id" : "all_type_partiti##JqPGws0P",
      "component" : "Source",
      "metadata" : {
        "label" : "all_type_partitioned",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "table" : {
          "name" : "all_type_partitioned",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "oRENQq5s",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 0
    },
    "Limit_4_1##DBKAQTQg" : {
      "id" : "Limit_4_1##DBKAQTQg",
      "component" : "Limit",
      "metadata" : {
        "label" : "Limit_4_1",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "limit" : {
          "expression" : "5"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "twxZeAku",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "GwR9ITGy",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 40
    },
    "Join_1_2##Z3k6smNg" : {
      "id" : "Join_1_2##Z3k6smNg",
      "component" : "Join",
      "metadata" : {
        "label" : "Join_1_2",
        "phase" : 0,
        "macroDependencies" : [ ],
        "comment" : "Combines customer data with additional records while excluding certain matches for deeper insights.",
        "isLabelGrayed" : false
      },
      "properties" : {
        "conditions" : [ {
          "alias" : "in1",
          "expression" : {
            "expression" : "in0.customer_id != in1.c1"
          },
          "joinType" : "INNER"
        }, {
          "alias" : "in2",
          "expression" : {
            "expression" : "in1.c1 != in2.c_string"
          },
          "joinType" : "INNER"
        } ],
        "expressions" : [ {
          "expression" : {
            "expression" : "in0.customer_id"
          },
          "alias" : "customer_id"
        }, {
          "expression" : {
            "expression" : "in0.first_name"
          },
          "alias" : "first_name"
        }, {
          "expression" : {
            "expression" : "in0.last_name"
          },
          "alias" : "last_name"
        }, {
          "expression" : {
            "expression" : "in0.c_expressions"
          },
          "alias" : "c_expressions"
        }, {
          "expression" : {
            "expression" : "in1.c1"
          },
          "alias" : "c1"
        }, {
          "expression" : {
            "expression" : "in2.c_tinyint"
          },
          "alias" : "c_tinyint"
        } ],
        "activeTab" : "conditions",
        "columnsSelector" : [ ],
        "headAlias" : "in0"
      },
      "ports" : {
        "inputs" : [ {
          "id" : "VtXIXWNj",
          "slug" : "in0"
        }, {
          "id" : "Raysu7mS",
          "slug" : "in1"
        }, {
          "id" : "Fi3fD2JP",
          "slug" : "in2"
        } ],
        "outputs" : [ {
          "id" : "jwyEV8Hk",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 13
    },
    "Limit_2##aBU0L71i" : {
      "id" : "Limit_2##aBU0L71i",
      "component" : "Limit",
      "metadata" : {
        "label" : "Limit_2",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "limit" : {
          "expression" : "25"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "LiWsHfSD",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "K7EP93UR",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 34
    },
    "Filter_1##K3dMykOy" : {
      "id" : "Filter_1##K3dMykOy",
      "component" : "Filter",
      "metadata" : {
        "label" : "Filter_1",
        "phase" : 0,
        "macroDependencies" : [ ],
        "isLabelGrayed" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "condition" : {
          "expression" : "true"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "ulPpzMkw",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "ViI6hxWa",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 49
    },
    "Subgraph_2##UxrUlhgc" : {
      "id" : "Subgraph_2##UxrUlhgc",
      "component" : "Subgraph",
      "metadata" : {
        "label" : "Subgraph_2",
        "phase" : 0
      },
      "processes" : {
        "env_uitesting_sh##J6e1VOkj" : {
          "id" : "env_uitesting_sh##J6e1VOkj",
          "component" : "Model",
          "metadata" : {
            "label" : "env_uitesting_shared_child_model_1",
            "phase" : 0,
            "isLabelGrayed" : false
          },
          "properties" : {
            "table" : {
              "name" : "env_uitesting_shared_child_model_1",
              "sourceType" : "Model"
            }
          },
          "ports" : {
            "inputs" : [ ],
            "outputs" : [ {
              "id" : "gllhTdZV",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                }, {
                  "name" : "c_test",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 0
        },
        "Subgraph_4##yGaAr0cb" : {
          "id" : "Subgraph_4##yGaAr0cb",
          "component" : "Subgraph",
          "metadata" : {
            "label" : "Subgraph_4",
            "phase" : 0
          },
          "processes" : {
            "Filter_2##h9xVAVBH" : {
              "id" : "Filter_2##h9xVAVBH",
              "component" : "Filter",
              "metadata" : {
                "label" : "Filter_2",
                "phase" : 0,
                "macroDependencies" : [ ],
                "isLabelGrayed" : false
              },
              "properties" : {
                "columnsSelector" : [ ],
                "condition" : {
                  "expression" : "true"
                }
              },
              "ports" : {
                "inputs" : [ {
                  "id" : "heAUDFPj",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "c_tinyint",
                      "dataType" : {
                        "type" : "TinyInt"
                      }
                    }, {
                      "name" : "c_smallint",
                      "dataType" : {
                        "type" : "SmallInt"
                      }
                    }, {
                      "name" : "c_int",
                      "dataType" : {
                        "type" : "Integer"
                      }
                    }, {
                      "name" : "c_bigint",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "c_float",
                      "dataType" : {
                        "type" : "Float"
                      }
                    }, {
                      "name" : "c_double",
                      "dataType" : {
                        "type" : "Double"
                      }
                    }, {
                      "name" : "c_string",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "c_boolean",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    }, {
                      "name" : "c_array",
                      "dataType" : {
                        "type" : "Array",
                        "dataType" : {
                          "type" : "String"
                        }
                      }
                    }, {
                      "name" : "c_struct",
                      "dataType" : {
                        "type" : "Struct",
                        "fields" : [ {
                          "name" : "city",
                          "dataType" : {
                            "type" : "String"
                          }
                        }, {
                          "name" : "state",
                          "dataType" : {
                            "type" : "String"
                          }
                        }, {
                          "name" : "pin",
                          "dataType" : {
                            "type" : "Bigint"
                          }
                        } ]
                      }
                    }, {
                      "name" : "c_test",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "in0"
                } ],
                "outputs" : [ {
                  "id" : "Q3J7vlun",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "c_tinyint",
                      "dataType" : {
                        "type" : "TinyInt"
                      }
                    }, {
                      "name" : "c_smallint",
                      "dataType" : {
                        "type" : "SmallInt"
                      }
                    }, {
                      "name" : "c_int",
                      "dataType" : {
                        "type" : "Integer"
                      }
                    }, {
                      "name" : "c_bigint",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "c_float",
                      "dataType" : {
                        "type" : "Float"
                      }
                    }, {
                      "name" : "c_double",
                      "dataType" : {
                        "type" : "Double"
                      }
                    }, {
                      "name" : "c_string",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "c_boolean",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    }, {
                      "name" : "c_array",
                      "dataType" : {
                        "type" : "Array",
                        "dataType" : {
                          "type" : "String"
                        }
                      }
                    }, {
                      "name" : "c_struct",
                      "dataType" : {
                        "type" : "Struct",
                        "fields" : [ {
                          "name" : "city",
                          "dataType" : {
                            "type" : "String"
                          }
                        }, {
                          "name" : "state",
                          "dataType" : {
                            "type" : "String"
                          }
                        }, {
                          "name" : "pin",
                          "dataType" : {
                            "type" : "Bigint"
                          }
                        } ]
                      }
                    }, {
                      "name" : "c_test",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "index" : 0
            },
            "Subgraph_5##AmqVQRor" : {
              "id" : "Subgraph_5##AmqVQRor",
              "component" : "Subgraph",
              "metadata" : {
                "label" : "Subgraph_5",
                "phase" : 0
              },
              "processes" : {
                "Reformat_7##pbXO8zZn" : {
                  "id" : "Reformat_7##pbXO8zZn",
                  "component" : "Reformat",
                  "metadata" : {
                    "label" : "Reformat_7",
                    "phase" : 0,
                    "isLabelGrayed" : false
                  },
                  "properties" : {
                    "columnsSelector" : [ ],
                    "expressions" : [ ]
                  },
                  "ports" : {
                    "inputs" : [ {
                      "id" : "cZ6Sds5L",
                      "schema" : {
                        "entityType" : "",
                        "providerType" : "Databricks",
                        "fields" : [ {
                          "name" : "c_tinyint",
                          "dataType" : {
                            "type" : "TinyInt"
                          }
                        }, {
                          "name" : "c_smallint",
                          "dataType" : {
                            "type" : "SmallInt"
                          }
                        }, {
                          "name" : "c_int",
                          "dataType" : {
                            "type" : "Integer"
                          }
                        }, {
                          "name" : "c_bigint",
                          "dataType" : {
                            "type" : "Bigint"
                          }
                        }, {
                          "name" : "c_float",
                          "dataType" : {
                            "type" : "Float"
                          }
                        }, {
                          "name" : "c_double",
                          "dataType" : {
                            "type" : "Double"
                          }
                        }, {
                          "name" : "c_string",
                          "dataType" : {
                            "type" : "String"
                          }
                        }, {
                          "name" : "c_boolean",
                          "dataType" : {
                            "type" : "Boolean"
                          }
                        }, {
                          "name" : "c_array",
                          "dataType" : {
                            "type" : "Array",
                            "dataType" : {
                              "type" : "String"
                            }
                          }
                        }, {
                          "name" : "c_struct",
                          "dataType" : {
                            "type" : "Struct",
                            "fields" : [ {
                              "name" : "city",
                              "dataType" : {
                                "type" : "String"
                              }
                            }, {
                              "name" : "state",
                              "dataType" : {
                                "type" : "String"
                              }
                            }, {
                              "name" : "pin",
                              "dataType" : {
                                "type" : "Bigint"
                              }
                            } ]
                          }
                        }, {
                          "name" : "c_test",
                          "dataType" : {
                            "type" : "String"
                          }
                        } ]
                      },
                      "slug" : "Filter_2"
                    } ],
                    "outputs" : [ {
                      "id" : "nhtzrkif",
                      "schema" : {
                        "entityType" : "",
                        "providerType" : "Databricks",
                        "fields" : [ {
                          "name" : "c_tinyint",
                          "dataType" : {
                            "type" : "TinyInt"
                          }
                        }, {
                          "name" : "c_smallint",
                          "dataType" : {
                            "type" : "SmallInt"
                          }
                        }, {
                          "name" : "c_int",
                          "dataType" : {
                            "type" : "Integer"
                          }
                        }, {
                          "name" : "c_bigint",
                          "dataType" : {
                            "type" : "Bigint"
                          }
                        }, {
                          "name" : "c_float",
                          "dataType" : {
                            "type" : "Float"
                          }
                        }, {
                          "name" : "c_double",
                          "dataType" : {
                            "type" : "Double"
                          }
                        }, {
                          "name" : "c_string",
                          "dataType" : {
                            "type" : "String"
                          }
                        }, {
                          "name" : "c_boolean",
                          "dataType" : {
                            "type" : "Boolean"
                          }
                        }, {
                          "name" : "c_array",
                          "dataType" : {
                            "type" : "Array",
                            "dataType" : {
                              "type" : "String"
                            }
                          }
                        }, {
                          "name" : "c_struct",
                          "dataType" : {
                            "type" : "Struct",
                            "fields" : [ {
                              "name" : "city",
                              "dataType" : {
                                "type" : "String"
                              }
                            }, {
                              "name" : "state",
                              "dataType" : {
                                "type" : "String"
                              }
                            }, {
                              "name" : "pin",
                              "dataType" : {
                                "type" : "Bigint"
                              }
                            } ]
                          }
                        }, {
                          "name" : "c_test",
                          "dataType" : {
                            "type" : "String"
                          }
                        } ]
                      },
                      "slug" : "out"
                    } ],
                    "isCustomOutputSchema" : false,
                    "autoUpdateOnRun" : false
                  },
                  "index" : 0
                },
                "TestSubgraph_6Te##M6u9wRwV" : {
                  "id" : "TestSubgraph_6Te##M6u9wRwV",
                  "component" : "Subgraph",
                  "metadata" : {
                    "label" : "TestSubgraph_6TestSubgraph_6TestSubgraph_6TestSubgraph_6TestSubgraph_6TestSubgraph_6",
                    "phase" : 0
                  },
                  "processes" : {
                    "Filter_3##uaqPSWUJ" : {
                      "id" : "Filter_3##uaqPSWUJ",
                      "component" : "Filter",
                      "metadata" : {
                        "label" : "Filter_3",
                        "phase" : 0,
                        "macroDependencies" : [ ],
                        "isLabelGrayed" : false
                      },
                      "properties" : {
                        "columnsSelector" : [ ],
                        "condition" : {
                          "expression" : "true"
                        }
                      },
                      "ports" : {
                        "inputs" : [ {
                          "id" : "tYvHzxYA",
                          "schema" : {
                            "entityType" : "",
                            "providerType" : "Databricks",
                            "fields" : [ {
                              "name" : "c_tinyint",
                              "dataType" : {
                                "type" : "TinyInt"
                              }
                            }, {
                              "name" : "c_smallint",
                              "dataType" : {
                                "type" : "SmallInt"
                              }
                            }, {
                              "name" : "c_int",
                              "dataType" : {
                                "type" : "Integer"
                              }
                            }, {
                              "name" : "c_bigint",
                              "dataType" : {
                                "type" : "Bigint"
                              }
                            }, {
                              "name" : "c_float",
                              "dataType" : {
                                "type" : "Float"
                              }
                            }, {
                              "name" : "c_double",
                              "dataType" : {
                                "type" : "Double"
                              }
                            }, {
                              "name" : "c_string",
                              "dataType" : {
                                "type" : "String"
                              }
                            }, {
                              "name" : "c_boolean",
                              "dataType" : {
                                "type" : "Boolean"
                              }
                            }, {
                              "name" : "c_array",
                              "dataType" : {
                                "type" : "Array",
                                "dataType" : {
                                  "type" : "String"
                                }
                              }
                            }, {
                              "name" : "c_struct",
                              "dataType" : {
                                "type" : "Struct",
                                "fields" : [ {
                                  "name" : "city",
                                  "dataType" : {
                                    "type" : "String"
                                  }
                                }, {
                                  "name" : "state",
                                  "dataType" : {
                                    "type" : "String"
                                  }
                                }, {
                                  "name" : "pin",
                                  "dataType" : {
                                    "type" : "Bigint"
                                  }
                                } ]
                              }
                            }, {
                              "name" : "c_test",
                              "dataType" : {
                                "type" : "String"
                              }
                            } ]
                          },
                          "slug" : "in0"
                        } ],
                        "outputs" : [ {
                          "id" : "A94ipJHm",
                          "schema" : {
                            "entityType" : "",
                            "providerType" : "Databricks",
                            "fields" : [ {
                              "name" : "c_tinyint",
                              "dataType" : {
                                "type" : "TinyInt"
                              }
                            }, {
                              "name" : "c_smallint",
                              "dataType" : {
                                "type" : "SmallInt"
                              }
                            }, {
                              "name" : "c_int",
                              "dataType" : {
                                "type" : "Integer"
                              }
                            }, {
                              "name" : "c_bigint",
                              "dataType" : {
                                "type" : "Bigint"
                              }
                            }, {
                              "name" : "c_float",
                              "dataType" : {
                                "type" : "Float"
                              }
                            }, {
                              "name" : "c_double",
                              "dataType" : {
                                "type" : "Double"
                              }
                            }, {
                              "name" : "c_string",
                              "dataType" : {
                                "type" : "String"
                              }
                            }, {
                              "name" : "c_boolean",
                              "dataType" : {
                                "type" : "Boolean"
                              }
                            }, {
                              "name" : "c_array",
                              "dataType" : {
                                "type" : "Array",
                                "dataType" : {
                                  "type" : "String"
                                }
                              }
                            }, {
                              "name" : "c_struct",
                              "dataType" : {
                                "type" : "Struct",
                                "fields" : [ {
                                  "name" : "city",
                                  "dataType" : {
                                    "type" : "String"
                                  }
                                }, {
                                  "name" : "state",
                                  "dataType" : {
                                    "type" : "String"
                                  }
                                }, {
                                  "name" : "pin",
                                  "dataType" : {
                                    "type" : "Bigint"
                                  }
                                } ]
                              }
                            }, {
                              "name" : "c_test",
                              "dataType" : {
                                "type" : "String"
                              }
                            } ]
                          },
                          "slug" : "out"
                        } ],
                        "isCustomOutputSchema" : false,
                        "autoUpdateOnRun" : false
                      },
                      "index" : 0
                    },
                    "Subgraph_6Subgra##XeSuSjsw" : {
                      "id" : "Subgraph_6Subgra##XeSuSjsw",
                      "component" : "Subgraph",
                      "metadata" : {
                        "label" : "Subgraph_6Subgraph_6Subgraph_6Subgraph_6Subgraph_6Subgraph_6Subgraph_6Subgraph_6",
                        "phase" : 0
                      },
                      "processes" : {
                        "Reformat_8##lgWGKL7j" : {
                          "id" : "Reformat_8##lgWGKL7j",
                          "component" : "Reformat",
                          "metadata" : {
                            "label" : "Reformat_8",
                            "phase" : 0,
                            "isLabelGrayed" : false
                          },
                          "properties" : {
                            "columnsSelector" : [ ],
                            "expressions" : [ ]
                          },
                          "ports" : {
                            "inputs" : [ {
                              "id" : "hww4TDgy",
                              "schema" : {
                                "entityType" : "",
                                "providerType" : "Databricks",
                                "fields" : [ {
                                  "name" : "c_tinyint",
                                  "dataType" : {
                                    "type" : "TinyInt"
                                  }
                                }, {
                                  "name" : "c_smallint",
                                  "dataType" : {
                                    "type" : "SmallInt"
                                  }
                                }, {
                                  "name" : "c_int",
                                  "dataType" : {
                                    "type" : "Integer"
                                  }
                                }, {
                                  "name" : "c_bigint",
                                  "dataType" : {
                                    "type" : "Bigint"
                                  }
                                }, {
                                  "name" : "c_float",
                                  "dataType" : {
                                    "type" : "Float"
                                  }
                                }, {
                                  "name" : "c_double",
                                  "dataType" : {
                                    "type" : "Double"
                                  }
                                }, {
                                  "name" : "c_string",
                                  "dataType" : {
                                    "type" : "String"
                                  }
                                }, {
                                  "name" : "c_boolean",
                                  "dataType" : {
                                    "type" : "Boolean"
                                  }
                                }, {
                                  "name" : "c_array",
                                  "dataType" : {
                                    "type" : "Array",
                                    "dataType" : {
                                      "type" : "String"
                                    }
                                  }
                                }, {
                                  "name" : "c_struct",
                                  "dataType" : {
                                    "type" : "Struct",
                                    "fields" : [ {
                                      "name" : "city",
                                      "dataType" : {
                                        "type" : "String"
                                      }
                                    }, {
                                      "name" : "state",
                                      "dataType" : {
                                        "type" : "String"
                                      }
                                    }, {
                                      "name" : "pin",
                                      "dataType" : {
                                        "type" : "Bigint"
                                      }
                                    } ]
                                  }
                                }, {
                                  "name" : "c_test",
                                  "dataType" : {
                                    "type" : "String"
                                  }
                                } ]
                              },
                              "slug" : "Filter_3"
                            } ],
                            "outputs" : [ {
                              "id" : "PtuzJikX",
                              "schema" : {
                                "entityType" : "",
                                "providerType" : "Databricks",
                                "fields" : [ {
                                  "name" : "c_tinyint",
                                  "dataType" : {
                                    "type" : "TinyInt"
                                  }
                                }, {
                                  "name" : "c_smallint",
                                  "dataType" : {
                                    "type" : "SmallInt"
                                  }
                                }, {
                                  "name" : "c_int",
                                  "dataType" : {
                                    "type" : "Integer"
                                  }
                                }, {
                                  "name" : "c_bigint",
                                  "dataType" : {
                                    "type" : "Bigint"
                                  }
                                }, {
                                  "name" : "c_float",
                                  "dataType" : {
                                    "type" : "Float"
                                  }
                                }, {
                                  "name" : "c_double",
                                  "dataType" : {
                                    "type" : "Double"
                                  }
                                }, {
                                  "name" : "c_string",
                                  "dataType" : {
                                    "type" : "String"
                                  }
                                }, {
                                  "name" : "c_boolean",
                                  "dataType" : {
                                    "type" : "Boolean"
                                  }
                                }, {
                                  "name" : "c_array",
                                  "dataType" : {
                                    "type" : "Array",
                                    "dataType" : {
                                      "type" : "String"
                                    }
                                  }
                                }, {
                                  "name" : "c_struct",
                                  "dataType" : {
                                    "type" : "Struct",
                                    "fields" : [ {
                                      "name" : "city",
                                      "dataType" : {
                                        "type" : "String"
                                      }
                                    }, {
                                      "name" : "state",
                                      "dataType" : {
                                        "type" : "String"
                                      }
                                    }, {
                                      "name" : "pin",
                                      "dataType" : {
                                        "type" : "Bigint"
                                      }
                                    } ]
                                  }
                                }, {
                                  "name" : "c_test",
                                  "dataType" : {
                                    "type" : "String"
                                  }
                                } ]
                              },
                              "slug" : "out"
                            } ],
                            "isCustomOutputSchema" : false,
                            "autoUpdateOnRun" : false
                          },
                          "index" : 0
                        },
                        "Subgraph_6##kzuEtwvw" : {
                          "id" : "Subgraph_6##kzuEtwvw",
                          "component" : "Subgraph",
                          "metadata" : {
                            "label" : "Subgraph_6",
                            "phase" : 0
                          },
                          "processes" : {
                            "Filter_4##mBmMyIxU" : {
                              "id" : "Filter_4##mBmMyIxU",
                              "component" : "Filter",
                              "metadata" : {
                                "label" : "Filter_4",
                                "phase" : 0,
                                "macroDependencies" : [ ],
                                "isLabelGrayed" : false
                              },
                              "properties" : {
                                "columnsSelector" : [ ],
                                "condition" : {
                                  "expression" : "true"
                                }
                              },
                              "ports" : {
                                "inputs" : [ {
                                  "id" : "AVQDOfQq",
                                  "schema" : {
                                    "entityType" : "",
                                    "providerType" : "Databricks",
                                    "fields" : [ {
                                      "name" : "c_tinyint",
                                      "dataType" : {
                                        "type" : "TinyInt"
                                      }
                                    }, {
                                      "name" : "c_smallint",
                                      "dataType" : {
                                        "type" : "SmallInt"
                                      }
                                    }, {
                                      "name" : "c_int",
                                      "dataType" : {
                                        "type" : "Integer"
                                      }
                                    }, {
                                      "name" : "c_bigint",
                                      "dataType" : {
                                        "type" : "Bigint"
                                      }
                                    }, {
                                      "name" : "c_float",
                                      "dataType" : {
                                        "type" : "Float"
                                      }
                                    }, {
                                      "name" : "c_double",
                                      "dataType" : {
                                        "type" : "Double"
                                      }
                                    }, {
                                      "name" : "c_string",
                                      "dataType" : {
                                        "type" : "String"
                                      }
                                    }, {
                                      "name" : "c_boolean",
                                      "dataType" : {
                                        "type" : "Boolean"
                                      }
                                    }, {
                                      "name" : "c_array",
                                      "dataType" : {
                                        "type" : "Array",
                                        "dataType" : {
                                          "type" : "String"
                                        }
                                      }
                                    }, {
                                      "name" : "c_struct",
                                      "dataType" : {
                                        "type" : "Struct",
                                        "fields" : [ {
                                          "name" : "city",
                                          "dataType" : {
                                            "type" : "String"
                                          }
                                        }, {
                                          "name" : "state",
                                          "dataType" : {
                                            "type" : "String"
                                          }
                                        }, {
                                          "name" : "pin",
                                          "dataType" : {
                                            "type" : "Bigint"
                                          }
                                        } ]
                                      }
                                    }, {
                                      "name" : "c_test",
                                      "dataType" : {
                                        "type" : "String"
                                      }
                                    } ]
                                  },
                                  "slug" : "in0"
                                } ],
                                "outputs" : [ {
                                  "id" : "nZuvcu6U",
                                  "schema" : {
                                    "entityType" : "",
                                    "providerType" : "Databricks",
                                    "fields" : [ {
                                      "name" : "c_tinyint",
                                      "dataType" : {
                                        "type" : "TinyInt"
                                      }
                                    }, {
                                      "name" : "c_smallint",
                                      "dataType" : {
                                        "type" : "SmallInt"
                                      }
                                    }, {
                                      "name" : "c_int",
                                      "dataType" : {
                                        "type" : "Integer"
                                      }
                                    }, {
                                      "name" : "c_bigint",
                                      "dataType" : {
                                        "type" : "Bigint"
                                      }
                                    }, {
                                      "name" : "c_float",
                                      "dataType" : {
                                        "type" : "Float"
                                      }
                                    }, {
                                      "name" : "c_double",
                                      "dataType" : {
                                        "type" : "Double"
                                      }
                                    }, {
                                      "name" : "c_string",
                                      "dataType" : {
                                        "type" : "String"
                                      }
                                    }, {
                                      "name" : "c_boolean",
                                      "dataType" : {
                                        "type" : "Boolean"
                                      }
                                    }, {
                                      "name" : "c_array",
                                      "dataType" : {
                                        "type" : "Array",
                                        "dataType" : {
                                          "type" : "String"
                                        }
                                      }
                                    }, {
                                      "name" : "c_struct",
                                      "dataType" : {
                                        "type" : "Struct",
                                        "fields" : [ {
                                          "name" : "city",
                                          "dataType" : {
                                            "type" : "String"
                                          }
                                        }, {
                                          "name" : "state",
                                          "dataType" : {
                                            "type" : "String"
                                          }
                                        }, {
                                          "name" : "pin",
                                          "dataType" : {
                                            "type" : "Bigint"
                                          }
                                        } ]
                                      }
                                    }, {
                                      "name" : "c_test",
                                      "dataType" : {
                                        "type" : "String"
                                      }
                                    } ]
                                  },
                                  "slug" : "out"
                                } ],
                                "isCustomOutputSchema" : false,
                                "autoUpdateOnRun" : false
                              },
                              "index" : 0
                            },
                            "Subgraph_7Subgra##YAdafXxo" : {
                              "id" : "Subgraph_7Subgra##YAdafXxo",
                              "component" : "Subgraph",
                              "metadata" : {
                                "label" : "Subgraph_7Subgraph_7Subgraph_7Subgraph_7Subgraph_7Subgraph_7Subgraph_7Subgraph_7",
                                "phase" : 0
                              },
                              "processes" : {
                                "Filter_5##LuPw5uuF" : {
                                  "id" : "Filter_5##LuPw5uuF",
                                  "component" : "Filter",
                                  "metadata" : {
                                    "label" : "Filter_5",
                                    "phase" : 0,
                                    "macroDependencies" : [ ],
                                    "isLabelGrayed" : false
                                  },
                                  "properties" : {
                                    "columnsSelector" : [ ],
                                    "condition" : {
                                      "expression" : "true"
                                    }
                                  },
                                  "ports" : {
                                    "inputs" : [ {
                                      "id" : "yWvNt1WU",
                                      "schema" : {
                                        "entityType" : "",
                                        "providerType" : "Databricks",
                                        "fields" : [ {
                                          "name" : "c_tinyint",
                                          "dataType" : {
                                            "type" : "TinyInt"
                                          }
                                        }, {
                                          "name" : "c_smallint",
                                          "dataType" : {
                                            "type" : "SmallInt"
                                          }
                                        }, {
                                          "name" : "c_int",
                                          "dataType" : {
                                            "type" : "Integer"
                                          }
                                        }, {
                                          "name" : "c_bigint",
                                          "dataType" : {
                                            "type" : "Bigint"
                                          }
                                        }, {
                                          "name" : "c_float",
                                          "dataType" : {
                                            "type" : "Float"
                                          }
                                        }, {
                                          "name" : "c_double",
                                          "dataType" : {
                                            "type" : "Double"
                                          }
                                        }, {
                                          "name" : "c_string",
                                          "dataType" : {
                                            "type" : "String"
                                          }
                                        }, {
                                          "name" : "c_boolean",
                                          "dataType" : {
                                            "type" : "Boolean"
                                          }
                                        }, {
                                          "name" : "c_array",
                                          "dataType" : {
                                            "type" : "Array",
                                            "dataType" : {
                                              "type" : "String"
                                            }
                                          }
                                        }, {
                                          "name" : "c_struct",
                                          "dataType" : {
                                            "type" : "Struct",
                                            "fields" : [ {
                                              "name" : "city",
                                              "dataType" : {
                                                "type" : "String"
                                              }
                                            }, {
                                              "name" : "state",
                                              "dataType" : {
                                                "type" : "String"
                                              }
                                            }, {
                                              "name" : "pin",
                                              "dataType" : {
                                                "type" : "Bigint"
                                              }
                                            } ]
                                          }
                                        }, {
                                          "name" : "c_test",
                                          "dataType" : {
                                            "type" : "String"
                                          }
                                        } ]
                                      },
                                      "slug" : "in0"
                                    } ],
                                    "outputs" : [ {
                                      "id" : "dfVUBOH5",
                                      "schema" : {
                                        "entityType" : "",
                                        "providerType" : "Databricks",
                                        "fields" : [ {
                                          "name" : "c_tinyint",
                                          "dataType" : {
                                            "type" : "TinyInt"
                                          }
                                        }, {
                                          "name" : "c_smallint",
                                          "dataType" : {
                                            "type" : "SmallInt"
                                          }
                                        }, {
                                          "name" : "c_int",
                                          "dataType" : {
                                            "type" : "Integer"
                                          }
                                        }, {
                                          "name" : "c_bigint",
                                          "dataType" : {
                                            "type" : "Bigint"
                                          }
                                        }, {
                                          "name" : "c_float",
                                          "dataType" : {
                                            "type" : "Float"
                                          }
                                        }, {
                                          "name" : "c_double",
                                          "dataType" : {
                                            "type" : "Double"
                                          }
                                        }, {
                                          "name" : "c_string",
                                          "dataType" : {
                                            "type" : "String"
                                          }
                                        }, {
                                          "name" : "c_boolean",
                                          "dataType" : {
                                            "type" : "Boolean"
                                          }
                                        }, {
                                          "name" : "c_array",
                                          "dataType" : {
                                            "type" : "Array",
                                            "dataType" : {
                                              "type" : "String"
                                            }
                                          }
                                        }, {
                                          "name" : "c_struct",
                                          "dataType" : {
                                            "type" : "Struct",
                                            "fields" : [ {
                                              "name" : "city",
                                              "dataType" : {
                                                "type" : "String"
                                              }
                                            }, {
                                              "name" : "state",
                                              "dataType" : {
                                                "type" : "String"
                                              }
                                            }, {
                                              "name" : "pin",
                                              "dataType" : {
                                                "type" : "Bigint"
                                              }
                                            } ]
                                          }
                                        }, {
                                          "name" : "c_test",
                                          "dataType" : {
                                            "type" : "String"
                                          }
                                        } ]
                                      },
                                      "slug" : "out"
                                    } ],
                                    "isCustomOutputSchema" : false,
                                    "autoUpdateOnRun" : false
                                  },
                                  "index" : 0
                                },
                                "Subgraph_7##gNYQYsx5" : {
                                  "id" : "Subgraph_7##gNYQYsx5",
                                  "component" : "Subgraph",
                                  "metadata" : {
                                    "label" : "Subgraph_7",
                                    "phase" : 0
                                  },
                                  "processes" : {
                                    "Filter_6##CvEHV5eK" : {
                                      "id" : "Filter_6##CvEHV5eK",
                                      "component" : "Filter",
                                      "metadata" : {
                                        "label" : "Filter_6",
                                        "phase" : 0,
                                        "macroDependencies" : [ ],
                                        "isLabelGrayed" : false
                                      },
                                      "properties" : {
                                        "columnsSelector" : [ ],
                                        "condition" : {
                                          "expression" : "true"
                                        }
                                      },
                                      "ports" : {
                                        "inputs" : [ {
                                          "id" : "FNm03fvW",
                                          "schema" : {
                                            "entityType" : "",
                                            "providerType" : "Databricks",
                                            "fields" : [ {
                                              "name" : "c_tinyint",
                                              "dataType" : {
                                                "type" : "TinyInt"
                                              }
                                            }, {
                                              "name" : "c_smallint",
                                              "dataType" : {
                                                "type" : "SmallInt"
                                              }
                                            }, {
                                              "name" : "c_int",
                                              "dataType" : {
                                                "type" : "Integer"
                                              }
                                            }, {
                                              "name" : "c_bigint",
                                              "dataType" : {
                                                "type" : "Bigint"
                                              }
                                            }, {
                                              "name" : "c_float",
                                              "dataType" : {
                                                "type" : "Float"
                                              }
                                            }, {
                                              "name" : "c_double",
                                              "dataType" : {
                                                "type" : "Double"
                                              }
                                            }, {
                                              "name" : "c_string",
                                              "dataType" : {
                                                "type" : "String"
                                              }
                                            }, {
                                              "name" : "c_boolean",
                                              "dataType" : {
                                                "type" : "Boolean"
                                              }
                                            }, {
                                              "name" : "c_array",
                                              "dataType" : {
                                                "type" : "Array",
                                                "dataType" : {
                                                  "type" : "String"
                                                }
                                              }
                                            }, {
                                              "name" : "c_struct",
                                              "dataType" : {
                                                "type" : "Struct",
                                                "fields" : [ {
                                                  "name" : "city",
                                                  "dataType" : {
                                                    "type" : "String"
                                                  }
                                                }, {
                                                  "name" : "state",
                                                  "dataType" : {
                                                    "type" : "String"
                                                  }
                                                }, {
                                                  "name" : "pin",
                                                  "dataType" : {
                                                    "type" : "Bigint"
                                                  }
                                                } ]
                                              }
                                            }, {
                                              "name" : "c_test",
                                              "dataType" : {
                                                "type" : "String"
                                              }
                                            } ]
                                          },
                                          "slug" : "in0"
                                        } ],
                                        "outputs" : [ {
                                          "id" : "rnJRgrxx",
                                          "schema" : {
                                            "entityType" : "",
                                            "providerType" : "Databricks",
                                            "fields" : [ {
                                              "name" : "c_tinyint",
                                              "dataType" : {
                                                "type" : "TinyInt"
                                              }
                                            }, {
                                              "name" : "c_smallint",
                                              "dataType" : {
                                                "type" : "SmallInt"
                                              }
                                            }, {
                                              "name" : "c_int",
                                              "dataType" : {
                                                "type" : "Integer"
                                              }
                                            }, {
                                              "name" : "c_bigint",
                                              "dataType" : {
                                                "type" : "Bigint"
                                              }
                                            }, {
                                              "name" : "c_float",
                                              "dataType" : {
                                                "type" : "Float"
                                              }
                                            }, {
                                              "name" : "c_double",
                                              "dataType" : {
                                                "type" : "Double"
                                              }
                                            }, {
                                              "name" : "c_string",
                                              "dataType" : {
                                                "type" : "String"
                                              }
                                            }, {
                                              "name" : "c_boolean",
                                              "dataType" : {
                                                "type" : "Boolean"
                                              }
                                            }, {
                                              "name" : "c_array",
                                              "dataType" : {
                                                "type" : "Array",
                                                "dataType" : {
                                                  "type" : "String"
                                                }
                                              }
                                            }, {
                                              "name" : "c_struct",
                                              "dataType" : {
                                                "type" : "Struct",
                                                "fields" : [ {
                                                  "name" : "city",
                                                  "dataType" : {
                                                    "type" : "String"
                                                  }
                                                }, {
                                                  "name" : "state",
                                                  "dataType" : {
                                                    "type" : "String"
                                                  }
                                                }, {
                                                  "name" : "pin",
                                                  "dataType" : {
                                                    "type" : "Bigint"
                                                  }
                                                } ]
                                              }
                                            }, {
                                              "name" : "c_test",
                                              "dataType" : {
                                                "type" : "String"
                                              }
                                            } ]
                                          },
                                          "slug" : "out"
                                        } ],
                                        "isCustomOutputSchema" : false,
                                        "autoUpdateOnRun" : false
                                      },
                                      "index" : 0
                                    },
                                    "Reformat_9##srfWHJth" : {
                                      "id" : "Reformat_9##srfWHJth",
                                      "component" : "Reformat",
                                      "metadata" : {
                                        "label" : "Reformat_9",
                                        "phase" : 0,
                                        "isLabelGrayed" : false
                                      },
                                      "properties" : {
                                        "columnsSelector" : [ ],
                                        "expressions" : [ ]
                                      },
                                      "ports" : {
                                        "inputs" : [ {
                                          "id" : "JQlLGYfi",
                                          "schema" : {
                                            "entityType" : "",
                                            "providerType" : "Databricks",
                                            "fields" : [ {
                                              "name" : "c_tinyint",
                                              "dataType" : {
                                                "type" : "TinyInt"
                                              }
                                            }, {
                                              "name" : "c_smallint",
                                              "dataType" : {
                                                "type" : "SmallInt"
                                              }
                                            }, {
                                              "name" : "c_int",
                                              "dataType" : {
                                                "type" : "Integer"
                                              }
                                            }, {
                                              "name" : "c_bigint",
                                              "dataType" : {
                                                "type" : "Bigint"
                                              }
                                            }, {
                                              "name" : "c_float",
                                              "dataType" : {
                                                "type" : "Float"
                                              }
                                            }, {
                                              "name" : "c_double",
                                              "dataType" : {
                                                "type" : "Double"
                                              }
                                            }, {
                                              "name" : "c_string",
                                              "dataType" : {
                                                "type" : "String"
                                              }
                                            }, {
                                              "name" : "c_boolean",
                                              "dataType" : {
                                                "type" : "Boolean"
                                              }
                                            }, {
                                              "name" : "c_array",
                                              "dataType" : {
                                                "type" : "Array",
                                                "dataType" : {
                                                  "type" : "String"
                                                }
                                              }
                                            }, {
                                              "name" : "c_struct",
                                              "dataType" : {
                                                "type" : "Struct",
                                                "fields" : [ {
                                                  "name" : "city",
                                                  "dataType" : {
                                                    "type" : "String"
                                                  }
                                                }, {
                                                  "name" : "state",
                                                  "dataType" : {
                                                    "type" : "String"
                                                  }
                                                }, {
                                                  "name" : "pin",
                                                  "dataType" : {
                                                    "type" : "Bigint"
                                                  }
                                                } ]
                                              }
                                            }, {
                                              "name" : "c_test",
                                              "dataType" : {
                                                "type" : "String"
                                              }
                                            } ]
                                          },
                                          "slug" : "Filter_6"
                                        } ],
                                        "outputs" : [ {
                                          "id" : "d6DHdr0z",
                                          "schema" : {
                                            "entityType" : "",
                                            "providerType" : "Databricks",
                                            "fields" : [ {
                                              "name" : "c_tinyint",
                                              "dataType" : {
                                                "type" : "TinyInt"
                                              }
                                            }, {
                                              "name" : "c_smallint",
                                              "dataType" : {
                                                "type" : "SmallInt"
                                              }
                                            }, {
                                              "name" : "c_int",
                                              "dataType" : {
                                                "type" : "Integer"
                                              }
                                            }, {
                                              "name" : "c_bigint",
                                              "dataType" : {
                                                "type" : "Bigint"
                                              }
                                            }, {
                                              "name" : "c_float",
                                              "dataType" : {
                                                "type" : "Float"
                                              }
                                            }, {
                                              "name" : "c_double",
                                              "dataType" : {
                                                "type" : "Double"
                                              }
                                            }, {
                                              "name" : "c_string",
                                              "dataType" : {
                                                "type" : "String"
                                              }
                                            }, {
                                              "name" : "c_boolean",
                                              "dataType" : {
                                                "type" : "Boolean"
                                              }
                                            }, {
                                              "name" : "c_array",
                                              "dataType" : {
                                                "type" : "Array",
                                                "dataType" : {
                                                  "type" : "String"
                                                }
                                              }
                                            }, {
                                              "name" : "c_struct",
                                              "dataType" : {
                                                "type" : "Struct",
                                                "fields" : [ {
                                                  "name" : "city",
                                                  "dataType" : {
                                                    "type" : "String"
                                                  }
                                                }, {
                                                  "name" : "state",
                                                  "dataType" : {
                                                    "type" : "String"
                                                  }
                                                }, {
                                                  "name" : "pin",
                                                  "dataType" : {
                                                    "type" : "Bigint"
                                                  }
                                                } ]
                                              }
                                            }, {
                                              "name" : "c_test",
                                              "dataType" : {
                                                "type" : "String"
                                              }
                                            } ]
                                          },
                                          "slug" : "out"
                                        } ],
                                        "isCustomOutputSchema" : false,
                                        "autoUpdateOnRun" : false
                                      },
                                      "index" : 1
                                    }
                                  },
                                  "connections" : [ {
                                    "id" : "IVWVGGvo",
                                    "source" : "Reformat_9##srfWHJth",
                                    "sourcePort" : "d6DHdr0z",
                                    "target" : "Subgraph_7##gNYQYsx5",
                                    "targetPort" : "UI1mR6x5"
                                  }, {
                                    "id" : "hkLFl0UN",
                                    "source" : "Subgraph_7##gNYQYsx5",
                                    "sourcePort" : "GsiF5D4T",
                                    "target" : "Filter_6##CvEHV5eK",
                                    "targetPort" : "FNm03fvW"
                                  }, {
                                    "id" : "EmfNpNNg",
                                    "source" : "Filter_6##CvEHV5eK",
                                    "sourcePort" : "rnJRgrxx",
                                    "target" : "Reformat_9##srfWHJth",
                                    "targetPort" : "JQlLGYfi"
                                  } ],
                                  "ports" : {
                                    "inputs" : [ {
                                      "id" : "GsiF5D4T",
                                      "schema" : {
                                        "entityType" : "",
                                        "providerType" : "Databricks",
                                        "fields" : [ {
                                          "name" : "c_tinyint",
                                          "dataType" : {
                                            "type" : "TinyInt"
                                          }
                                        }, {
                                          "name" : "c_smallint",
                                          "dataType" : {
                                            "type" : "SmallInt"
                                          }
                                        }, {
                                          "name" : "c_int",
                                          "dataType" : {
                                            "type" : "Integer"
                                          }
                                        }, {
                                          "name" : "c_bigint",
                                          "dataType" : {
                                            "type" : "Bigint"
                                          }
                                        }, {
                                          "name" : "c_float",
                                          "dataType" : {
                                            "type" : "Float"
                                          }
                                        }, {
                                          "name" : "c_double",
                                          "dataType" : {
                                            "type" : "Double"
                                          }
                                        }, {
                                          "name" : "c_string",
                                          "dataType" : {
                                            "type" : "String"
                                          }
                                        }, {
                                          "name" : "c_boolean",
                                          "dataType" : {
                                            "type" : "Boolean"
                                          }
                                        }, {
                                          "name" : "c_array",
                                          "dataType" : {
                                            "type" : "Array",
                                            "dataType" : {
                                              "type" : "String"
                                            }
                                          }
                                        }, {
                                          "name" : "c_struct",
                                          "dataType" : {
                                            "type" : "Struct",
                                            "fields" : [ {
                                              "name" : "city",
                                              "dataType" : {
                                                "type" : "String"
                                              }
                                            }, {
                                              "name" : "state",
                                              "dataType" : {
                                                "type" : "String"
                                              }
                                            }, {
                                              "name" : "pin",
                                              "dataType" : {
                                                "type" : "Bigint"
                                              }
                                            } ]
                                          }
                                        }, {
                                          "name" : "c_test",
                                          "dataType" : {
                                            "type" : "String"
                                          }
                                        } ]
                                      },
                                      "slug" : "Filter_5"
                                    } ],
                                    "outputs" : [ {
                                      "id" : "UI1mR6x5",
                                      "schema" : {
                                        "entityType" : "",
                                        "providerType" : "Databricks",
                                        "fields" : [ {
                                          "name" : "c_tinyint",
                                          "dataType" : {
                                            "type" : "TinyInt"
                                          }
                                        }, {
                                          "name" : "c_smallint",
                                          "dataType" : {
                                            "type" : "SmallInt"
                                          }
                                        }, {
                                          "name" : "c_int",
                                          "dataType" : {
                                            "type" : "Integer"
                                          }
                                        }, {
                                          "name" : "c_bigint",
                                          "dataType" : {
                                            "type" : "Bigint"
                                          }
                                        }, {
                                          "name" : "c_float",
                                          "dataType" : {
                                            "type" : "Float"
                                          }
                                        }, {
                                          "name" : "c_double",
                                          "dataType" : {
                                            "type" : "Double"
                                          }
                                        }, {
                                          "name" : "c_string",
                                          "dataType" : {
                                            "type" : "String"
                                          }
                                        }, {
                                          "name" : "c_boolean",
                                          "dataType" : {
                                            "type" : "Boolean"
                                          }
                                        }, {
                                          "name" : "c_array",
                                          "dataType" : {
                                            "type" : "Array",
                                            "dataType" : {
                                              "type" : "String"
                                            }
                                          }
                                        }, {
                                          "name" : "c_struct",
                                          "dataType" : {
                                            "type" : "Struct",
                                            "fields" : [ {
                                              "name" : "city",
                                              "dataType" : {
                                                "type" : "String"
                                              }
                                            }, {
                                              "name" : "state",
                                              "dataType" : {
                                                "type" : "String"
                                              }
                                            }, {
                                              "name" : "pin",
                                              "dataType" : {
                                                "type" : "Bigint"
                                              }
                                            } ]
                                          }
                                        }, {
                                          "name" : "c_test",
                                          "dataType" : {
                                            "type" : "String"
                                          }
                                        } ]
                                      },
                                      "slug" : "out"
                                    } ],
                                    "isCustomOutputSchema" : false,
                                    "autoUpdateOnRun" : false
                                  },
                                  "properties" : { },
                                  "canonical" : false,
                                  "index" : 1
                                }
                              },
                              "connections" : [ {
                                "id" : "blU8zBMt",
                                "source" : "Subgraph_7##gNYQYsx5",
                                "sourcePort" : "UI1mR6x5",
                                "target" : "Subgraph_7Subgra##YAdafXxo",
                                "targetPort" : "c6Jnsqb8"
                              }, {
                                "id" : "ZCqQR8BI",
                                "source" : "Subgraph_7Subgra##YAdafXxo",
                                "sourcePort" : "rOg7UsfL",
                                "target" : "Filter_5##LuPw5uuF",
                                "targetPort" : "yWvNt1WU"
                              }, {
                                "id" : "arZMsx5W",
                                "source" : "Filter_5##LuPw5uuF",
                                "sourcePort" : "dfVUBOH5",
                                "target" : "Subgraph_7##gNYQYsx5",
                                "targetPort" : "GsiF5D4T"
                              } ],
                              "ports" : {
                                "inputs" : [ {
                                  "id" : "rOg7UsfL",
                                  "schema" : {
                                    "entityType" : "",
                                    "providerType" : "Databricks",
                                    "fields" : [ {
                                      "name" : "c_tinyint",
                                      "dataType" : {
                                        "type" : "TinyInt"
                                      }
                                    }, {
                                      "name" : "c_smallint",
                                      "dataType" : {
                                        "type" : "SmallInt"
                                      }
                                    }, {
                                      "name" : "c_int",
                                      "dataType" : {
                                        "type" : "Integer"
                                      }
                                    }, {
                                      "name" : "c_bigint",
                                      "dataType" : {
                                        "type" : "Bigint"
                                      }
                                    }, {
                                      "name" : "c_float",
                                      "dataType" : {
                                        "type" : "Float"
                                      }
                                    }, {
                                      "name" : "c_double",
                                      "dataType" : {
                                        "type" : "Double"
                                      }
                                    }, {
                                      "name" : "c_string",
                                      "dataType" : {
                                        "type" : "String"
                                      }
                                    }, {
                                      "name" : "c_boolean",
                                      "dataType" : {
                                        "type" : "Boolean"
                                      }
                                    }, {
                                      "name" : "c_array",
                                      "dataType" : {
                                        "type" : "Array",
                                        "dataType" : {
                                          "type" : "String"
                                        }
                                      }
                                    }, {
                                      "name" : "c_struct",
                                      "dataType" : {
                                        "type" : "Struct",
                                        "fields" : [ {
                                          "name" : "city",
                                          "dataType" : {
                                            "type" : "String"
                                          }
                                        }, {
                                          "name" : "state",
                                          "dataType" : {
                                            "type" : "String"
                                          }
                                        }, {
                                          "name" : "pin",
                                          "dataType" : {
                                            "type" : "Bigint"
                                          }
                                        } ]
                                      }
                                    }, {
                                      "name" : "c_test",
                                      "dataType" : {
                                        "type" : "String"
                                      }
                                    } ]
                                  },
                                  "slug" : "Filter_4"
                                } ],
                                "outputs" : [ {
                                  "id" : "c6Jnsqb8",
                                  "schema" : {
                                    "entityType" : "",
                                    "providerType" : "Databricks",
                                    "fields" : [ {
                                      "name" : "c_tinyint",
                                      "dataType" : {
                                        "type" : "TinyInt"
                                      }
                                    }, {
                                      "name" : "c_smallint",
                                      "dataType" : {
                                        "type" : "SmallInt"
                                      }
                                    }, {
                                      "name" : "c_int",
                                      "dataType" : {
                                        "type" : "Integer"
                                      }
                                    }, {
                                      "name" : "c_bigint",
                                      "dataType" : {
                                        "type" : "Bigint"
                                      }
                                    }, {
                                      "name" : "c_float",
                                      "dataType" : {
                                        "type" : "Float"
                                      }
                                    }, {
                                      "name" : "c_double",
                                      "dataType" : {
                                        "type" : "Double"
                                      }
                                    }, {
                                      "name" : "c_string",
                                      "dataType" : {
                                        "type" : "String"
                                      }
                                    }, {
                                      "name" : "c_boolean",
                                      "dataType" : {
                                        "type" : "Boolean"
                                      }
                                    }, {
                                      "name" : "c_array",
                                      "dataType" : {
                                        "type" : "Array",
                                        "dataType" : {
                                          "type" : "String"
                                        }
                                      }
                                    }, {
                                      "name" : "c_struct",
                                      "dataType" : {
                                        "type" : "Struct",
                                        "fields" : [ {
                                          "name" : "city",
                                          "dataType" : {
                                            "type" : "String"
                                          }
                                        }, {
                                          "name" : "state",
                                          "dataType" : {
                                            "type" : "String"
                                          }
                                        }, {
                                          "name" : "pin",
                                          "dataType" : {
                                            "type" : "Bigint"
                                          }
                                        } ]
                                      }
                                    }, {
                                      "name" : "c_test",
                                      "dataType" : {
                                        "type" : "String"
                                      }
                                    } ]
                                  },
                                  "slug" : "out"
                                } ],
                                "isCustomOutputSchema" : false,
                                "autoUpdateOnRun" : false
                              },
                              "properties" : { },
                              "canonical" : false,
                              "index" : 1
                            }
                          },
                          "connections" : [ {
                            "id" : "Dd7y735b",
                            "source" : "Subgraph_7Subgra##YAdafXxo",
                            "sourcePort" : "c6Jnsqb8",
                            "target" : "Subgraph_6##kzuEtwvw",
                            "targetPort" : "K0VHKecX"
                          }, {
                            "id" : "wIIWJAcw",
                            "source" : "Subgraph_6##kzuEtwvw",
                            "sourcePort" : "n6Son4Cg",
                            "target" : "Filter_4##mBmMyIxU",
                            "targetPort" : "AVQDOfQq"
                          }, {
                            "id" : "K4ZJFjOs",
                            "source" : "Filter_4##mBmMyIxU",
                            "sourcePort" : "nZuvcu6U",
                            "target" : "Subgraph_7Subgra##YAdafXxo",
                            "targetPort" : "rOg7UsfL"
                          } ],
                          "ports" : {
                            "inputs" : [ {
                              "id" : "n6Son4Cg",
                              "schema" : {
                                "entityType" : "",
                                "providerType" : "Databricks",
                                "fields" : [ {
                                  "name" : "c_tinyint",
                                  "dataType" : {
                                    "type" : "TinyInt"
                                  }
                                }, {
                                  "name" : "c_smallint",
                                  "dataType" : {
                                    "type" : "SmallInt"
                                  }
                                }, {
                                  "name" : "c_int",
                                  "dataType" : {
                                    "type" : "Integer"
                                  }
                                }, {
                                  "name" : "c_bigint",
                                  "dataType" : {
                                    "type" : "Bigint"
                                  }
                                }, {
                                  "name" : "c_float",
                                  "dataType" : {
                                    "type" : "Float"
                                  }
                                }, {
                                  "name" : "c_double",
                                  "dataType" : {
                                    "type" : "Double"
                                  }
                                }, {
                                  "name" : "c_string",
                                  "dataType" : {
                                    "type" : "String"
                                  }
                                }, {
                                  "name" : "c_boolean",
                                  "dataType" : {
                                    "type" : "Boolean"
                                  }
                                }, {
                                  "name" : "c_array",
                                  "dataType" : {
                                    "type" : "Array",
                                    "dataType" : {
                                      "type" : "String"
                                    }
                                  }
                                }, {
                                  "name" : "c_struct",
                                  "dataType" : {
                                    "type" : "Struct",
                                    "fields" : [ {
                                      "name" : "city",
                                      "dataType" : {
                                        "type" : "String"
                                      }
                                    }, {
                                      "name" : "state",
                                      "dataType" : {
                                        "type" : "String"
                                      }
                                    }, {
                                      "name" : "pin",
                                      "dataType" : {
                                        "type" : "Bigint"
                                      }
                                    } ]
                                  }
                                }, {
                                  "name" : "c_test",
                                  "dataType" : {
                                    "type" : "String"
                                  }
                                } ]
                              },
                              "slug" : "Reformat_8"
                            } ],
                            "outputs" : [ {
                              "id" : "K0VHKecX",
                              "schema" : {
                                "entityType" : "",
                                "providerType" : "Databricks",
                                "fields" : [ {
                                  "name" : "c_tinyint",
                                  "dataType" : {
                                    "type" : "TinyInt"
                                  }
                                }, {
                                  "name" : "c_smallint",
                                  "dataType" : {
                                    "type" : "SmallInt"
                                  }
                                }, {
                                  "name" : "c_int",
                                  "dataType" : {
                                    "type" : "Integer"
                                  }
                                }, {
                                  "name" : "c_bigint",
                                  "dataType" : {
                                    "type" : "Bigint"
                                  }
                                }, {
                                  "name" : "c_float",
                                  "dataType" : {
                                    "type" : "Float"
                                  }
                                }, {
                                  "name" : "c_double",
                                  "dataType" : {
                                    "type" : "Double"
                                  }
                                }, {
                                  "name" : "c_string",
                                  "dataType" : {
                                    "type" : "String"
                                  }
                                }, {
                                  "name" : "c_boolean",
                                  "dataType" : {
                                    "type" : "Boolean"
                                  }
                                }, {
                                  "name" : "c_array",
                                  "dataType" : {
                                    "type" : "Array",
                                    "dataType" : {
                                      "type" : "String"
                                    }
                                  }
                                }, {
                                  "name" : "c_struct",
                                  "dataType" : {
                                    "type" : "Struct",
                                    "fields" : [ {
                                      "name" : "city",
                                      "dataType" : {
                                        "type" : "String"
                                      }
                                    }, {
                                      "name" : "state",
                                      "dataType" : {
                                        "type" : "String"
                                      }
                                    }, {
                                      "name" : "pin",
                                      "dataType" : {
                                        "type" : "Bigint"
                                      }
                                    } ]
                                  }
                                }, {
                                  "name" : "c_test",
                                  "dataType" : {
                                    "type" : "String"
                                  }
                                } ]
                              },
                              "slug" : "out"
                            } ],
                            "isCustomOutputSchema" : false,
                            "autoUpdateOnRun" : false
                          },
                          "properties" : { },
                          "canonical" : false,
                          "index" : 1
                        }
                      },
                      "connections" : [ {
                        "id" : "z2XUX695",
                        "source" : "Subgraph_6##kzuEtwvw",
                        "sourcePort" : "K0VHKecX",
                        "target" : "Subgraph_6Subgra##XeSuSjsw",
                        "targetPort" : "XENMDaPH"
                      }, {
                        "id" : "ScT55Tph",
                        "source" : "Subgraph_6Subgra##XeSuSjsw",
                        "sourcePort" : "jEbYXQvl",
                        "target" : "Reformat_8##lgWGKL7j",
                        "targetPort" : "hww4TDgy"
                      }, {
                        "id" : "b9gdPIMz",
                        "source" : "Reformat_8##lgWGKL7j",
                        "sourcePort" : "PtuzJikX",
                        "target" : "Subgraph_6##kzuEtwvw",
                        "targetPort" : "n6Son4Cg"
                      } ],
                      "ports" : {
                        "inputs" : [ {
                          "id" : "jEbYXQvl",
                          "schema" : {
                            "entityType" : "",
                            "providerType" : "Databricks",
                            "fields" : [ {
                              "name" : "c_tinyint",
                              "dataType" : {
                                "type" : "TinyInt"
                              }
                            }, {
                              "name" : "c_smallint",
                              "dataType" : {
                                "type" : "SmallInt"
                              }
                            }, {
                              "name" : "c_int",
                              "dataType" : {
                                "type" : "Integer"
                              }
                            }, {
                              "name" : "c_bigint",
                              "dataType" : {
                                "type" : "Bigint"
                              }
                            }, {
                              "name" : "c_float",
                              "dataType" : {
                                "type" : "Float"
                              }
                            }, {
                              "name" : "c_double",
                              "dataType" : {
                                "type" : "Double"
                              }
                            }, {
                              "name" : "c_string",
                              "dataType" : {
                                "type" : "String"
                              }
                            }, {
                              "name" : "c_boolean",
                              "dataType" : {
                                "type" : "Boolean"
                              }
                            }, {
                              "name" : "c_array",
                              "dataType" : {
                                "type" : "Array",
                                "dataType" : {
                                  "type" : "String"
                                }
                              }
                            }, {
                              "name" : "c_struct",
                              "dataType" : {
                                "type" : "Struct",
                                "fields" : [ {
                                  "name" : "city",
                                  "dataType" : {
                                    "type" : "String"
                                  }
                                }, {
                                  "name" : "state",
                                  "dataType" : {
                                    "type" : "String"
                                  }
                                }, {
                                  "name" : "pin",
                                  "dataType" : {
                                    "type" : "Bigint"
                                  }
                                } ]
                              }
                            }, {
                              "name" : "c_test",
                              "dataType" : {
                                "type" : "String"
                              }
                            } ]
                          },
                          "slug" : "Filter_3"
                        } ],
                        "outputs" : [ {
                          "id" : "XENMDaPH",
                          "schema" : {
                            "entityType" : "",
                            "providerType" : "Databricks",
                            "fields" : [ {
                              "name" : "c_tinyint",
                              "dataType" : {
                                "type" : "TinyInt"
                              }
                            }, {
                              "name" : "c_smallint",
                              "dataType" : {
                                "type" : "SmallInt"
                              }
                            }, {
                              "name" : "c_int",
                              "dataType" : {
                                "type" : "Integer"
                              }
                            }, {
                              "name" : "c_bigint",
                              "dataType" : {
                                "type" : "Bigint"
                              }
                            }, {
                              "name" : "c_float",
                              "dataType" : {
                                "type" : "Float"
                              }
                            }, {
                              "name" : "c_double",
                              "dataType" : {
                                "type" : "Double"
                              }
                            }, {
                              "name" : "c_string",
                              "dataType" : {
                                "type" : "String"
                              }
                            }, {
                              "name" : "c_boolean",
                              "dataType" : {
                                "type" : "Boolean"
                              }
                            }, {
                              "name" : "c_array",
                              "dataType" : {
                                "type" : "Array",
                                "dataType" : {
                                  "type" : "String"
                                }
                              }
                            }, {
                              "name" : "c_struct",
                              "dataType" : {
                                "type" : "Struct",
                                "fields" : [ {
                                  "name" : "city",
                                  "dataType" : {
                                    "type" : "String"
                                  }
                                }, {
                                  "name" : "state",
                                  "dataType" : {
                                    "type" : "String"
                                  }
                                }, {
                                  "name" : "pin",
                                  "dataType" : {
                                    "type" : "Bigint"
                                  }
                                } ]
                              }
                            }, {
                              "name" : "c_test",
                              "dataType" : {
                                "type" : "String"
                              }
                            } ]
                          },
                          "slug" : "out"
                        } ],
                        "isCustomOutputSchema" : false,
                        "autoUpdateOnRun" : false
                      },
                      "properties" : { },
                      "canonical" : false,
                      "index" : 1
                    }
                  },
                  "connections" : [ {
                    "id" : "Q5iKCM5z",
                    "source" : "Subgraph_6Subgra##XeSuSjsw",
                    "sourcePort" : "XENMDaPH",
                    "target" : "TestSubgraph_6Te##M6u9wRwV",
                    "targetPort" : "yydaZqGp"
                  }, {
                    "id" : "T0m0vFUe",
                    "source" : "TestSubgraph_6Te##M6u9wRwV",
                    "sourcePort" : "ew3IYivY",
                    "target" : "Filter_3##uaqPSWUJ",
                    "targetPort" : "tYvHzxYA"
                  }, {
                    "id" : "DXu119jN",
                    "source" : "Filter_3##uaqPSWUJ",
                    "sourcePort" : "A94ipJHm",
                    "target" : "Subgraph_6Subgra##XeSuSjsw",
                    "targetPort" : "jEbYXQvl"
                  } ],
                  "ports" : {
                    "inputs" : [ {
                      "id" : "ew3IYivY",
                      "schema" : {
                        "entityType" : "",
                        "providerType" : "Databricks",
                        "fields" : [ {
                          "name" : "c_tinyint",
                          "dataType" : {
                            "type" : "TinyInt"
                          }
                        }, {
                          "name" : "c_smallint",
                          "dataType" : {
                            "type" : "SmallInt"
                          }
                        }, {
                          "name" : "c_int",
                          "dataType" : {
                            "type" : "Integer"
                          }
                        }, {
                          "name" : "c_bigint",
                          "dataType" : {
                            "type" : "Bigint"
                          }
                        }, {
                          "name" : "c_float",
                          "dataType" : {
                            "type" : "Float"
                          }
                        }, {
                          "name" : "c_double",
                          "dataType" : {
                            "type" : "Double"
                          }
                        }, {
                          "name" : "c_string",
                          "dataType" : {
                            "type" : "String"
                          }
                        }, {
                          "name" : "c_boolean",
                          "dataType" : {
                            "type" : "Boolean"
                          }
                        }, {
                          "name" : "c_array",
                          "dataType" : {
                            "type" : "Array",
                            "dataType" : {
                              "type" : "String"
                            }
                          }
                        }, {
                          "name" : "c_struct",
                          "dataType" : {
                            "type" : "Struct",
                            "fields" : [ {
                              "name" : "city",
                              "dataType" : {
                                "type" : "String"
                              }
                            }, {
                              "name" : "state",
                              "dataType" : {
                                "type" : "String"
                              }
                            }, {
                              "name" : "pin",
                              "dataType" : {
                                "type" : "Bigint"
                              }
                            } ]
                          }
                        }, {
                          "name" : "c_test",
                          "dataType" : {
                            "type" : "String"
                          }
                        } ]
                      },
                      "slug" : "Reformat_7"
                    } ],
                    "outputs" : [ {
                      "id" : "yydaZqGp",
                      "schema" : {
                        "entityType" : "",
                        "providerType" : "Databricks",
                        "fields" : [ {
                          "name" : "c_tinyint",
                          "dataType" : {
                            "type" : "TinyInt"
                          }
                        }, {
                          "name" : "c_smallint",
                          "dataType" : {
                            "type" : "SmallInt"
                          }
                        }, {
                          "name" : "c_int",
                          "dataType" : {
                            "type" : "Integer"
                          }
                        }, {
                          "name" : "c_bigint",
                          "dataType" : {
                            "type" : "Bigint"
                          }
                        }, {
                          "name" : "c_float",
                          "dataType" : {
                            "type" : "Float"
                          }
                        }, {
                          "name" : "c_double",
                          "dataType" : {
                            "type" : "Double"
                          }
                        }, {
                          "name" : "c_string",
                          "dataType" : {
                            "type" : "String"
                          }
                        }, {
                          "name" : "c_boolean",
                          "dataType" : {
                            "type" : "Boolean"
                          }
                        }, {
                          "name" : "c_array",
                          "dataType" : {
                            "type" : "Array",
                            "dataType" : {
                              "type" : "String"
                            }
                          }
                        }, {
                          "name" : "c_struct",
                          "dataType" : {
                            "type" : "Struct",
                            "fields" : [ {
                              "name" : "city",
                              "dataType" : {
                                "type" : "String"
                              }
                            }, {
                              "name" : "state",
                              "dataType" : {
                                "type" : "String"
                              }
                            }, {
                              "name" : "pin",
                              "dataType" : {
                                "type" : "Bigint"
                              }
                            } ]
                          }
                        }, {
                          "name" : "c_test",
                          "dataType" : {
                            "type" : "String"
                          }
                        } ]
                      },
                      "slug" : "out"
                    } ],
                    "isCustomOutputSchema" : false,
                    "autoUpdateOnRun" : false
                  },
                  "properties" : { },
                  "canonical" : false,
                  "index" : 1
                }
              },
              "connections" : [ {
                "id" : "o0GjOO6U",
                "source" : "TestSubgraph_6Te##M6u9wRwV",
                "sourcePort" : "yydaZqGp",
                "target" : "Subgraph_5##AmqVQRor",
                "targetPort" : "RWeDDhTG"
              }, {
                "id" : "vJuDMAVp",
                "source" : "Subgraph_5##AmqVQRor",
                "sourcePort" : "ePgJZr7Z",
                "target" : "Reformat_7##pbXO8zZn",
                "targetPort" : "cZ6Sds5L"
              }, {
                "id" : "b7ktSD5v",
                "source" : "Reformat_7##pbXO8zZn",
                "sourcePort" : "nhtzrkif",
                "target" : "TestSubgraph_6Te##M6u9wRwV",
                "targetPort" : "ew3IYivY"
              } ],
              "ports" : {
                "inputs" : [ {
                  "id" : "ePgJZr7Z",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "c_tinyint",
                      "dataType" : {
                        "type" : "TinyInt"
                      }
                    }, {
                      "name" : "c_smallint",
                      "dataType" : {
                        "type" : "SmallInt"
                      }
                    }, {
                      "name" : "c_int",
                      "dataType" : {
                        "type" : "Integer"
                      }
                    }, {
                      "name" : "c_bigint",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "c_float",
                      "dataType" : {
                        "type" : "Float"
                      }
                    }, {
                      "name" : "c_double",
                      "dataType" : {
                        "type" : "Double"
                      }
                    }, {
                      "name" : "c_string",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "c_boolean",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    }, {
                      "name" : "c_array",
                      "dataType" : {
                        "type" : "Array",
                        "dataType" : {
                          "type" : "String"
                        }
                      }
                    }, {
                      "name" : "c_struct",
                      "dataType" : {
                        "type" : "Struct",
                        "fields" : [ {
                          "name" : "city",
                          "dataType" : {
                            "type" : "String"
                          }
                        }, {
                          "name" : "state",
                          "dataType" : {
                            "type" : "String"
                          }
                        }, {
                          "name" : "pin",
                          "dataType" : {
                            "type" : "Bigint"
                          }
                        } ]
                      }
                    }, {
                      "name" : "c_test",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "Filter_2"
                } ],
                "outputs" : [ {
                  "id" : "RWeDDhTG",
                  "schema" : {
                    "entityType" : "",
                    "providerType" : "Databricks",
                    "fields" : [ {
                      "name" : "c_tinyint",
                      "dataType" : {
                        "type" : "TinyInt"
                      }
                    }, {
                      "name" : "c_smallint",
                      "dataType" : {
                        "type" : "SmallInt"
                      }
                    }, {
                      "name" : "c_int",
                      "dataType" : {
                        "type" : "Integer"
                      }
                    }, {
                      "name" : "c_bigint",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    }, {
                      "name" : "c_float",
                      "dataType" : {
                        "type" : "Float"
                      }
                    }, {
                      "name" : "c_double",
                      "dataType" : {
                        "type" : "Double"
                      }
                    }, {
                      "name" : "c_string",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "c_boolean",
                      "dataType" : {
                        "type" : "Boolean"
                      }
                    }, {
                      "name" : "c_array",
                      "dataType" : {
                        "type" : "Array",
                        "dataType" : {
                          "type" : "String"
                        }
                      }
                    }, {
                      "name" : "c_struct",
                      "dataType" : {
                        "type" : "Struct",
                        "fields" : [ {
                          "name" : "city",
                          "dataType" : {
                            "type" : "String"
                          }
                        }, {
                          "name" : "state",
                          "dataType" : {
                            "type" : "String"
                          }
                        }, {
                          "name" : "pin",
                          "dataType" : {
                            "type" : "Bigint"
                          }
                        } ]
                      }
                    }, {
                      "name" : "c_test",
                      "dataType" : {
                        "type" : "String"
                      }
                    } ]
                  },
                  "slug" : "out"
                } ],
                "isCustomOutputSchema" : false,
                "autoUpdateOnRun" : false
              },
              "properties" : { },
              "canonical" : false,
              "index" : 1
            }
          },
          "connections" : [ {
            "id" : "AHYv3uxO",
            "source" : "Subgraph_5##AmqVQRor",
            "sourcePort" : "RWeDDhTG",
            "target" : "Subgraph_4##yGaAr0cb",
            "targetPort" : "Vml4dtj1"
          }, {
            "id" : "YcCL44XT",
            "source" : "Subgraph_4##yGaAr0cb",
            "sourcePort" : "XQPlJCyB",
            "target" : "Filter_2##h9xVAVBH",
            "targetPort" : "heAUDFPj"
          }, {
            "id" : "MbFv0YzD",
            "source" : "Filter_2##h9xVAVBH",
            "sourcePort" : "Q3J7vlun",
            "target" : "Subgraph_5##AmqVQRor",
            "targetPort" : "ePgJZr7Z"
          } ],
          "ports" : {
            "inputs" : [ {
              "id" : "XQPlJCyB",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                }, {
                  "name" : "c_test",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "env_uitesting_shared_child_model_1"
            } ],
            "outputs" : [ {
              "id" : "Vml4dtj1",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                }, {
                  "name" : "c_test",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "properties" : { },
          "canonical" : false,
          "index" : 1
        },
        "Limit_6##QRaHVJ2b" : {
          "id" : "Limit_6##QRaHVJ2b",
          "component" : "Limit",
          "metadata" : {
            "label" : "Limit_6",
            "phase" : 0,
            "isLabelGrayed" : false
          },
          "properties" : {
            "limit" : {
              "expression" : "10"
            }
          },
          "ports" : {
            "inputs" : [ {
              "id" : "u3jpnMx4",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                }, {
                  "name" : "c_test",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "in0"
            } ],
            "outputs" : [ {
              "id" : "yIVKD838",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                }, {
                  "name" : "c_test",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 2
        }
      },
      "connections" : [ {
        "id" : "D39jU1g9",
        "source" : "Limit_6##QRaHVJ2b",
        "sourcePort" : "yIVKD838",
        "target" : "Subgraph_2##UxrUlhgc",
        "targetPort" : "e7vuldox"
      }, {
        "id" : "dUiAnDaK",
        "source" : "env_uitesting_sh##J6e1VOkj",
        "sourcePort" : "gllhTdZV",
        "target" : "Subgraph_4##yGaAr0cb",
        "targetPort" : "XQPlJCyB"
      }, {
        "id" : "SsEZWcxq",
        "source" : "Subgraph_4##yGaAr0cb",
        "sourcePort" : "Vml4dtj1",
        "target" : "Limit_6##QRaHVJ2b",
        "targetPort" : "u3jpnMx4"
      } ],
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "e7vuldox",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : { },
      "canonical" : false,
      "index" : 32
    },
    "Reformat_1_2_1_1##xV44CKVh" : {
      "id" : "Reformat_1_2_1_1##xV44CKVh",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Reformat_1_2_1_1",
        "phase" : 0,
        "macroDependencies" : [ ],
        "isLabelGrayed" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "expressions" : [ {
          "expression" : {
            "expression" : "CAST(c_int AS STRING)"
          },
          "alias" : "customer_id"
        }, {
          "expression" : {
            "expression" : "c_string"
          },
          "alias" : "first_name"
        }, {
          "expression" : {
            "expression" : "c_string"
          },
          "alias" : "last_name"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "DTRud8rZ",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "jYGjECym",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 15
    },
    "Subgraph_9##TeAzZsuQ" : {
      "id" : "Subgraph_9##TeAzZsuQ",
      "component" : "Subgraph",
      "metadata" : {
        "label" : "Subgraph_9",
        "phase" : 0
      },
      "processes" : {
        "Reformat_1_2_1##w3YX9UCX" : {
          "id" : "Reformat_1_2_1##w3YX9UCX",
          "component" : "Reformat",
          "metadata" : {
            "label" : "Reformat_1_2_1",
            "phase" : 0,
            "macroDependencies" : [ ],
            "isLabelGrayed" : false
          },
          "properties" : {
            "columnsSelector" : [ ],
            "expressions" : [ {
              "expression" : {
                "expression" : "CAST(c_int AS STRING)"
              },
              "alias" : "customer_id"
            }, {
              "expression" : {
                "expression" : "c_string"
              },
              "alias" : "first_name"
            }, {
              "expression" : {
                "expression" : "c_string"
              },
              "alias" : "last_name"
            } ]
          },
          "ports" : {
            "inputs" : [ {
              "id" : "W72zMHfx",
              "schema" : {
                "entityType" : "",
                "providerType" : "databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                } ]
              },
              "slug" : "in0"
            } ],
            "outputs" : [ {
              "id" : "fR12qXg5",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "customer_id",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "first_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "last_name",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 0
        },
        "AllExSQL##XoJsNrxY" : {
          "id" : "AllExSQL##XoJsNrxY",
          "component" : "Reformat",
          "metadata" : {
            "label" : "AllExSQL",
            "phase" : 0,
            "macroDependencies" : [ ],
            "isLabelGrayed" : false
          },
          "properties" : {
            "columnsSelector" : [ ],
            "expressions" : [ {
              "expression" : {
                "expression" : "CAST(customer_id AS INT) > 5"
              }
            }, {
              "expression" : {
                "expression" : "CAST(customer_id AS INT) != 0"
              }
            }, {
              "expression" : {
                "expression" : "first_name LIKE '%A%'"
              }
            }, {
              "expression" : {
                "expression" : "((1 & 1) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "((2 | 2) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "10 * CAST(customer_id AS INT) == 20"
              }
            }, {
              "expression" : {
                "expression" : "last_name != first_name"
              }
            }, {
              "expression" : {
                "expression" : "(CAST(customer_id AS INT) BETWEEN 10 AND 20)"
              }
            }, {
              "expression" : {
                "expression" : "(ARRAY(10, 20, 30)[2] == 30)"
              }
            }, {
              "expression" : {
                "expression" : "(MAP(1, 'Hello', 2, 'World')[1] == 'Hello')"
              }
            }, {
              "expression" : {
                "expression" : "(10 ^ 20 == 50)"
              },
              "alias" : "d7"
            }, {
              "expression" : {
                "expression" : "(MAP('three', 3).four == NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(named_struct('a', 5, 'b', 'Spark').a == 5)"
              },
              "alias" : "d8"
            }, {
              "expression" : {
                "expression" : "(1 = 2 and 1 == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(1 >= 2 and 1 <= 2 and 1 != 3 or 2 > 4 or 4 < 5)"
              }
            }, {
              "expression" : {
                "expression" : "(\n  EXISTS(\n    ARRAY(1, NULL, 3), \n    x -> x % 2 == 0)\n)"
              },
              "alias" : "col22"
            }, {
              "expression" : {
                "expression" : "ilike('Spark', '_PARK')"
              },
              "alias" : "d81"
            }, {
              "expression" : {
                "expression" : "(named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))"
              }
            }, {
              "expression" : {
                "expression" : "(1 IS DISTINCT FROM 5)"
              }
            }, {
              "expression" : {
                "expression" : "('invalid' IS false)"
              }
            }, {
              "expression" : {
                "expression" : "isnull(51)"
              }
            }, {
              "expression" : {
                "expression" : "('t' IS NOT true)"
              },
              "alias" : "c46"
            }, {
              "expression" : {
                "expression" : "(1 <=> '1')"
              }
            }, {
              "expression" : {
                "expression" : "(1 <> CAST(customer_id AS INT))"
              }
            }, {
              "expression" : {
                "expression" : "(10 - 2 + 10 == 8)"
              }
            }, {
              "expression" : {
                "expression" : "(NOT true)"
              }
            }, {
              "expression" : {
                "expression" : "(false or true)"
              }
            }, {
              "expression" : {
                "expression" : "(2 % 0 == 0)"
              }
            }, {
              "expression" : {
                "expression" : "('Spark' || 'SQL' == 'SparkSQL')"
              }
            }, {
              "expression" : {
                "expression" : "(r'%SystemDrive%\\Users\\John' LIKE r'%System23Drive%\\\\Users%')"
              }
            }, {
              "expression" : {
                "expression" : "(r'%SystemDr12ive%\\Users\\John' RLIKE '%System23Drive%\\\\\\\\Users.*')"
              }
            }, {
              "expression" : {
                "expression" : "(regexp_like('%Syst2emDrive%\\\\Users\\\\John', '%SystemD545rive%\\\\\\\\Users.*'))"
              }
            }, {
              "expression" : {
                "expression" : "(2L / 2L == 10)"
              }
            }, {
              "expression" : {
                "expression" : "(~ 0 == -1)"
              }
            }, {
              "expression" : {
                "expression" : "(base64(aes_encrypt('Spark', 'abcdefghijklmnop')) == NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(CAST(aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop') AS STRING) == NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(ascii('234') == 234)"
              }
            }, {
              "expression" : {
                "expression" : "(base64('Spark SQL') == NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(bin(13) == NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(binary('Spark SQL') == NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(btrim('abcaabaSparkSQLabcaaba', 'abc') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(char(65) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(char_length('Spark SQL ') == 10)"
              }
            }, {
              "expression" : {
                "expression" : "(character_length('Spark SQL ') == 10)"
              }
            }, {
              "expression" : {
                "expression" : "(concat(customer_id, 'hello') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(concat_ws(',', 'Spark', ARRAY('S', 'Q', NULL, 'L'), NULL) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "contains('SparkSQL', 'Spork')"
              }
            }, {
              "expression" : {
                "expression" : "(crc32('Spark') > 0)"
              }
            }, {
              "expression" : {
                "expression" : "chr(65) != NULL"
              }
            }, {
              "expression" : {
                "expression" : "(3 ^ 5 == 6)"
              }
            }, {
              "expression" : {
                "expression" : "(hex(encode('Spark SQL', 'US-ASCII')) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "endswith('SparkSQL', 'SQL')"
              }
            }, {
              "expression" : {
                "expression" : "(find_in_set('ab', 'abc,b,ab,c,def') == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(format_number(12332.123456, 4) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(format_number(12332.123456, '#.###') == 10)"
              }
            }, {
              "expression" : {
                "expression" : "(format_string('Hello World %d %s', 100, 'days') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(hex('Spark SQL') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(r'%SystemDrive%\\Users\\John' LIKE '%SystemDrive%\\\\\\\\Users%')"
              }
            }, {
              "expression" : {
                "expression" : "(initcap('sPark sql') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(instr('SparkSQL', 'R') == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(lcase('LowerCase') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(LEFT('Spark SQL', 3) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(length('Spark SQL ') > 20)"
              }
            }, {
              "expression" : {
                "expression" : "(levenshtein('kitten', 'sitting') > 10)"
              }
            }, {
              "expression" : {
                "expression" : "(locate('bar', 'abcbarbar') > 2)"
              },
              "alias" : "col1201"
            }, {
              "expression" : {
                "expression" : "(locate('bar', 'abcbarbar', 5) > 2)"
              },
              "alias" : "col1202"
            }, {
              "expression" : {
                "expression" : "(lower('LowerCase') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(lpad('hi', 1, '??') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(hex(lpad(x'1020', 5, x'05')) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)"
              },
              "alias" : "col120"
            }, {
              "expression" : {
                "expression" : "(md5('Spark') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(octet_length('Spark SQL') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(parse_url('http://spark.apache.org/path?query=1', 'HOST') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(position('bar', 'abcbarbar') > 10)"
              }
            }, {
              "expression" : {
                "expression" : "(position('bar', 'abcbarbar', 5) > 5)"
              }
            }, {
              "expression" : {
                "expression" : "(printf('Hello World %d %s', 100, 'days') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(r'%SystemDarive%\\Users\\John' RLIKE r'%SystemDrive%\\\\Users.*')"
              }
            }, {
              "expression" : {
                "expression" : "(r'%System1Drive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')"
              }
            }, {
              "expression" : {
                "expression" : "(regexp_like('%SystemDa1rive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))"
              }
            }, {
              "expression" : {
                "expression" : "(regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) > 10)"
              }
            }, {
              "expression" : {
                "expression" : "(regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(regexp_replace('100-200', '(\\\\d+)', 'num') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(repeat('123', 2) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(replace('ABCabc', 'abc', 'DEF') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(reverse('Spark SQL') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(RIGHT('Spark SQL', 3) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(rpad('hi', 5, 'ab') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(hex(rpad(x'1020', 5, x'05')) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(rtrim('ab', 'SparkSQLabcaaba') != NULL)"
              },
              "alias" : "col121"
            }, {
              "expression" : {
                "expression" : "(sentences('Hi there! Good morning.', 'en', 'US') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(sha('Spark') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(sha1('Spark') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(sha2('Spark', 256) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(soundex('Miller') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(concat('1', space(2), '1') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(('->' || split_part('Hello,world,!', ',', 1) || '<-') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(('->' || split_part('', ',', 1) || '<-') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(('->' || split_part('Hello,World,!', ',', 0) || '<-') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(startswith('SparkSQL', 'Spark'))"
              }
            }, {
              "expression" : {
                "expression" : "(startswith(NULL, 'Spark'))"
              }
            }, {
              "expression" : {
                "expression" : "(substr('Spark SQL', 5, 1) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(substring_index('www.apache.org', '.', 2) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(CAST(to_binary('537061726B') AS STRING) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(CAST(to_binary('537061726B', 'hex') AS STRING) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)"
              },
              "alias" : "col50"
            }, {
              "expression" : {
                "expression" : "(translate('AaBbCc', 'abc', '123') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(ucase('SparkSql') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(CAST(unbase64('U3BhcmsgU1FM') AS STRING) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(decode(unhex('537061726B2053514C'), 'UTF-8') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(upper('SparkSql') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(10 / 2 == 5)"
              },
              "alias" : "d9"
            }, {
              "expression" : {
                "expression" : "((3 | 5) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "((DATE'2021-03-20' - INTERVAL '2' MONTH) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(10 - 2 + 2 == 4)"
              }
            }, {
              "expression" : {
                "expression" : "(2 % 1.8 == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(3 ^ 5 == 3)"
              }
            }, {
              "expression" : {
                "expression" : "(3 & 5 == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(3 * 2 == 2)"
              }
            }, {
              "expression" : {
                "expression" : "((INTERVAL '3' YEAR * 3) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(abs(-1) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(acos(1) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(acosh(1) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(asin(0) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(asinh(0) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(atan(0) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(atan2(0, 0) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(atanh(0) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(BIGINT(current_timestamp) > 1)"
              }
            }, {
              "expression" : {
                "expression" : "(bit_count(-1) > 1)"
              }
            }, {
              "expression" : {
                "expression" : "(bit_get(23Y, 1) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(bround(13.5, -1) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(round(13.5, -1) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(cbrt(27.0) == 3)"
              }
            }, {
              "expression" : {
                "expression" : "(ceil(3345.1, -2) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(ceiling(5.4) == 6)"
              }
            }, {
              "expression" : {
                "expression" : "(ceiling(3345.1, -2) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(conv('100', 2, 10) == 4)"
              }
            }, {
              "expression" : {
                "expression" : "(conv('FFFFFFFFFFFFFFFF', 16, 10) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(cos(pi()) == -1)"
              }
            }, {
              "expression" : {
                "expression" : "(cosh(0) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(cot(1) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(csc(pi() / 2) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(decimal('5.2') == 5)"
              },
              "alias" : "d10"
            }, {
              "expression" : {
                "expression" : "(degrees(3.141592653589793) == 10)"
              }
            }, {
              "expression" : {
                "expression" : "(double('5.2') == 4)"
              }
            }, {
              "expression" : {
                "expression" : "(e() == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(exp(1) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(expm1(0) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(factorial(2) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(FLOAT('5.2') == 5)"
              },
              "alias" : "d11"
            }, {
              "expression" : {
                "expression" : "(floor(-0.1) == -1)"
              }
            }, {
              "expression" : {
                "expression" : "(floor(3345.1, -2) == 20)"
              }
            }, {
              "expression" : {
                "expression" : "(getbit(23Y, 0) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(hypot(3, 4) == 5)"
              },
              "alias" : "d12"
            }, {
              "expression" : {
                "expression" : "(INT(-5.6) == 5)"
              },
              "alias" : "d13"
            }, {
              "expression" : {
                "expression" : "(isnan(CAST('NaN' AS double)))"
              }
            }, {
              "expression" : {
                "expression" : "(ln(1) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(log(10, 100) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(log1p(0) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(log2(2) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(log10(10) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(nanvl(CAST('NaN' AS DOUBLE), 123) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(negative(1) == -1)"
              }
            }, {
              "expression" : {
                "expression" : "(pmod(-10, 3) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(positive(-1) == -1)"
              }
            }, {
              "expression" : {
                "expression" : "(pow(2, 3) * power(2, 3) == 8)"
              }
            }, {
              "expression" : {
                "expression" : "(radians(180) == 10)"
              }
            }, {
              "expression" : {
                "expression" : "(rand(0) * random(0) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(randn(0) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(rint(12.3456) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(round(2.5, 0) == 3)"
              }
            }, {
              "expression" : {
                "expression" : "(sec(pi()) == -1)"
              }
            }, {
              "expression" : {
                "expression" : "(sin(0) == 0)"
              }
            }, {
              "expression" : {
                "expression" : "(shiftleft(2, 1) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(shiftright(4, 1) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(shiftrightunsigned(4, 1) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(sign(40) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(signum(40) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(sinh(0) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(smallint(-5.6) == 5)"
              }
            }, {
              "expression" : {
                "expression" : "(sqrt(4) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(tan(0) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(tanh(0) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(tinyint('12') * tinyint(5.4) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(try_add(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(try_add(1, 2) == 3)"
              }
            }, {
              "expression" : {
                "expression" : "(try_divide(3, 2) == 3)"
              }
            }, {
              "expression" : {
                "expression" : "(try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)"
              },
              "alias" : "col110"
            }, {
              "expression" : {
                "expression" : "(try_subtract(1, 2) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)"
              },
              "alias" : "col111"
            }, {
              "expression" : {
                "expression" : "(try_subtract(-128Y, 1Y) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2) == 3)"
              }
            }, {
              "expression" : {
                "expression" : "(width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) == 10)"
              }
            }, {
              "expression" : {
                "expression" : "(ARRAY(10, 20, 30) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(\n  (\n    aggregate(\n      ARRAY(1, 2, 3), \n      0, \n      (acc, x) -> acc + x, \n      acc -> acc * 10)\n  ) == 1\n)"
              },
              "alias" : "col21"
            }, {
              "expression" : {
                "expression" : "(array_contains(ARRAY(1, 2, 3), 2))"
              }
            }, {
              "expression" : {
                "expression" : "(array_distinct(ARRAY(1, 2, 3, NULL, 3)) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(array_except(ARRAY(1, 2, 2, 3), ARRAY(1, 1, 3, 5)) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(array_intersect(ARRAY(1, 2, 3), ARRAY(1, 3, 3, 5)) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(array_join(ARRAY('hello', 'world'), ',') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(array_join(ARRAY('hello', NULL, 'world'), ',', '*') == NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(array_max(ARRAY(1, 20, NULL, 3)) > 10)"
              }
            }, {
              "expression" : {
                "expression" : "(array_min(ARRAY(1, 20, NULL, 3)) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(array_position(ARRAY(3, 2, 1, 4, 1), 1) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(array_remove(ARRAY(1, 2, 3, NULL, 3, 2), 3) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(array_repeat('123', 2) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(array_size(ARRAY(1, NULL, 3, NULL)) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(array_sort(ARRAY('bc', 'ab', 'dc')) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(array_union(ARRAY(1, 2, 2, 3), ARRAY(1, 3, 5)) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(arrays_overlap(ARRAY(1, 2, NULL, 3), ARRAY(NULL, 4, 5)) == NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(arrays_zip(ARRAY(1, 2), ARRAY('shoe', 'string', 'budget')) == NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(cardinality(ARRAY('b', 'd', 'c', 'a')) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(concat(ARRAY(1, 2, 3), ARRAY(4, 5), ARRAY(6)) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(element_at(MAP(1, 'a', 2, 'b'), 2) == NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(\n  EXISTS(\n    ARRAY(1, 2, 3), \n    x -> x % 2 == 0)\n)"
              },
              "alias" : "col20"
            }, {
              "expression" : {
                "expression" : "(\n  EXISTS(\n    ARRAY(0, NULL, 2, 3, NULL), \n    x -> x IS NULL)\n)"
              },
              "alias" : "col19"
            }, {
              "expression" : {
                "expression" : "(\n  filter(\n    ARRAY(1, 2, 3), \n    x -> x % 2 == 1) != NULL\n)"
              },
              "alias" : "col18"
            }, {
              "expression" : {
                "expression" : "(flatten(ARRAY(ARRAY(1, 2), ARRAY(3, 4))) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(\n  forall(\n    ARRAY(1, 2, 3), \n    x -> x % 2 == 0) == NULL\n)"
              },
              "alias" : "col17"
            }, {
              "expression" : {
                "expression" : "(reverse(ARRAY(2, 1, 4, 3)) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(sequence(5, 1) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(cardinality(ARRAY('b', 'd', 'c', 'a')) == 10)"
              }
            }, {
              "expression" : {
                "expression" : "(slice(ARRAY(1, 2, 3, 4), 2, 2) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(sort_array(ARRAY('b', 'd', NULL, 'c', 'a'), true) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(\n  transform(\n    ARRAY(1, 2, 3), \n    x -> x + 1) != NULL\n)"
              },
              "alias" : "col16"
            }, {
              "expression" : {
                "expression" : "(try_element_at(ARRAY(1, 2, 3), 2) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(\n  zip_with(\n    ARRAY('a', 'b', 'c'), \n    ARRAY('d', 'e', 'f'), \n    (x, y) -> concat(x, y)) != NULL\n)"
              },
              "alias" : "col15"
            }, {
              "expression" : {
                "expression" : "(MAP(1, 'Hello', 2, 'World')[1] != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(cardinality(MAP('a', 1, 'b', 2)) == 2)"
              },
              "alias" : "col67"
            }, {
              "expression" : {
                "expression" : "(element_at(MAP(1, 'a', 2, 'b'), 3) == NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(MAP(1.0, '2', 3.0, '4') IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(map_concat(MAP(1, 'a', 2, 'b'), MAP(3, 'c')) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(map_contains_key(MAP(1, 'a', 2, 'b'), 2))"
              },
              "alias" : "col122"
            }, {
              "expression" : {
                "expression" : "(map_entries(MAP(1, 'a', 2, 'b')) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(\n  map_filter(\n    MAP(1, 0, 2, 2, 3, -1), \n    (k, v) -> k > v) IS NOT NULL\n)"
              },
              "alias" : "col14"
            }, {
              "expression" : {
                "expression" : "(map_from_arrays(ARRAY(1.0, 3.0), ARRAY('2', '4')) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(map_from_entries(ARRAY(STRUCT(1, 'a'), STRUCT(2, 'b'))) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(map_keys(MAP(1, 'a', 2, 'b')) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(map_values(MAP(1, 'a', 2, 'b')) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(\n  map_zip_with(\n    MAP(1, 'a', 2, 'b'), \n    MAP(1, 'x', 2, 'y'), \n    (k, v1, v2) -> concat(v1, v2)) IS NOT NULL\n)"
              },
              "alias" : "col13"
            }, {
              "expression" : {
                "expression" : "(cardinality(MAP('a', 1, 'b', 2)) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(str_to_map('a:1,b:2,c:3', ',', ':') IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(\n  transform_keys(\n    map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n    (k, v) -> k + 1) IS NOT NULL\n)"
              },
              "alias" : "col12"
            }, {
              "expression" : {
                "expression" : "(\n  transform_values(\n    map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n    (k, v) -> k + v) IS NOT NULL\n)"
              },
              "alias" : "col11"
            }, {
              "expression" : {
                "expression" : "(try_element_at(MAP(1, 'a', 2, 'b'), 2) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "((INTERVAL '3:15' HOUR TO MINUTE / 3) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)"
              },
              "alias" : "col123"
            }, {
              "expression" : {
                "expression" : "(typeof(current_timestamp - (current_date + INTERVAL '1' DAY)) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)"
              },
              "alias" : "col124"
            }, {
              "expression" : {
                "expression" : "((INTERVAL '3' YEAR * 3) != NULL)"
              },
              "alias" : "col100"
            }, {
              "expression" : {
                "expression" : "(add_months('2016-08-31', -6) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(current_date() != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(current_timestamp() != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(current_timezone() != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(DATE('2021-03-21') != NULL)"
              },
              "alias" : "col112"
            }, {
              "expression" : {
                "expression" : "(date_add('2016-07-30', 1) != NULL)"
              },
              "alias" : "col122121d"
            }, {
              "expression" : {
                "expression" : "(date_format('2016-04-08', 'y') == 2016)"
              },
              "alias" : "col122121"
            }, {
              "expression" : {
                "expression" : "(date_from_unix_date(1) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(date_sub('2016-07-30', 1) != NULL)"
              },
              "alias" : "col122121gh"
            }, {
              "expression" : {
                "expression" : "(date_trunc('YEAR', '2015-03-05T09:32:05.359') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(datediff('2009-07-31', '2009-07-30') == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(day('2009-07-30') == 30)"
              }
            }, {
              "expression" : {
                "expression" : "(dayofmonth('2009-07-30') == 30)"
              }
            }, {
              "expression" : {
                "expression" : "(dayofweek('2009-07-30') == 5)"
              },
              "alias" : "d14"
            }, {
              "expression" : {
                "expression" : "(dayofyear('2016-04-09') == 100)"
              },
              "alias" : "col16121"
            }, {
              "expression" : {
                "expression" : "(EXTRACT(SECONDS FROM INTERVAL '5:00:30.001' HOUR TO SECOND) == 30)"
              }
            }, {
              "expression" : {
                "expression" : "(EXTRACT(WEEK FROM TIMESTAMP'2019-08-12 01:00:00.123456') == 33)"
              }
            }, {
              "expression" : {
                "expression" : "(from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(from_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(from_utc_timestamp('2016-08-31', 'Asia/Seoul') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(hour('2009-07-30 12:58:59') == 10)"
              }
            }, {
              "expression" : {
                "expression" : "(last_day('2009-01-12') IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(make_date(2013, 7, 15) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(make_ym_interval(100, 5) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(minute('2009-07-30 12:58:59') == 58)"
              },
              "alias" : "d15"
            }, {
              "expression" : {
                "expression" : "(month('2016-07-30') == 7)"
              },
              "alias" : "col122121hjh"
            }, {
              "expression" : {
                "expression" : "(months_between('1997-02-28 10:30:00', '1996-10-30') == 3)"
              }
            }, {
              "expression" : {
                "expression" : "(months_between('1997-02-28 10:30:00', '1996-10-30', false) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(next_day('2015-01-14', 'TU') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(quarter('2016-08-31') == 3)"
              }
            }, {
              "expression" : {
                "expression" : "(second('2009-07-30 12:58:59') == 59)"
              },
              "alias" : "d16"
            }, {
              "expression" : {
                "expression" : "(TIMESTAMP(123) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(TIMESTAMP('2020-04-30 12:25:13.45') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(timestamp_micros(1230219000123123) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(timestamp_millis(1230219000123) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(timestamp_seconds(1230219000) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(to_date('2016-12-31', 'yyyy-MM-dd') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(to_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(trunc('2015-10-27', 'YEAR') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(trunc('2019-08-04', 'quarter') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(try_add(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(try_add(DATE'2021-03-31', INTERVAL '1' MONTH) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "((INTERVAL '3' YEAR * 3) != NULL)"
              },
              "alias" : "col101"
            }, {
              "expression" : {
                "expression" : "(try_subtract(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(unix_date(DATE('1970-01-02')) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(unix_micros(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(unix_millis(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 1)"
              },
              "alias" : "col1123423"
            }, {
              "expression" : {
                "expression" : "(weekday(DATE'2009-07-30') == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(EXTRACT(DAYOFWEEK_ISO FROM DATE'2009-07-30') == 4)"
              }
            }, {
              "expression" : {
                "expression" : "(weekofyear('2008-02-20') == 8)"
              }
            }, {
              "expression" : {
                "expression" : "(year('2016-07-30') == 2016)"
              },
              "alias" : "col122121rtyr"
            }, {
              "expression" : {
                "expression" : "(ARRAY(1, 2, 3) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(BIGINT('5') == 5)"
              },
              "alias" : "d3"
            }, {
              "expression" : {
                "expression" : "(binary('Spark SQL') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(BOOLEAN(1))"
              }
            }, {
              "expression" : {
                "expression" : "(CAST(5.6 AS DECIMAL (2, 0)) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(CAST(INTERVAL '1-2' YEAR TO MONTH AS INTEGER) == 12)"
              }
            }, {
              "expression" : {
                "expression" : "(DATE('2021-03-21') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(decimal('5.2') == 5)"
              },
              "alias" : "d1"
            }, {
              "expression" : {
                "expression" : "(double('5.2') / 2 == 5)"
              },
              "alias" : "d2"
            }, {
              "expression" : {
                "expression" : "(FLOAT('5.2') / 2 == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(INT('5') == 5)"
              },
              "alias" : "d4"
            }, {
              "expression" : {
                "expression" : "(make_date(2013, 7, 15) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(make_dt_interval(100, 13) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(make_ym_interval(100, 5) == NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(MAP(1.0, '2', 3.0, '4') IS NOT NULL)"
              },
              "alias" : "col113"
            }, {
              "expression" : {
                "expression" : "(named_struct('a', 1, 'b', 2, 'c', 3) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(smallint('5') == 5)"
              },
              "alias" : "d5"
            }, {
              "expression" : {
                "expression" : "(STRUCT(1, 2, 3) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(tinyint('12') == 12)"
              }
            }, {
              "expression" : {
                "expression" : "(TIMESTAMP('2020-04-30 12:25:13.45') != NULL)"
              },
              "alias" : "col114"
            }, {
              "expression" : {
                "expression" : "(to_date('2016-12-31', 'yyyy-MM-dd') != NULL)"
              },
              "alias" : "col115"
            }, {
              "expression" : {
                "expression" : "(to_timestamp('2016-12-31 00:12:00') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(from_csv('1, 0.8', 'a INT, b DOUBLE') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(schema_of_csv('1,abc') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') == 5)"
              }
            }, {
              "expression" : {
                "expression" : "(json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(schema_of_json('[{\"col\":01}]', MAP('allowNumericLeadingZeros', 'true')) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(to_json(named_struct('a', 1, 'b', 2)) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(to_json(MAP(named_struct('a', 1), named_struct('b', 2))) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(to_json(ARRAY((MAP('a', 1)))) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(xpath_boolean('<a><b>1</b></a>', 'a/b'))"
              }
            }, {
              "expression" : {
                "expression" : "(xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)"
              },
              "alias" : "col117"
            }, {
              "expression" : {
                "expression" : "(xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 3)"
              }
            }, {
              "expression" : {
                "expression" : "(xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(\n  assert_true(\n    0 < 1) == NULL\n)"
              },
              "alias" : "col10"
            }, {
              "expression" : {
                "expression" : "(\n  (\n    CASE\n      WHEN 1 > 0\n        THEN 1\n      WHEN 2 > 0\n        THEN 2.0\n      ELSE 1.2\n    END\n  ) == 1\n)"
              },
              "alias" : "col9"
            }, {
              "expression" : {
                "expression" : "(\n  (\n    CASE 3\n      WHEN 1\n        THEN 'A'\n      WHEN 2\n        THEN 'B'\n      WHEN 3\n        THEN 'C'\n    END\n  ) != NULL\n)"
              },
              "alias" : "col8"
            }, {
              "expression" : {
                "expression" : "(coalesce(2, 5 / 0) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(current_catalog() != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(current_database() != NULL)"
              },
              "alias" : "c21543123d"
            }, {
              "expression" : {
                "expression" : "(current_user() != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(elt(1, 'scala', 'java') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(greatest(10, 9, 2, 4, 3) == 10)"
              }
            }, {
              "expression" : {
                "expression" : "(hash('Spark', ARRAY(123), 2) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(\n  if(\n    1 < 2, \n    'a', \n    'b') != NULL\n)"
              },
              "alias" : "col7"
            }, {
              "expression" : {
                "expression" : "(ifnull(NULL, ARRAY('2')) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(isnull(1))"
              }
            }, {
              "expression" : {
                "expression" : "(isnotnull(1))"
              }
            }, {
              "expression" : {
                "expression" : "(least(10, 9, 2, 4, 3) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(monotonically_increasing_id() > 10)"
              }
            }, {
              "expression" : {
                "expression" : "(nullif(2, 2) == NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(nvl(NULL, 2) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(nvl2(NULL, 2, 1) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(typeof(1) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(uuid() != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(xxhash64('Spark', ARRAY(123), 2) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "('20'::INTEGER == 20)"
              }
            }, {
              "expression" : {
                "expression" : "like('Spark', '_park')"
              },
              "alias" : "d866"
            }, {
              "expression" : {
                "expression" : "('Spark' LIKE SOME('_park', '_ock'))"
              },
              "alias" : "d889"
            }, {
              "expression" : {
                "expression" : "(bitmap_count(x'00') == 10)"
              }
            }, {
              "expression" : {
                "expression" : "(charindex('bar', 'abcbarbar') == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(decode(x'FEFF0053007000610072006B002000530051004C', 'UTF-16') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(like('Spark', '_park'))"
              },
              "alias" : "d8123"
            }, {
              "expression" : {
                "expression" : "(len('Spark SQL ') > 10)"
              }
            }, {
              "expression" : {
                "expression" : "(levenshtein('kitten', 'sitting', 4) > 10)"
              }
            }, {
              "expression" : {
                "expression" : "(('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(mask('AaBb123-&^ASDXYZ921312asd', 'Z', 'z', '9', 'X') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(mask('AaBb123-&^ASDXYZ921312asd', lowerChar => 'z', upperChar => 'X') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(mask('AaBb123-&ASDXYZ921312asd', NULL, NULL, NULL, NULL) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(overlay('Spark SQL' PLACING '_' FROM 6) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(overlay('Spark SQL' PLACING 'tructured' FROM 2 FOR 4) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(overlay(encode('Spark SQL', 'utf-8') PLACING encode('_', 'utf-8') FROM 6) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(position('bar' IN 'abcbarbar') > 2)"
              }
            }, {
              "expression" : {
                "expression" : "(regexp_count('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en') > 2)"
              }
            }, {
              "expression" : {
                "expression" : "(regexp_instr('Mary had a little lamb', NULL) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(regexp_substr(NULL, 'Ste(v|ph)en') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(rtrim('ab', 'SparkSQLabcaaba') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(STRING(4) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(substr('Spark SQL', -3) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(substr('Spark SQL' FROM 5 FOR 1) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(substr('Spark SQL' FROM -3) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(to_char(DATE'2016-04-08', 'y') != NULL)"
              },
              "alias" : "col11112"
            }, {
              "expression" : {
                "expression" : "(to_char(encode('abc', 'utf-8'), 'utf-8') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(to_varchar(454, '999') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(to_varchar(DATE'2016-04-08', 'y') != NULL)"
              },
              "alias" : "col1567812"
            }, {
              "expression" : {
                "expression" : "(to_varchar(x'537061726b2053514c', 'hex') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(TRIM( 'SL' FROM 'SSparkSQLS') != NULL)"
              },
              "alias" : "col15678121"
            }, {
              "expression" : {
                "expression" : "(TRIM(BOTH 'SL' FROM 'SSparkSQLS') != NULL)"
              },
              "alias" : "col15678123"
            }, {
              "expression" : {
                "expression" : "(TRIM(LEADING 'SL' FROM 'SSparkSQLS') != NULL)"
              },
              "alias" : "col15678125"
            }, {
              "expression" : {
                "expression" : "(TRIM(TRAILING 'SL' FROM 'SSparkSQLS') != NULL)"
              },
              "alias" : "col15678127"
            }, {
              "expression" : {
                "expression" : "(\n  CAST(try_aes_decrypt(\n    unbase64('MTIzNDU2Nzg5MDEyMdXvR41sJqwZ6hnTU8FRTTtXbL8yeChIZA=='), \n    '1234567890abcdef', \n    'GCM', \n    'DEFAULT', \n    'Some AAD') AS STRING) != NULL\n)"
              },
              "alias" : "col6"
            }, {
              "expression" : {
                "expression" : "(url_decode('http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(url_encode('http://spark.apache.org/path?query=1') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)"
              },
              "alias" : "col125"
            }, {
              "expression" : {
                "expression" : "((TIMESTAMP'2021-03-20 12:15:29' + INTERVAL '3' SECOND) != NULL)"
              },
              "alias" : "col156781254"
            }, {
              "expression" : {
                "expression" : "(bit_reverse(-1) == -1)"
              }
            }, {
              "expression" : {
                "expression" : "(bitmap_bit_position(-32768) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(bitmap_bucket_number(-32768) == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(MOD(2, 1.8) == 2)"
              }
            }, {
              "expression" : {
                "expression" : "(array_append(ARRAY(1, 2, 3), 0) == NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(array_compact(ARRAY(1, 2, NULL, 3, NULL, 3)) == NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(array_insert(ARRAY('a', 'b', 'c'), 1, 'z') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(array_prepend(ARRAY(1, 2, 3), 0) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(get(ARRAY(1, 2, 3), 2) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(\n  reduce(\n    ARRAY(1, 2, 3), \n    0, \n    (acc, x) -> acc + x) == 2\n)"
              },
              "alias" : "col5"
            }, {
              "expression" : {
                "expression" : "(shuffle(ARRAY(1, 20, 3, 5)) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(map_contains_key(MAP(1, 'a', 2, 'b'), 2))"
              }
            }, {
              "expression" : {
                "expression" : "((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(date_diff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(date_part('SECONDS', TIMESTAMP'2019-10-01 00:00:01.000001') == 1)"
              }
            }, {
              "expression" : {
                "expression" : "(date_part('Week', TIMESTAMP'2019-08-12 01:00:00.123456') == 33)"
              }
            }, {
              "expression" : {
                "expression" : "(dateadd('2016-07-30', 1) != NULL)"
              },
              "alias" : "col122121a1"
            }, {
              "expression" : {
                "expression" : "(dateadd(MICROSECOND, 5, TIMESTAMP'2022-02-28 00:00:00') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(datediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 11:59:59') == 0)"
              }
            }, {
              "expression" : {
                "expression" : "(make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(make_timestamp(2014, 12, 28, 6, 30, 45.887, 'CET') IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(now() != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(timediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)"
              },
              "alias" : "c45fg6789hgf1"
            }, {
              "expression" : {
                "expression" : "(timestampdiff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)"
              },
              "alias" : "c45fg6789hgf"
            }, {
              "expression" : {
                "expression" : "(to_unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 100)"
              },
              "alias" : "c45fg6789hgf2"
            }, {
              "expression" : {
                "expression" : "(try_to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(make_interval(100, 11) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(STRING(5) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(to_char(454, '000.00') != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(to_varchar(454, '999') IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(from_json('{\"a\":1, \"b\":0.8}', 'a INT, b DOUBLE') IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(get_json_object('{\"a\":\"b\"}', '$.a') IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), MAP('timestampFormat', 'dd/MM/yyyy')) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(to_csv(named_struct('a', 1, 'b', 2)) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(from_xml('<p><time>26/08/2015</time></p>', 'time Timestamp', MAP('timestampFormat', 'dd/MM/yyyy')) != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(schema_of_xml('<p><a attr=\"2\">1</a><a>3</a></p>', MAP('excludeAttribute', 'true')) IS NOT NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(current_metastore() != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(current_schema() != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(current_version() != NULL)"
              }
            }, {
              "expression" : {
                "expression" : "(equal_null(2, 2))"
              }
            }, {
              "expression" : {
                "expression" : "(\n  iff(\n    1 < 2, \n    'a', \n    'b') == 'a'\n)"
              },
              "alias" : "col4"
            }, {
              "expression" : {
                "expression" : "(is_account_group_member('admins'))"
              }
            }, {
              "expression" : {
                "expression" : "(is_member('admins'))"
              },
              "alias" : "cold1d1"
            }, {
              "expression" : {
                "expression" : "(luhn_check('12345') == NULL)"
              },
              "alias" : "cold13412asd"
            }, {
              "expression" : {
                "expression" : "(user() != NULL)"
              },
              "alias" : "cold13423423"
            }, {
              "expression" : {
                "expression" : "(h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0) != NULL)"
              },
              "alias" : "cold1f4"
            }, {
              "expression" : {
                "expression" : "(h3_coverash3string('{\"type\":\"LineString\",\"coordinates\":[[-122.4194,37.7749],[-118.2437,34.0522],[-74.0060,40.7128]]}', 1) != NULL)"
              },
              "alias" : "cold1asd"
            }, {
              "expression" : {
                "expression" : "(h3_longlatash3(-122.4783, 37.8199, 13) > 0)"
              },
              "alias" : "cold1asd12"
            }, {
              "expression" : {
                "expression" : "(h3_longlatash3string(-122.4783, 37.8199, 13) != NULL)"
              },
              "alias" : "cold1das122"
            }, {
              "expression" : {
                "expression" : "(h3_pointash3('POINT(-122.4783 37.8199)', 13) > 0)"
              },
              "alias" : "cold1"
            }, {
              "expression" : {
                "expression" : "(h3_pointash3string('{\"type\":\"Point\",\"coordinates\":[]}', 15) == NULL)"
              },
              "alias" : "cold1test1"
            }, {
              "expression" : {
                "expression" : "(h3_pointash3string('POINT(-122.4783 37.8199)', 13) != NULL)"
              },
              "alias" : "cold1test2"
            }, {
              "expression" : {
                "expression" : "(\n  h3_polyfillash3(\n    unhex(\n      '0103000000010000000400000050fc1873d79a5ec0d0d556ec2fe342404182e2c7988f5dc0f46c567dae064140aaf1d24d628052c05e4bc8073d5b444050fc1873d79a5ec0d0d556ec2fe34240'), \n    2) != NULL\n)"
              },
              "alias" : "col3455"
            }, {
              "expression" : {
                "expression" : "(h3_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)"
              },
              "alias" : "cold1asd342346"
            }, {
              "expression" : {
                "expression" : "(h3_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)"
              },
              "alias" : "cold1j"
            }, {
              "expression" : {
                "expression" : "(h3_try_polyfillash3('Not-a-valid-rep', 2) == NULL)"
              },
              "alias" : "cold1jk"
            }, {
              "expression" : {
                "expression" : "(h3_try_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)"
              },
              "alias" : "cold1jk1"
            }, {
              "expression" : {
                "expression" : "(h3_try_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)"
              },
              "alias" : "cold1ghj"
            }, {
              "expression" : {
                "expression" : "(h3_boundaryasgeojson('8009fffffffffff') != NULL)"
              },
              "alias" : "cold1qwe"
            }, {
              "expression" : {
                "expression" : "(h3_boundaryasgeojson(599686042433355775) != NULL)"
              },
              "alias" : "cold1qweqwe"
            }, {
              "expression" : {
                "expression" : "(hex(h3_boundaryaswkb(599686042433355775)) != NULL)"
              },
              "alias" : "cold1qweq123"
            }, {
              "expression" : {
                "expression" : "(h3_boundaryaswkt(599686042433355775) != NULL)"
              },
              "alias" : "cold112sas"
            }, {
              "expression" : {
                "expression" : "(h3_centerasgeojson(599686042433355775) != NULL)"
              },
              "alias" : "cold1qwe234"
            }, {
              "expression" : {
                "expression" : "(hex(h3_centeraswkb('8009fffffffffff')) == NULL)"
              },
              "alias" : "cold1dasd3456456"
            }, {
              "expression" : {
                "expression" : "(h3_centeraswkt('8009fffffffffff') != NULL)"
              },
              "alias" : "cold1sdf56456"
            }, {
              "expression" : {
                "expression" : "(h3_h3tostring(599686042433355775) != NULL)"
              },
              "alias" : "cold1sdf43534523"
            }, {
              "expression" : {
                "expression" : "(h3_stringtoh3('85283473fffffff') == NULL)"
              },
              "alias" : "cold1dasd56346435234"
            }, {
              "expression" : {
                "expression" : "(h3_ischildof('88283471b9fffff', '85283473fffffff'))"
              },
              "alias" : "cold1dasd23414123"
            }, {
              "expression" : {
                "expression" : "(h3_ispentagon(590112357393367039))"
              },
              "alias" : "cold1adsasd123412312"
            }, {
              "expression" : {
                "expression" : "(h3_isvalid('85283473fffffff'))"
              },
              "alias" : "cold1cold1adsasd123412312"
            }, {
              "expression" : {
                "expression" : "(h3_try_validate(590112357393367039) != NULL)"
              },
              "alias" : "cold1cold12"
            }, {
              "expression" : {
                "expression" : "(h3_validate(590112357393367039) != NULL)"
              },
              "alias" : "cold1cold15"
            }, {
              "expression" : {
                "expression" : "(h3_hexring(599686042433355775, 1) != NULL)"
              },
              "alias" : "cold1cold17"
            }, {
              "expression" : {
                "expression" : "(h3_kring(599686042433355775, 1) != NULL)"
              },
              "alias" : "cold1cold1as"
            }, {
              "expression" : {
                "expression" : "(h3_kringdistances(599686042433355775, 1) != NULL)"
              },
              "alias" : "cold1cold1121"
            }, {
              "expression" : {
                "expression" : "(h3_distance(599686030622195711, 599686015589810175) == 2)"
              },
              "alias" : "cold1657456cold1yui"
            }, {
              "expression" : {
                "expression" : "(h3_maxchild(599686042433355775, 10) != NULL)"
              },
              "alias" : "cold14565cold1s254fg"
            }, {
              "expression" : {
                "expression" : "(h3_minchild(599686042433355775, 10) != NULL)"
              },
              "alias" : "cold1345cold1dsa23"
            }, {
              "expression" : {
                "expression" : "(h3_resolution(599686042433355775) == 5)"
              },
              "alias" : "d6cold1345cold1dsa23"
            }, {
              "expression" : {
                "expression" : "(h3_tochildren(599686042433355775, 6) != NULL)"
              },
              "alias" : "cold11cold1345cold1dsa231"
            }, {
              "expression" : {
                "expression" : "(h3_toparent(599686042433355775, 0) != NULL)"
              },
              "alias" : "cold1cold1345cold1dsa23232"
            }, {
              "expression" : {
                "expression" : "(\n  h3_compact(\n    ARRAY(\n      599686042433355775, \n      599686030622195711, \n      599686044580839423, \n      599686038138388479, \n      599686043507097599, \n      599686015589810175, \n      599686014516068351, \n      599686034917163007, \n      599686029548453887, \n      599686032769679359, \n      599686198125920255, \n      599686040285872127, \n      599686041359613951, \n      599686039212130303, \n      599686023106002943, \n      599686027400970239, \n      599686013442326527, \n      599686012368584703, \n      599686018811035647)) != NULL\n)"
              },
              "alias" : "col2"
            }, {
              "expression" : {
                "expression" : "(\n  h3_uncompact(\n    ARRAY(\n      599686030622195711, \n      599686015589810175, \n      599686014516068351, \n      599686034917163007, \n      599686029548453887, \n      599686032769679359, \n      599686198125920255, \n      599686023106002943, \n      599686027400970239, \n      599686013442326527, \n      599686012368584703, \n      599686018811035647, \n      595182446027210751), \n    5) != NULL\n)"
              },
              "alias" : "col1"
            } ]
          },
          "ports" : {
            "inputs" : [ {
              "id" : "VA2EM5rW",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "customer_id",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "first_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "last_name",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "Reformat_1_2"
            } ],
            "outputs" : [ {
              "id" : "W8IZW9ys",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "(CAST(customer_id AS INT) > 5)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (CAST(customer_id AS INT) = 0))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "first_name LIKE %A%",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((1 & 1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((2 | 2) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((10 * CAST(customer_id AS INT)) = 20)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (last_name = first_name))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((CAST(customer_id AS INT) >= 10) AND (CAST(customer_id AS INT) <= 20))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(array(10, 20, 30)[2] = 30)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map(1, Hello, 2, World)[1] = Hello)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d7",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map(three, 3)[four] = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d8",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((1 = 2) AND (1 = 2))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(((((1 >= 2) AND (1 <= 2)) AND (NOT (1 = 3))) OR (2 > 4)) OR (4 < 5))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col22",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d81",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(named_struct(a, 1, b, 2) IN (named_struct(a, 1, b, 1), named_struct(a, 1, b, 3)))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (1 <=> 5))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(invalid <=> false)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(51 IS NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c46",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(1 <=> 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (1 = CAST(customer_id AS INT)))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(((10 - 2) + 10) = 8)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT true)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(false OR true)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((2 % 0) = 0)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(concat(Spark, SQL) = SparkSQL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "%SystemDrive%\\Users\\John LIKE %System23Drive%\\\\Users%",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "RLIKE(%SystemDr12ive%\\Users\\John, %System23Drive%\\\\Users.*)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "REGEXP_LIKE(%Syst2emDrive%\\Users\\John, %SystemD545rive%\\\\Users.*)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((2 / 2) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(~0 = -1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(base64(aes_encrypt(Spark, abcdefghijklmnop, GCM, DEFAULT, , )) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(CAST(aes_decrypt(unbase64(4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn), abcdefghijklmnop, GCM, DEFAULT, ) AS STRING) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ascii(234) = 234)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(base64(Spark SQL) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(bin(13) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(Spark SQL = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (btrim(abcaabaSparkSQLabcaaba, abc) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (char(65) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(char_length(Spark SQL ) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(character_length(Spark SQL ) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (concat(customer_id, hello) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (concat_ws(,, Spark, array(S, Q, NULL, L), NULL) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "contains(SparkSQL, Spork)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(crc32(Spark) > 0)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (chr(65) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((3 ^ 5) = 6)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (hex(encode(Spark SQL, US-ASCII)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "endswith(SparkSQL, SQL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(find_in_set(ab, abc,b,ab,c,def) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(format_number(12332.123456, 4) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(format_number(12332.123456, #.###) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (format_string(Hello World %d %s, 100, days) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (hex(Spark SQL) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "%SystemDrive%\\Users\\John LIKE %SystemDrive%\\\\Users%",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (initcap(sPark sql) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(instr(SparkSQL, R) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (lcase(LowerCase) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (left(Spark SQL, 3) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(length(Spark SQL ) > 20)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(levenshtein(kitten, sitting) > 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col1201",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col1202",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (lower(LowerCase) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (lpad(hi, 1, ??) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (hex(lpad(X'1020', 5, X'05')) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col120",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (md5(Spark) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (octet_length(Spark SQL) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (parse_url(http://spark.apache.org/path?query=1, HOST) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(position(bar, abcbarbar, 1) > 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(position(bar, abcbarbar, 5) > 5)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (printf(Hello World %d %s, 100, days) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "RLIKE(%SystemDarive%\\Users\\John, %SystemDrive%\\\\Users.*)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "RLIKE(%System1Drive%\\Users\\John, %SystemDrive%\\\\Users.*)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "REGEXP_LIKE(%SystemDa1rive%\\Users\\John, %SystemDrive%\\\\Users.*)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(regexp_extract(100-200, (\\d+)-(\\d+), 1) > 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (regexp_extract_all(100-200, 300-400, (\\d+)-(\\d+), 1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (regexp_replace(100-200, (\\d+), num, 1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (repeat(123, 2) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (replace(ABCabc, abc, DEF) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (reverse(Spark SQL) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (right(Spark SQL, 3) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (rpad(hi, 5, ab) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (hex(rpad(X'1020', 5, X'05')) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col121",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (sentences(Hi there! Good morning., en, US) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (sha(Spark) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (sha1(Spark) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (sha2(Spark, 256) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (soundex(Miller) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (concat(1, space(2), 1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (concat(concat(->, split_part(Hello,world,!, ,, 1)), <-) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (concat(concat(->, split_part(, ,, 1)), <-) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (concat(concat(->, split_part(Hello,World,!, ,, 0)), <-) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "startswith(SparkSQL, Spark)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "startswith(NULL, Spark)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (substr(Spark SQL, 5, 1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (substring_index(www.apache.org, ., 2) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (CAST(to_binary(537061726B) AS STRING) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (CAST(to_binary(537061726B, hex) AS STRING) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col50",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (translate(AaBbCc, abc, 123) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (CAST(try_to_binary(U3Bhxcms=, base64) AS STRING) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (ucase(SparkSql) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (CAST(unbase64(U3BhcmsgU1FM) AS STRING) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (decode(unhex(537061726B2053514C), UTF-8) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (upper(SparkSql) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d9",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((3 | 5) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (DATE '2021-03-20' - INTERVAL '2' MONTH = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(((10 - 2) + 2) = 4)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((2 % 1.8) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((3 ^ 5) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((3 & 5) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((3 * 2) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT ((INTERVAL '3' YEAR * 3) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(abs(-1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ACOS(1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ACOSH(1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ASIN(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ASINH(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ATAN(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ATAN2(0, 0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ATANH(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(current_timestamp() > 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(bit_count(-1) > 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(bit_get(23, 1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(bround(13.5, -1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(round(13.5, -1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(CBRT(27.0) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ceil(3345.1, -2) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ceiling(5.4) = 6)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ceiling(3345.1, -2) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(conv(100, 2, 10) = 4)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(conv(FFFFFFFFFFFFFFFF, 16, 10) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(COS(PI()) = -1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(COSH(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(COT(1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(CSC((PI() / 2)) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d10",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(DEGREES(3.141592653589793) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(5.2 = 4)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(E() = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(EXP(1) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(EXPM1(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(factorial(2) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d11",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(FLOOR(-0.1) = -1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(floor(3345.1, -2) = 20)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(getbit(23, 0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d12",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d13",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "isnan(CAST(NaN AS DOUBLE))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ln(1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(LOG(10, 100) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(LOG1P(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(LOG2(2) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(LOG10(10) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(nanvl(CAST(NaN AS DOUBLE), 123) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(negative(1) = -1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(pmod(-10, 3) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((+ -1) = -1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((pow(2, 3) * POWER(2, 3)) = 8)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(RADIANS(180) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((rand(0) * rand(0)) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(randn(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(rint(12.3456) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(round(2.5, 0) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(SEC(PI()) = -1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(SIN(0) = 0)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(shiftleft(2, 1) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(shiftright(4, 1) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(shiftrightunsigned(4, 1) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(sign(40) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(SIGNUM(40) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(SINH(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(-5.6 = 5)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(SQRT(4) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(TAN(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(TANH(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((12 * 5.4) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (try_add(DATE '2021-03-20', INTERVAL '2' MONTH) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(try_add(1, 2) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(try_divide(3, 2) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col110",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(try_subtract(1, 2) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col111",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (try_subtract(-128, 1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2)) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array(10, 20, 30) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col21",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "array_contains(array(1, 2, 3), 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_distinct(array(1, 2, 3, NULL, 3)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_except(array(1, 2, 2, 3), array(1, 1, 3, 5)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_intersect(array(1, 2, 3), array(1, 3, 3, 5)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_join(array(hello, world), ,) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(array_join(array(hello, NULL, world), ,, *) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(array_max(array(1, 20, NULL, 3)) > 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(array_min(array(1, 20, NULL, 3)) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(array_position(array(3, 2, 1, 4, 1), 1) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_remove(array(1, 2, 3, NULL, 3, 2), 3) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_repeat(123, 2) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(array_size(array(1, NULL, 3, NULL)) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_sort(array(bc, ab, dc), lambdafunction((IF(((namedlambdavariable() IS NULL) AND (namedlambdavariable() IS NULL)), 0, (IF((namedlambdavariable() IS NULL), 1, (IF((namedlambdavariable() IS NULL), -1, (IF((namedlambdavariable() < namedlambdavariable()), -1, (IF((namedlambdavariable() > namedlambdavariable()), 1, 0)))))))))), namedlambdavariable(), namedlambdavariable())) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_union(array(1, 2, 2, 3), array(1, 3, 5)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(arrays_overlap(array(1, 2, NULL, 3), array(NULL, 4, 5)) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(arrays_zip(array(1, 2), array(shoe, string, budget)) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(cardinality(array(b, d, c, a)) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (concat(array(1, 2, 3), array(4, 5), array(6)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(element_at(map(1, a, 2, b), 2) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col20",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col19",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col18",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (flatten(array(array(1, 2), array(3, 4))) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col17",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (reverse(array(2, 1, 4, 3)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (sequence(5, 1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(cardinality(array(b, d, c, a)) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (slice(array(1, 2, 3, 4), 2, 2) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (sort_array(array(b, d, NULL, c, a), true) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col16",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(try_element_at(array(1, 2, 3), 2) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col15",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (map(1, Hello, 2, World)[1] = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col67",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(element_at(map(1, a, 2, b), 3) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map(1.0, 2, 3.0, 4) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map_concat(map(1, a, 2, b), map(3, c)) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col122",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map_entries(map(1, a, 2, b)) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col14",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map_from_arrays(array(1.0, 3.0), array(2, 4)) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map_from_entries(array(struct(1, a), struct(2, b))) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map_keys(map(1, a, 2, b)) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map_values(map(1, a, 2, b)) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col13",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(cardinality(map(a, 1, b, 2)) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(str_to_map(a:1,b:2,c:3, ,, :) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col12",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col11",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(try_element_at(map(1, a, 2, b), 2) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((INTERVAL '03:15' HOUR TO MINUTE / 3) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col123",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (typeof((current_timestamp() - date_add(current_date(), extractansiintervaldays(INTERVAL '1' DAY)))) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col124",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col100",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (add_months(2016-08-31, -6) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (current_date() = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (current_timestamp() = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (current_timezone() = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col112",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col122121d",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col122121",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (date_from_unix_date(1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col122121gh",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (date_trunc(YEAR, 2015-03-05T09:32:05.359) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(datediff(2009-07-31, 2009-07-30) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(day(2009-07-30) = 30)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(dayofmonth(2009-07-30) = 30)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d14",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col16121",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(extract(SECONDS FROM INTERVAL '05:00:30.001' HOUR TO SECOND) = 30)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(extract(WEEK FROM TIMESTAMP '2019-08-12 01:00:00.123456') = 33)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (from_unixtime(0, yyyy-MM-dd HH:mm:ss) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (from_utc_timestamp(2017-07-14 02:40:00.0, GMT+1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (from_utc_timestamp(2016-08-31, Asia/Seoul) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(hour(2009-07-30 12:58:59) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(last_day(2009-01-12) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_date(2013, 7, 15) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_ym_interval(100, 5) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d15",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col122121hjh",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(months_between(1997-02-28 10:30:00, 1996-10-30, true) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(months_between(1997-02-28 10:30:00, 1996-10-30, false) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (next_day(2015-01-14, TU) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(quarter(2016-08-31) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d16",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (123 = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (2020-04-30 12:25:13.45 = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (timestamp_micros(1230219000123123) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (timestamp_millis(1230219000123) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (timestamp_seconds(1230219000) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_date(2016-12-31, yyyy-MM-dd) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_timestamp(2016-12-31, yyyy-MM-dd) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_utc_timestamp(2017-07-14 02:40:00.0, GMT+1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (trunc(2015-10-27, YEAR) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (trunc(2019-08-04, quarter) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (try_add(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (try_add(DATE '2021-03-31', INTERVAL '1' MONTH) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (try_divide(INTERVAL '03:15' HOUR TO MINUTE, 3) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col101",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (try_subtract(DATE '2021-03-20', INTERVAL '2' MONTH) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (try_subtract(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(unix_date(1970-01-02) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(unix_micros(1970-01-01 00:00:01Z) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(unix_millis(1970-01-01 00:00:01Z) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(unix_seconds(1970-01-01 00:00:01Z) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col1123423",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(weekday(DATE '2009-07-30') = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(extract(DAYOFWEEK_ISO FROM DATE '2009-07-30') = 4)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(weekofyear(2008-02-20) = 8)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col122121rtyr",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array(1, 2, 3) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d3",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (Spark SQL = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (CAST(5.6 AS DECIMAL(2,0)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(CAST(INTERVAL '1-2' YEAR TO MONTH AS INT) = 12)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (2021-03-21 = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d2",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((5.2 / 2) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d4",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (make_date(2013, 7, 15) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (make_dt_interval(100, 13, 0, 0.000000) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_ym_interval(100, 5) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col113",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(named_struct(a, 1, b, 2, c, 3) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d5",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(struct(1, 2, 3) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(12 = 12)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col114",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col115",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_timestamp(2016-12-31 00:12:00) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (from_csv(1, 0.8) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (schema_of_csv(1,abc) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(json_array_length([1,2,3,{\"f1\":1,\"f2\":[5,6]},4]) = 5)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (json_object_keys({\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (schema_of_json([{\"col\":01}]) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_json(named_struct(a, 1, b, 2)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_json(map(named_struct(a, 1), named_struct(b, 2))) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_json(array(map(a, 1))) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (xpath(<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>, a/b/text()) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "xpath_boolean(<a><b>1</b></a>, a/b)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (xpath_double(<a><b>1</b><b>2</b></a>, sum(a/b)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (xpath_float(<a><b>1</b><b>2</b></a>, sum(a/b)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col117",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(xpath_long(<a><b>1</b><b>2</b></a>, sum(a/b)) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(xpath_number(<a><b>1</b><b>2</b></a>, sum(a/b)) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(xpath_int(<a><b>1</b><b>2</b></a>, sum(a/b)) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (xpath_string(<a><b>b</b><c>cc</c></a>, a/c) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col10",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col9",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col8",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(coalesce(2, (5 / 0)) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (current_catalog() = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c21543123d",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (abhisheks@prophecy.io = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (decode(5, 6, Spark, 5, SQL, 4, rocks) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (elt(1, scala, java) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(greatest(10, 9, 2, 4, 3) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (hash(Spark, array(123), 2) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col7",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (ifnull(NULL, array(2)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(1 IS NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(1 IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(least(10, 9, 2, 4, 3) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(monotonically_increasing_id() > 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(nullif(2, 2) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(nvl(NULL, 2) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(nvl2(NULL, 2, 1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (typeof(1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (uuid() = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (xxhash64(Spark, array(123), 2) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(CAST(20 AS INT) = 20)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d866",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d889",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(bitmap_count(X'00') = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(charindex(bar, abcbarbar, 1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (decode(X'FEFF0053007000610072006B002000530051004C', UTF-16) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d8123",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(len(Spark SQL ) > 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(levenshtein(kitten, sitting, 4) > 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (concat(concat(+, TRIM(LEADING abc FROM acbabSparkSQL   )), +) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (mask(AaBb123-&^ASDXYZ921312asd, Z, z, 9, X) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (mask(AaBb123-&^ASDXYZ921312asd, X, z, n, NULL) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (mask(AaBb123-&ASDXYZ921312asd, NULL, NULL, NULL, NULL) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (overlay(Spark SQL, _, 6, -1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (overlay(Spark SQL, tructured, 2, 4) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (overlay(encode(Spark SQL, utf-8), encode(_, utf-8), 6, -1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(locate(bar, abcbarbar, 1) > 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(regexp_count(Steven Jones and Stephen Smith are the best players, Ste(v|ph)en) > 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (regexp_instr(Mary had a little lamb, NULL, 0) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (regexp_substr(NULL, Ste(v|ph)en) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (TRIM(TRAILING ab FROM SparkSQLabcaaba) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (4 = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (substr(Spark SQL, -3, 2147483647) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (substring(Spark SQL, 5, 1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (substring(Spark SQL, -3, 2147483647) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col11112",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (decode(encode(abc, utf-8), utf-8) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_char(454, 999) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col1567812",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_varchar(X'537061726B2053514C') = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col15678121",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col15678123",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col15678125",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col15678127",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col6",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (url_decode(http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (url_encode(http://spark.apache.org/path?query=1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col125",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col156781254",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(bit_reverse(-1) = -1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(bitmap_bit_position(-32768) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(bitmap_bucket_number(-32768) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(mod(2, 1.8) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(array_append(array(1, 2, 3), 0) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(array_compact(array(1, 2, NULL, 3, NULL, 3)) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_insert(array(a, b, c), 1, z) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_prepend(array(1, 2, 3), 0) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (get(array(1, 2, 3), 2) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col5",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (shuffle(array(1, 20, 3, 5)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "map_contains_key(map(1, a, 2, b), 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (DATE '2021-03-31' - INTERVAL '1' MONTH = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (DATE '2021-03-31' + INTERVAL '1' MONTH = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (TIMESTAMP '2021-03-20 12:15:29' - INTERVAL '03' SECOND = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(timestampdiff(MONTH, TIMESTAMP '2021-02-28 12:00:00', TIMESTAMP '2021-03-28 12:00:00') = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(date_part(SECONDS, TIMESTAMP '2019-10-01 00:00:01.000001') = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(date_part(Week, TIMESTAMP '2019-08-12 01:00:00.123456') = 33)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col122121a1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (timestampadd(MICROSECOND, 5, TIMESTAMP '2022-02-28 00:00:00') = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(timestampdiff(MONTH, TIMESTAMP '2021-02-28 12:00:00', TIMESTAMP '2021-03-28 11:59:59') = 0)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_timestamp(2014, 12, 28, 6, 30, 45.887, CET) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (now() = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c45fg6789hgf1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c45fg6789hgf",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c45fg6789hgf2",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (try_to_timestamp(2016-12-31, yyyy-MM-dd) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_interval(100, 11, 0, 0, 0, 0, 0.000000) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (5 = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_char(454, 000.00) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(to_char(454, 999) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(from_json({\"a\":1, \"b\":0.8}) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(get_json_object({\"a\":\"b\"}, $.a) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(to_csv(named_struct(time, to_timestamp(2015-08-26, yyyy-MM-dd))) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(to_csv(named_struct(a, 1, b, 2)) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (from_xml(<p><time>26/08/2015</time></p>) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(schema_of_xml(<p><a attr=\"2\">1</a><a>3</a></p>) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (aws:us-west-1:3fa0cd4e-bf05-4fde-894d-9dc222ae0419 = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (current_schema() = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (current_version() = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "equal_null(2, 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col4",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "is_account_group_member(admins)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1d1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold13412asd",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold13423423",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1f4",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1asd",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1asd12",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1das122",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1test1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1test2",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col3455",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1asd342346",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1j",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1jk",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1jk1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1ghj",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1qwe",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1qweqwe",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1qweq123",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold112sas",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1qwe234",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1dasd3456456",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1sdf56456",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1sdf43534523",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1dasd56346435234",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1dasd23414123",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1adsasd123412312",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1cold1adsasd123412312",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1cold12",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1cold15",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1cold17",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1cold1as",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1cold1121",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1657456cold1yui",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold14565cold1s254fg",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1345cold1dsa23",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d6cold1345cold1dsa23",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold11cold1345cold1dsa231",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1cold1345cold1dsa23232",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col2",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 1
        },
        "SQLStatement_4_2##DQWlcX95" : {
          "id" : "SQLStatement_4_2##DQWlcX95",
          "component" : "SQLStatement",
          "metadata" : {
            "label" : "SQLStatement_4_2",
            "phase" : 0,
            "isLabelGrayed" : false
          },
          "properties" : {
            "fileTabs" : [ {
              "path" : "out",
              "id" : "out",
              "language" : "sql",
              "content" : "SELECT *\n\nFROM (\n  SELECT *\n  \n  FROM SQLStatement_6\n)\nUNPIVOT INCLUDE NULLS (\n  SQLStatement_6\n  FOR string_value IN (\n    c_tinyint AS `tiny_int_val`, c_smallint AS `small_int_val`, c_int AS `int_val`, c_bigint AS `bigint_val`\n  )\n)\n"
            } ]
          },
          "ports" : {
            "inputs" : [ {
              "id" : "dPzd9nvA",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                } ]
              },
              "slug" : "SQLStatement_6"
            } ],
            "outputs" : [ {
              "id" : "vAUbtrf7",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                }, {
                  "name" : "string_value",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "SQLStatement_6",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 5
        },
        "SQLStatement_1_3##jxgFNRnX" : {
          "id" : "SQLStatement_1_3##jxgFNRnX",
          "component" : "SQLStatement",
          "metadata" : {
            "label" : "SQLStatement_1_3",
            "phase" : 0,
            "isLabelGrayed" : false
          },
          "properties" : {
            "fileTabs" : [ {
              "path" : "out",
              "id" : "out",
              "language" : "sql",
              "content" : "SELECT cast(ANY (col1) FILTER (  \n         WHERE col2 = 1\n       ) AS string) AS c1\n\nFROM VALUES\n      (false, 1),\n      (false, 2),\n      (true, 2),\n      (NULL, 1) AS tab(col1, col2)\n\nUNION\n\nSELECT cast(ANY (col) AS string) AS c1\n\nFROM VALUES\n      (true),\n      (false),\n      (false) AS tab(col)\n\nUNION\n\nSELECT CAST(approx_count_distinct(col1) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2),\n      (2),\n      (3) AS tab(col1)\n\nUNION\n\nSELECT cast(approx_count_distinct(col1) FILTER (  \n         WHERE col2 = 10\n       ) AS string) AS c1\n\nFROM VALUES\n      (1, 10),\n      (1, 10),\n      (2, 10),\n      (2, 10),\n      (3, 10),\n      (1, 12) AS tab(col1, col2)\n\nUNION\n\nSELECT CAST(approx_percentile(col, ARRAY(0.5, 0.4, 0.1), 100) AS STRING) AS c1\n\nFROM VALUES\n      (0),\n      (1),\n      (2),\n      (10) AS tab(col)\n\nUNION\n\nSELECT CAST(approx_percentile(DISTINCT col, 0.5, 100) AS STRING) AS c1\n\nFROM VALUES\n      (0),\n      (6),\n      (6),\n      (7),\n      (9),\n      (10) AS tab(col)\n\nUNION\n\nSELECT CAST(array_agg(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (NULL),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(array_agg(DISTINCT col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (NULL),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(avg(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(try_avg(col) AS STRING) AS c1\n\nFROM VALUES\n      (10),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(bit_and(col) AS STRING) AS c1\n\nFROM VALUES\n      (3),\n      (5) AS tab(col)\n\nUNION\n\nSELECT cast(bit_and(col) FILTER (  \n         WHERE col < 6\n       ) AS string) AS c1\n\nFROM VALUES\n      (3),\n      (5),\n      (6) AS tab(col)\n\nUNION\n\nSELECT CAST(bit_or(col) AS STRING) AS c1\n\nFROM VALUES\n      (3),\n      (5) AS tab(col)\n\nUNION\n\nSELECT cast(bit_or(col) FILTER (  \n         WHERE col < 8\n       ) AS string) AS c1\n\nFROM VALUES\n      (3),\n      (5),\n      (8) AS tab(col)\n\nUNION\n\nSELECT CAST(bit_xor(col) AS STRING) AS c1\n\nFROM VALUES\n      (3),\n      (3),\n      (5) AS tab(col)\n\nUNION\n\nSELECT CAST(bool_and(col) AS STRING) AS c1\n\nFROM VALUES\n      (true),\n      (true),\n      (true) AS tab(col)\n\nUNION\n\nSELECT CAST(bool_or(col) AS STRING) AS c1\n\nFROM VALUES\n      (true),\n      (false),\n      (false) AS tab(col)\n\nUNION\n\nSELECT CAST(collect_list(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (NULL),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(collect_set(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (NULL),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(corr(c1, c2) AS STRING) AS c1\n\nFROM VALUES\n      (3, 2),\n      (3, 3),\n      (3, 3),\n      (6, 4) AS tab(c1, c2)\n\nUNION\n\nSELECT cast(corr(DISTINCT c1, c2) FILTER (  \n         WHERE c1 != c2\n       ) AS string) AS c1\n\nFROM VALUES\n      (3, 2),\n      (3, 3),\n      (3, 3),\n      (6, 4) AS tab(c1, c2)\n\nUNION\n\nSELECT CAST(count(*) AS STRING) AS c1\n\nFROM VALUES\n      (NULL),\n      (5),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(count(*) AS STRING) AS c1\n\nFROM VALUES\n      (NULL),\n      (5),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT cast(count(col) FILTER (  \n         WHERE col < 10\n       ) AS string) AS c1\n\nFROM VALUES\n      (NULL),\n      (5),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(count_if(\n         col % 2 = 0) AS STRING) AS c1\n\nFROM VALUES\n      (NULL),\n      (0),\n      (1),\n      (2),\n      (2),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(covar_pop(c1, c2) AS STRING) AS c1\n\nFROM VALUES\n      (1, 1),\n      (2, 2),\n      (2, 2),\n      (3, 3) AS tab(c1, c2)\n\nUNION\n\nSELECT CAST(covar_samp(c1, c2) AS STRING) AS c1\n\nFROM VALUES\n      (1, 1),\n      (2, 2),\n      (2, 2),\n      (3, 3) AS tab(c1, c2)\n\nUNION\n\nSELECT CAST(every(col) AS STRING) AS c1\n\nFROM VALUES\n      (true),\n      (true),\n      (true) AS tab(col)\n\nUNION\n\nSELECT CAST(first(col, true) AS STRING) AS c1\n\nFROM VALUES\n      (NULL),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(first_value(col) AS STRING) AS c1\n\nFROM VALUES\n      (10),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(kurtosis(col) AS STRING) AS c1\n\nFROM VALUES\n      (-10),\n      (-20),\n      (100),\n      (100),\n      (1000) AS tab(col)\n\nUNION\n\nSELECT CAST(last(col) AS STRING) AS c1\n\nFROM VALUES\n      (10),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(last_value(col) AS STRING) AS c1\n\nFROM VALUES\n      (10),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(max(col) AS STRING) AS c1\n\nFROM VALUES\n      (10),\n      (50),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(max_by(x, y) AS STRING) AS c1\n\nFROM VALUES\n      (('a', 10)),\n      (('b', 50)),\n      (('c', 20)) AS tab(x, y)\n\nUNION\n\nSELECT CAST(mean(DISTINCT col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2),\n      (NULL) AS tab(col)\n\nUNION\n\nSELECT CAST(min(col) AS STRING) AS c1\n\nFROM VALUES\n      (10),\n      (50),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(min_by(x, y) AS STRING) AS c1\n\nFROM VALUES\n      (('a', 10)),\n      (('b', 50)),\n      (('c', 20)) AS tab(x, y)\n\nUNION\n\nSELECT CAST(percentile(col, 0.3) AS STRING) AS c1\n\nFROM VALUES\n      (0),\n      (10),\n      (10) AS tab(col)\n\nUNION\n\nSELECT CAST(percentile_approx(col, 0.5, 100) AS STRING) AS c1\n\nFROM VALUES\n      (0),\n      (6),\n      (7),\n      (9),\n      (10),\n      (10),\n      (10) AS tab(col)\n\nUNION\n\nSELECT CAST(regr_avgx(y, x) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_avgy(y, x) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_count(y, x) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 2),\n      (2, 3),\n      (2, 4) AS t(y, x)\n\nUNION\n\nSELECT CAST(regr_r2(y, x) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(skewness(col) AS STRING) AS c1\n\nFROM VALUES\n      (-10),\n      (-20),\n      (100),\n      (1000),\n      (1000) AS tab(col)\n\nUNION\n\nSELECT CAST(some(col) AS STRING) AS c1\n\nFROM VALUES\n      (true),\n      (false),\n      (false) AS tab(col)\n\nUNION\n\nSELECT CAST(std(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(stddev(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(stddev_pop(DISTINCT col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(stddev_samp(DISTINCT col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(sum(col) AS STRING) AS c1\n\nFROM VALUES\n      (NULL),\n      (NULL) AS tab(col)\n\nUNION\n\nSELECT CAST(try_avg(DISTINCT col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2) AS tab(col)\n\nUNION\n\nSELECT CAST(try_sum(col) AS STRING) AS c1\n\nFROM VALUES\n      (NULL),\n      (10),\n      (15) AS tab(col)\n\nUNION\n\nSELECT CAST(var_pop(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(var_samp(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(variance(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (3),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(a AS STRING) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    dense_rank() OVER (PARTITION BY a ORDER BY b),\n    rank() OVER (PARTITION BY a ORDER BY b),\n    row_number() OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS STRING) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    ntile(2) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS STRING) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    percent_rank(b) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A1', 3),\n        ('A1', 6),\n        ('A1', 7),\n        ('A1', 7),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS STRING) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    dense_rank() OVER (PARTITION BY a ORDER BY b),\n    rank() OVER (PARTITION BY a ORDER BY b),\n    row_number() OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS STRING) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    cume_dist() OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS STRING) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    lag(b) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS STRING) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    lead(b) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(a AS STRING) AS c1\n\nFROM (\n  SELECT \n    a,\n    b,\n    nth_value(b, 2) OVER (PARTITION BY a ORDER BY b)\n  \n  FROM VALUES\n        ('A1', 2),\n        ('A1', 1),\n        ('A2', 3),\n        ('A1', 1) AS tab(a, b)\n)\n\nUNION\n\nSELECT CAST(num AS STRING) AS c1\n\nFROM (\n  SELECT \n    explode(MAP(1, 'a', 2, 'b')) AS (num, val),\n    'Spark'\n)\n\nUNION\n\nSELECT CAST(elem AS STRING) AS c1\n\nFROM (\n  SELECT \n    explode_outer(ARRAY(10, 20)) AS elem,\n    'Spark'\n)\n\nUNION\n\nSELECT CAST(name AS STRING) AS c1\n\nFROM (\n  SELECT \n    name,\n    age,\n    count(*)\n  \n  FROM VALUES\n        (2, 'Alice'),\n        (5, 'Bob') AS people(age, name)\n  \n  GROUP BY CUBE(name, age)\n)\n\nUNION\n\nSELECT CAST(name AS STRING) AS c1\n\nFROM (\n  SELECT \n    name,\n    grouping(name),\n    sum(age)\n  \n  FROM VALUES\n        (2, 'Alice'),\n        (5, 'Bob') AS people(age, name)\n  \n  GROUP BY CUBE(name)\n)\n\nUNION\n\nSELECT CAST(name AS STRING) AS c1\n\nFROM (\n  SELECT \n    name,\n    age,\n    grouping_id(name, age),\n    conv(CAST(grouping_id(name, age) AS STRING), 10, 2),\n    avg(height)\n  \n  FROM VALUES\n        (2, 'Alice', 165),\n        (5, 'Bob', 180) AS people(age, name, height)\n  \n  GROUP BY CUBE(name, age)\n)\n\nUNION\n\nSELECT CAST(col1 AS STRING) AS c1\n\nFROM (\n  SELECT \n    'hello' AS col1,\n    stack(2, 1, 2, 3) AS (first, second),\n    'world'\n)\n\nUNION\n\nSELECT CAST(any_value(col) AS STRING) AS c1\n\nFROM VALUES\n      (10),\n      (5),\n      (20) AS tab(col)\n\nUNION\n\nSELECT CAST(approx_top_k(expr) AS STRING) AS c1\n\nFROM VALUES\n      (0),\n      (0),\n      (1),\n      (1),\n      (2),\n      (3),\n      (4),\n      (4) AS tab(expr)\n\nUNION\n\nSELECT CAST(hll_sketch_estimate(hll_sketch_agg(col, 12)) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2),\n      (2),\n      (3) AS tab(col)\n\nUNION\n\n-- SELECT CAST(a AS string) AS c1\n-- FROM (\n--   SELECT hll_sketch_estimate(hll_union(hll_sketch_agg(col1, 4), hll_sketch_agg(col2, 21))) AS a\n--   FROM VALUES\n--         (1, 4),\n--         (1, 4),\n--         (2, 5),\n--         (2, 5),\n--         (3, 6) AS tab(col1, col2)\n-- )\n-- UNION\nSELECT CAST(median(col) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (2),\n      (3),\n      (4),\n      (NULL) AS tab(col)\n\nUNION\n\nSELECT CAST(regr_intercept(y, x) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_slope(y, x) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(typeof(regr_sxx(y, x)) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_sxy(y, x) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(regr_syy(y, x) AS STRING) AS c1\n\nFROM VALUES\n      (1, 2),\n      (2, 3),\n      (2, 3),\n      (NULL, 4),\n      (4, NULL) AS T(y, x)\n\nUNION\n\nSELECT CAST(mode(col) AS STRING) AS c1\n\nFROM VALUES\n      (ARRAY(1, 2)),\n      (ARRAY(1, 2)),\n      (ARRAY(2, 3)) AS tab(col)\n\nUNION\n\nSELECT CAST(approx_top_k(expr, 10, 100) AS STRING) AS c1\n\nFROM VALUES\n      (0),\n      (1),\n      (1),\n      (2),\n      (2),\n      (2) AS tab(expr)\n\nUNION\n\nSELECT CAST(hll_sketch_estimate(hll_sketch_agg(col, 12)) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (1),\n      (2),\n      (2),\n      (3) AS tab(col)\n\nUNION\n\nSELECT CAST(hll_sketch_estimate(hll_union_agg(sketch, true)) AS STRING) AS c1\n\nFROM (\n  SELECT hll_sketch_agg(col) AS sketch\n  \n  FROM VALUES\n        (1) AS tab(col)\n  \n  UNION ALL\n  \n  SELECT hll_sketch_agg(col, 20) AS sketch\n  \n  FROM VALUES\n        (1) AS tab(col)\n)\n\nUNION\n\nSELECT CAST(hex(TRIM(TRAILING x'00' FROM bitmap_construct_agg(val))) AS STRING) AS c1\n\nFROM VALUES\n      (0) AS T(val)\n\nUNION\n\nSELECT CAST(num_distinct AS STRING) AS c1\n\nFROM (\n  SELECT sum(num_distinct) AS num_distinct\n  \n  FROM (\n    SELECT \n      bitmap_bucket_number(val),\n      bitmap_count(bitmap_construct_agg(bitmap_bit_position(val)))\n    \n    FROM VALUES\n          (1),\n          (2),\n          (1),\n          (-1),\n          (5),\n          (0),\n          (5) AS t(val)\n    \n    GROUP BY ALL  \n  ) AS distinct_vals_by_bucket(bucket, num_distinct)\n)\n\nUNION\n\nSELECT CAST(hex(count_min_sketch(column => col, confidence => 0.5d, epsilon => 0.5d, seed => 1)) AS STRING) AS c1\n\nFROM VALUES\n      (1),\n      (2),\n      (1) AS tab(col)\n\nUNION\n\nSELECT CAST(num_distinct AS STRING) AS c1\n\nFROM (\n  SELECT sum(num_distinct) AS num_distinct\n  \n  FROM (\n    SELECT \n      bucket,\n      bitmap_count(bitmap_or_agg(num_distinct)) AS num_distinct\n    \n    FROM (\n      (SELECT \n        bitmap_bucket_number(val) AS bucket,\n        bitmap_construct_agg(bitmap_bit_position(val)) AS num_distinct\n      \n      FROM VALUES\n            (1),\n            (2),\n            (1),\n            (-1),\n            (5),\n            (0),\n            (5) AS t(val)\n      \n      GROUP BY ALL)\n      \n      UNION ALL\n      \n      (SELECT \n        bitmap_bucket_number(val) AS bucket,\n        bitmap_construct_agg(bitmap_bit_position(val)) AS num_distinct\n      \n      FROM VALUES\n            (3),\n            (1),\n            (-1),\n            (6),\n            (5),\n            (1),\n            (5),\n            (8) AS t(val)\n      \n      GROUP BY ALL)\n    )\n    \n    GROUP BY ALL  \n  )\n)\n"
            } ]
          },
          "ports" : {
            "inputs" : [ ],
            "outputs" : [ {
              "id" : "lHa3W9WL",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c1",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 2
        },
        "combine_multiple##PLqUQGPX" : {
          "id" : "combine_multiple##PLqUQGPX",
          "component" : "Macro",
          "metadata" : {
            "label" : "combine_multiple_tables_4",
            "phase" : 0,
            "macroDependencies" : [ "SQL_DatabricksSharedBasic.combine_multiple_tables" ],
            "comment" : "Consolidates data from multiple tables for comprehensive analysis.",
            "isLabelGrayed" : false
          },
          "properties" : {
            "macroName" : "combine_multiple_tables",
            "parameters" : [ {
              "name" : "table_1",
              "value" : "'Limit_4'"
            }, {
              "name" : "table_2",
              "value" : "'SQLStatement_1_3'"
            }, {
              "name" : "table_3",
              "value" : "'SQLStatement_4_2'"
            }, {
              "name" : "table_4",
              "value" : "'AllExSQL'"
            }, {
              "name" : "table_5",
              "value" : "'Filter_1_1_1'"
            }, {
              "name" : "col_table_1",
              "value" : "'first_name'"
            } ],
            "projectName" : "SQL_DatabricksSharedBasic"
          },
          "ports" : {
            "inputs" : [ {
              "id" : "QoQ5CkDa",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "first_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "last_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "id",
                  "dataType" : {
                    "type" : "Integer"
                  }
                } ]
              },
              "slug" : "Limit_4"
            }, {
              "id" : "LDNzike5",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c1",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "SQLStatement_1_3"
            }, {
              "id" : "pwZKsOYZ",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                }, {
                  "name" : "string_value",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "SQLStatement_6",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                } ]
              },
              "slug" : "SQLStatement_4_2"
            }, {
              "id" : "WFdpKvpN",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "(CAST(customer_id AS INT) > 5)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (CAST(customer_id AS INT) = 0))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "first_name LIKE %A%",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((1 & 1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((2 | 2) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((10 * CAST(customer_id AS INT)) = 20)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (last_name = first_name))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((CAST(customer_id AS INT) >= 10) AND (CAST(customer_id AS INT) <= 20))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(array(10, 20, 30)[2] = 30)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map(1, Hello, 2, World)[1] = Hello)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d7",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map(three, 3)[four] = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d8",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((1 = 2) AND (1 = 2))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(((((1 >= 2) AND (1 <= 2)) AND (NOT (1 = 3))) OR (2 > 4)) OR (4 < 5))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col22",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d81",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(named_struct(a, 1, b, 2) IN (named_struct(a, 1, b, 1), named_struct(a, 1, b, 3)))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (1 <=> 5))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(invalid <=> false)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(51 IS NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c46",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(1 <=> 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (1 = CAST(customer_id AS INT)))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(((10 - 2) + 10) = 8)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT true)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(false OR true)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((2 % 0) = 0)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(concat(Spark, SQL) = SparkSQL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "%SystemDrive%\\Users\\John LIKE %System23Drive%\\\\Users%",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "RLIKE(%SystemDr12ive%\\Users\\John, %System23Drive%\\\\Users.*)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "REGEXP_LIKE(%Syst2emDrive%\\Users\\John, %SystemD545rive%\\\\Users.*)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((2 / 2) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(~0 = -1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(base64(aes_encrypt(Spark, abcdefghijklmnop, GCM, DEFAULT, , )) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(CAST(aes_decrypt(unbase64(4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn), abcdefghijklmnop, GCM, DEFAULT, ) AS STRING) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ascii(234) = 234)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(base64(Spark SQL) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(bin(13) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(Spark SQL = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (btrim(abcaabaSparkSQLabcaaba, abc) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (char(65) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(char_length(Spark SQL ) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(character_length(Spark SQL ) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (concat(customer_id, hello) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (concat_ws(,, Spark, array(S, Q, NULL, L), NULL) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "contains(SparkSQL, Spork)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(crc32(Spark) > 0)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (chr(65) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((3 ^ 5) = 6)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (hex(encode(Spark SQL, US-ASCII)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "endswith(SparkSQL, SQL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(find_in_set(ab, abc,b,ab,c,def) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(format_number(12332.123456, 4) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(format_number(12332.123456, #.###) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (format_string(Hello World %d %s, 100, days) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (hex(Spark SQL) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "%SystemDrive%\\Users\\John LIKE %SystemDrive%\\\\Users%",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (initcap(sPark sql) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(instr(SparkSQL, R) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (lcase(LowerCase) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (left(Spark SQL, 3) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(length(Spark SQL ) > 20)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(levenshtein(kitten, sitting) > 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col1201",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col1202",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (lower(LowerCase) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (lpad(hi, 1, ??) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (hex(lpad(X'1020', 5, X'05')) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col120",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (md5(Spark) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (octet_length(Spark SQL) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (parse_url(http://spark.apache.org/path?query=1, HOST) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(position(bar, abcbarbar, 1) > 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(position(bar, abcbarbar, 5) > 5)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (printf(Hello World %d %s, 100, days) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "RLIKE(%SystemDarive%\\Users\\John, %SystemDrive%\\\\Users.*)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "RLIKE(%System1Drive%\\Users\\John, %SystemDrive%\\\\Users.*)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "REGEXP_LIKE(%SystemDa1rive%\\Users\\John, %SystemDrive%\\\\Users.*)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(regexp_extract(100-200, (\\d+)-(\\d+), 1) > 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (regexp_extract_all(100-200, 300-400, (\\d+)-(\\d+), 1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (regexp_replace(100-200, (\\d+), num, 1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (repeat(123, 2) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (replace(ABCabc, abc, DEF) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (reverse(Spark SQL) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (right(Spark SQL, 3) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (rpad(hi, 5, ab) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (hex(rpad(X'1020', 5, X'05')) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col121",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (sentences(Hi there! Good morning., en, US) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (sha(Spark) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (sha1(Spark) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (sha2(Spark, 256) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (soundex(Miller) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (concat(1, space(2), 1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (concat(concat(->, split_part(Hello,world,!, ,, 1)), <-) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (concat(concat(->, split_part(, ,, 1)), <-) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (concat(concat(->, split_part(Hello,World,!, ,, 0)), <-) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "startswith(SparkSQL, Spark)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "startswith(NULL, Spark)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (substr(Spark SQL, 5, 1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (substring_index(www.apache.org, ., 2) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (CAST(to_binary(537061726B) AS STRING) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (CAST(to_binary(537061726B, hex) AS STRING) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col50",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (translate(AaBbCc, abc, 123) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (CAST(try_to_binary(U3Bhxcms=, base64) AS STRING) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (ucase(SparkSql) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (CAST(unbase64(U3BhcmsgU1FM) AS STRING) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (decode(unhex(537061726B2053514C), UTF-8) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (upper(SparkSql) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d9",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((3 | 5) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (DATE '2021-03-20' - INTERVAL '2' MONTH = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(((10 - 2) + 2) = 4)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((2 % 1.8) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((3 ^ 5) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((3 & 5) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((3 * 2) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT ((INTERVAL '3' YEAR * 3) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(abs(-1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ACOS(1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ACOSH(1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ASIN(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ASINH(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ATAN(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ATAN2(0, 0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ATANH(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(current_timestamp() > 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(bit_count(-1) > 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(bit_get(23, 1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(bround(13.5, -1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(round(13.5, -1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(CBRT(27.0) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ceil(3345.1, -2) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ceiling(5.4) = 6)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ceiling(3345.1, -2) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(conv(100, 2, 10) = 4)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(conv(FFFFFFFFFFFFFFFF, 16, 10) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(COS(PI()) = -1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(COSH(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(COT(1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(CSC((PI() / 2)) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d10",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(DEGREES(3.141592653589793) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(5.2 = 4)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(E() = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(EXP(1) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(EXPM1(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(factorial(2) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d11",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(FLOOR(-0.1) = -1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(floor(3345.1, -2) = 20)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(getbit(23, 0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d12",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d13",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "isnan(CAST(NaN AS DOUBLE))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(ln(1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(LOG(10, 100) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(LOG1P(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(LOG2(2) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(LOG10(10) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(nanvl(CAST(NaN AS DOUBLE), 123) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(negative(1) = -1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(pmod(-10, 3) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((+ -1) = -1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((pow(2, 3) * POWER(2, 3)) = 8)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(RADIANS(180) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((rand(0) * rand(0)) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(randn(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(rint(12.3456) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(round(2.5, 0) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(SEC(PI()) = -1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(SIN(0) = 0)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(shiftleft(2, 1) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(shiftright(4, 1) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(shiftrightunsigned(4, 1) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(sign(40) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(SIGNUM(40) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(SINH(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(-5.6 = 5)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(SQRT(4) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(TAN(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(TANH(0) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((12 * 5.4) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (try_add(DATE '2021-03-20', INTERVAL '2' MONTH) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(try_add(1, 2) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(try_divide(3, 2) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col110",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(try_subtract(1, 2) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col111",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (try_subtract(-128, 1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2)) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array(10, 20, 30) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col21",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "array_contains(array(1, 2, 3), 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_distinct(array(1, 2, 3, NULL, 3)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_except(array(1, 2, 2, 3), array(1, 1, 3, 5)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_intersect(array(1, 2, 3), array(1, 3, 3, 5)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_join(array(hello, world), ,) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(array_join(array(hello, NULL, world), ,, *) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(array_max(array(1, 20, NULL, 3)) > 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(array_min(array(1, 20, NULL, 3)) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(array_position(array(3, 2, 1, 4, 1), 1) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_remove(array(1, 2, 3, NULL, 3, 2), 3) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_repeat(123, 2) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(array_size(array(1, NULL, 3, NULL)) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_sort(array(bc, ab, dc), lambdafunction((IF(((namedlambdavariable() IS NULL) AND (namedlambdavariable() IS NULL)), 0, (IF((namedlambdavariable() IS NULL), 1, (IF((namedlambdavariable() IS NULL), -1, (IF((namedlambdavariable() < namedlambdavariable()), -1, (IF((namedlambdavariable() > namedlambdavariable()), 1, 0)))))))))), namedlambdavariable(), namedlambdavariable())) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_union(array(1, 2, 2, 3), array(1, 3, 5)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(arrays_overlap(array(1, 2, NULL, 3), array(NULL, 4, 5)) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(arrays_zip(array(1, 2), array(shoe, string, budget)) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(cardinality(array(b, d, c, a)) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (concat(array(1, 2, 3), array(4, 5), array(6)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(element_at(map(1, a, 2, b), 2) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col20",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col19",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col18",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (flatten(array(array(1, 2), array(3, 4))) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col17",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (reverse(array(2, 1, 4, 3)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (sequence(5, 1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(cardinality(array(b, d, c, a)) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (slice(array(1, 2, 3, 4), 2, 2) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (sort_array(array(b, d, NULL, c, a), true) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col16",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(try_element_at(array(1, 2, 3), 2) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col15",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (map(1, Hello, 2, World)[1] = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col67",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(element_at(map(1, a, 2, b), 3) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map(1.0, 2, 3.0, 4) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map_concat(map(1, a, 2, b), map(3, c)) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col122",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map_entries(map(1, a, 2, b)) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col14",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map_from_arrays(array(1.0, 3.0), array(2, 4)) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map_from_entries(array(struct(1, a), struct(2, b))) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map_keys(map(1, a, 2, b)) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(map_values(map(1, a, 2, b)) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col13",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(cardinality(map(a, 1, b, 2)) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(str_to_map(a:1,b:2,c:3, ,, :) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col12",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col11",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(try_element_at(map(1, a, 2, b), 2) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((INTERVAL '03:15' HOUR TO MINUTE / 3) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col123",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (typeof((current_timestamp() - date_add(current_date(), extractansiintervaldays(INTERVAL '1' DAY)))) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col124",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col100",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (add_months(2016-08-31, -6) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (current_date() = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (current_timestamp() = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (current_timezone() = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col112",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col122121d",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col122121",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (date_from_unix_date(1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col122121gh",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (date_trunc(YEAR, 2015-03-05T09:32:05.359) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(datediff(2009-07-31, 2009-07-30) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(day(2009-07-30) = 30)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(dayofmonth(2009-07-30) = 30)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d14",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col16121",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(extract(SECONDS FROM INTERVAL '05:00:30.001' HOUR TO SECOND) = 30)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(extract(WEEK FROM TIMESTAMP '2019-08-12 01:00:00.123456') = 33)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (from_unixtime(0, yyyy-MM-dd HH:mm:ss) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (from_utc_timestamp(2017-07-14 02:40:00.0, GMT+1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (from_utc_timestamp(2016-08-31, Asia/Seoul) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(hour(2009-07-30 12:58:59) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(last_day(2009-01-12) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_date(2013, 7, 15) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_ym_interval(100, 5) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d15",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col122121hjh",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(months_between(1997-02-28 10:30:00, 1996-10-30, true) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(months_between(1997-02-28 10:30:00, 1996-10-30, false) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (next_day(2015-01-14, TU) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(quarter(2016-08-31) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d16",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (123 = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (2020-04-30 12:25:13.45 = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (timestamp_micros(1230219000123123) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (timestamp_millis(1230219000123) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (timestamp_seconds(1230219000) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_date(2016-12-31, yyyy-MM-dd) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_timestamp(2016-12-31, yyyy-MM-dd) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_utc_timestamp(2017-07-14 02:40:00.0, GMT+1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (trunc(2015-10-27, YEAR) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (trunc(2019-08-04, quarter) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (try_add(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (try_add(DATE '2021-03-31', INTERVAL '1' MONTH) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (try_divide(INTERVAL '03:15' HOUR TO MINUTE, 3) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col101",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (try_subtract(DATE '2021-03-20', INTERVAL '2' MONTH) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (try_subtract(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(unix_date(1970-01-02) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(unix_micros(1970-01-01 00:00:01Z) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(unix_millis(1970-01-01 00:00:01Z) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(unix_seconds(1970-01-01 00:00:01Z) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col1123423",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(weekday(DATE '2009-07-30') = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(extract(DAYOFWEEK_ISO FROM DATE '2009-07-30') = 4)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(weekofyear(2008-02-20) = 8)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col122121rtyr",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array(1, 2, 3) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d3",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (Spark SQL = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (CAST(5.6 AS DECIMAL(2,0)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(CAST(INTERVAL '1-2' YEAR TO MONTH AS INT) = 12)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (2021-03-21 = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d2",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "((5.2 / 2) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d4",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (make_date(2013, 7, 15) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (make_dt_interval(100, 13, 0, 0.000000) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_ym_interval(100, 5) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col113",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(named_struct(a, 1, b, 2, c, 3) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d5",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(struct(1, 2, 3) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(12 = 12)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col114",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col115",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_timestamp(2016-12-31 00:12:00) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (from_csv(1, 0.8) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (schema_of_csv(1,abc) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(json_array_length([1,2,3,{\"f1\":1,\"f2\":[5,6]},4]) = 5)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (json_object_keys({\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (schema_of_json([{\"col\":01}]) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_json(named_struct(a, 1, b, 2)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_json(map(named_struct(a, 1), named_struct(b, 2))) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_json(array(map(a, 1))) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (xpath(<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>, a/b/text()) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "xpath_boolean(<a><b>1</b></a>, a/b)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (xpath_double(<a><b>1</b><b>2</b></a>, sum(a/b)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (xpath_float(<a><b>1</b><b>2</b></a>, sum(a/b)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col117",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(xpath_long(<a><b>1</b><b>2</b></a>, sum(a/b)) = 3)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(xpath_number(<a><b>1</b><b>2</b></a>, sum(a/b)) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(xpath_int(<a><b>1</b><b>2</b></a>, sum(a/b)) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (xpath_string(<a><b>b</b><c>cc</c></a>, a/c) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col10",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col9",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col8",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(coalesce(2, (5 / 0)) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (current_catalog() = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c21543123d",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (abhisheks@prophecy.io = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (decode(5, 6, Spark, 5, SQL, 4, rocks) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (elt(1, scala, java) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(greatest(10, 9, 2, 4, 3) = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (hash(Spark, array(123), 2) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col7",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (ifnull(NULL, array(2)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(1 IS NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(1 IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(least(10, 9, 2, 4, 3) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(monotonically_increasing_id() > 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(nullif(2, 2) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(nvl(NULL, 2) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(nvl2(NULL, 2, 1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (typeof(1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (uuid() = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (xxhash64(Spark, array(123), 2) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(CAST(20 AS INT) = 20)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d866",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d889",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(bitmap_count(X'00') = 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(charindex(bar, abcbarbar, 1) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (decode(X'FEFF0053007000610072006B002000530051004C', UTF-16) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d8123",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(len(Spark SQL ) > 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(levenshtein(kitten, sitting, 4) > 10)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (concat(concat(+, TRIM(LEADING abc FROM acbabSparkSQL   )), +) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (mask(AaBb123-&^ASDXYZ921312asd, Z, z, 9, X) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (mask(AaBb123-&^ASDXYZ921312asd, X, z, n, NULL) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (mask(AaBb123-&ASDXYZ921312asd, NULL, NULL, NULL, NULL) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (overlay(Spark SQL, _, 6, -1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (overlay(Spark SQL, tructured, 2, 4) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (overlay(encode(Spark SQL, utf-8), encode(_, utf-8), 6, -1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(locate(bar, abcbarbar, 1) > 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(regexp_count(Steven Jones and Stephen Smith are the best players, Ste(v|ph)en) > 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (regexp_instr(Mary had a little lamb, NULL, 0) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (regexp_substr(NULL, Ste(v|ph)en) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (TRIM(TRAILING ab FROM SparkSQLabcaaba) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (4 = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (substr(Spark SQL, -3, 2147483647) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (substring(Spark SQL, 5, 1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (substring(Spark SQL, -3, 2147483647) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col11112",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (decode(encode(abc, utf-8), utf-8) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_char(454, 999) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col1567812",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_varchar(X'537061726B2053514C') = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col15678121",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col15678123",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col15678125",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col15678127",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col6",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (url_decode(http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (url_encode(http://spark.apache.org/path?query=1) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col125",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col156781254",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(bit_reverse(-1) = -1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(bitmap_bit_position(-32768) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(bitmap_bucket_number(-32768) = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(mod(2, 1.8) = 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(array_append(array(1, 2, 3), 0) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(array_compact(array(1, 2, NULL, 3, NULL, 3)) = NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_insert(array(a, b, c), 1, z) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (array_prepend(array(1, 2, 3), 0) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (get(array(1, 2, 3), 2) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col5",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (shuffle(array(1, 20, 3, 5)) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "map_contains_key(map(1, a, 2, b), 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (DATE '2021-03-31' - INTERVAL '1' MONTH = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (DATE '2021-03-31' + INTERVAL '1' MONTH = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (TIMESTAMP '2021-03-20 12:15:29' - INTERVAL '03' SECOND = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(timestampdiff(MONTH, TIMESTAMP '2021-02-28 12:00:00', TIMESTAMP '2021-03-28 12:00:00') = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(date_part(SECONDS, TIMESTAMP '2019-10-01 00:00:01.000001') = 1)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(date_part(Week, TIMESTAMP '2019-08-12 01:00:00.123456') = 33)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col122121a1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (timestampadd(MICROSECOND, 5, TIMESTAMP '2022-02-28 00:00:00') = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(timestampdiff(MONTH, TIMESTAMP '2021-02-28 12:00:00', TIMESTAMP '2021-03-28 11:59:59') = 0)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_timestamp(2014, 12, 28, 6, 30, 45.887, CET) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (now() = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c45fg6789hgf1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c45fg6789hgf",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c45fg6789hgf2",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (try_to_timestamp(2016-12-31, yyyy-MM-dd) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_interval(100, 11, 0, 0, 0, 0, 0.000000) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (5 = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (to_char(454, 000.00) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(to_char(454, 999) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(from_json({\"a\":1, \"b\":0.8}) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(get_json_object({\"a\":\"b\"}, $.a) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(to_csv(named_struct(time, to_timestamp(2015-08-26, yyyy-MM-dd))) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(to_csv(named_struct(a, 1, b, 2)) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (from_xml(<p><time>26/08/2015</time></p>) = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(schema_of_xml(<p><a attr=\"2\">1</a><a>3</a></p>) IS NOT NULL)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (aws:us-west-1:3fa0cd4e-bf05-4fde-894d-9dc222ae0419 = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (current_schema() = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "(NOT (current_version() = NULL))",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "equal_null(2, 2)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col4",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "is_account_group_member(admins)",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1d1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold13412asd",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold13423423",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1f4",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1asd",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1asd12",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1das122",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1test1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1test2",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col3455",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1asd342346",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1j",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1jk",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1jk1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1ghj",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1qwe",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1qweqwe",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1qweq123",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold112sas",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1qwe234",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1dasd3456456",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1sdf56456",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1sdf43534523",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1dasd56346435234",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1dasd23414123",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1adsasd123412312",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1cold1adsasd123412312",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1cold12",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1cold15",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1cold17",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1cold1as",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1cold1121",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1657456cold1yui",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold14565cold1s254fg",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1345cold1dsa23",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "d6cold1345cold1dsa23",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold11cold1345cold1dsa231",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "cold1cold1345cold1dsa23232",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col2",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "col1",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                } ]
              },
              "slug" : "AllExSQL"
            }, {
              "id" : "Kp7RIspg",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "customer_id",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "first_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "last_name",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "Filter_1_1_1"
            } ],
            "outputs" : [ {
              "id" : "NUPiSBgU",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "first_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "last_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "id",
                  "dataType" : {
                    "type" : "Integer"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 9
        },
        "Filter_1_1_1##bWGVFGv6" : {
          "id" : "Filter_1_1_1##bWGVFGv6",
          "component" : "Filter",
          "metadata" : {
            "label" : "Filter_1_1_1",
            "phase" : 0,
            "macroDependencies" : [ ],
            "isLabelGrayed" : false
          },
          "properties" : {
            "columnsSelector" : [ ],
            "condition" : {
              "expression" : "CAST(customer_id AS INT) > 5\nand CAST(customer_id AS INT) != 0\nor first_name LIKE '%A%'\nor ((1 & 1) == 1)\nor ((2 | 2) == 2)\nand 10 * CAST(customer_id AS INT) == 20\nand last_name != first_name\nand (CAST(customer_id AS INT) BETWEEN 10 AND 20)\nand (ARRAY(10, 20, 30)[2] == 30)\nand (MAP(1, 'Hello', 2, 'World')[1] == 'Hello')\nand (10 ^ 20 == 50)\nand (MAP('three', 3).four == NULL)\nand (named_struct('a', 5, 'b', 'Spark').a == 5)\nand (1 = 2 and 1 == 2)\nand (1 >= 2 and 1 <= 2 and 1 != 3 or 2 > 4 or 4 < 5)\nand (\n      EXISTS(\n        ARRAY(1, NULL, 3), \n        x -> x % 2 == 0)\n    )\nor ilike('Spark', '_PARK')\nor (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\nand (1 IS DISTINCT FROM 5)\nand ('invalid' IS false)\nand isnull(1)\nand ('t' IS NOT true)\nand (1 <=> '1')\nand (1 <> CAST(customer_id AS INT))\nand (10 - 2 + 10 == 8)\nand (NOT true)\nand (false or true)\nand (2 % 0 == 0)\nand ('Spark' || 'SQL' == 'SparkSQL')\nand (r'%SystemDrive%\\Users\\John' LIKE r'%SystemDrive%\\\\Users%')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (2L / 2L == 10)\nand (~ 0 == -1)\nand (base64(aes_encrypt('Spark', 'abcdefghijklmnop')) == NULL)\nand (CAST(aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop') AS STRING) == NULL)\nand (ascii('234') == 234)\nand (base64('Spark SQL') == NULL)\nand (bin(13) == NULL)\nand (binary('Spark SQL') == NULL)\nand (btrim('abcaabaSparkSQLabcaaba', 'abc') != NULL)\nand (char(65) != NULL)\nand (char_length('Spark SQL ') == 10)\nand (character_length('Spark SQL ') == 10)\nand (concat(customer_id, 'hello') != NULL)\nand (concat_ws(',', 'Spark', ARRAY('S', 'Q', NULL, 'L'), NULL) != NULL)\nand contains('SparkSQL', 'Spork')\nand (crc32('Spark') > 0)\nand chr(65) != NULL\nand (3 ^ 5 == 6)\nand (hex(encode('Spark SQL', 'US-ASCII')) != NULL)\nand endswith('SparkSQL', 'SQL')\nand (find_in_set('ab', 'abc,b,ab,c,def') == 2)\nand (format_number(12332.123456, 4) == 2)\nand (format_number(12332.123456, '#.###') == 10)\nand (format_string('Hello World %d %s', 100, 'days') != NULL)\nand (hex('Spark SQL') != NULL)\nand (r'%SystemDrive%\\Users\\John' LIKE '%SystemDrive%\\\\\\\\Users%')\nand (initcap('sPark sql') != NULL)\nand (instr('SparkSQL', 'R') == 2)\nand (lcase('LowerCase') != NULL)\nand (LEFT('Spark SQL', 3) != NULL)\nand (length('Spark SQL ') > 20)\nand (levenshtein('kitten', 'sitting') > 10)\nand (locate('bar', 'abcbarbar') > 2)\nand (locate('bar', 'abcbarbar', 5) > 2)\nand (lower('LowerCase') != NULL)\nand (lpad('hi', 1, '??') != NULL)\nand (hex(lpad(x'1020', 5, x'05')) != NULL)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (md5('Spark') != NULL)\nand (octet_length('Spark SQL') != NULL)\nand (parse_url('http://spark.apache.org/path?query=1', 'HOST') != NULL)\nand (position('bar', 'abcbarbar') > 10)\nand (position('bar', 'abcbarbar', 5) > 5)\nand (printf('Hello World %d %s', 100, 'days') != NULL)\nand (r'%SystemDrive%\\Users\\John' RLIKE r'%SystemDrive%\\\\Users.*')\nand (r'%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\\\\\Users.*')\nand (regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*'))\nand (regexp_extract('100-200', '(\\\\d+)-(\\\\d+)', 1) > 10)\nand (regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1) != NULL)\nand (regexp_replace('100-200', '(\\\\d+)', 'num') != NULL)\nand (repeat('123', 2) != NULL)\nand (replace('ABCabc', 'abc', 'DEF') != NULL)\nand (reverse('Spark SQL') != NULL)\nand (RIGHT('Spark SQL', 3) != NULL)\nand (rpad('hi', 5, 'ab') != NULL)\nand (hex(rpad(x'1020', 5, x'05')) != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (sentences('Hi there! Good morning.', 'en', 'US') != NULL)\nand (sha('Spark') != NULL)\nand (sha1('Spark') != NULL)\nand (sha2('Spark', 256) != NULL)\nand (soundex('Miller') != NULL)\nand (concat('1', space(2), '1') != NULL)\nand (('->' || split_part('Hello,world,!', ',', 1) || '<-') != NULL)\nand (('->' || split_part('', ',', 1) || '<-') != NULL)\nand (('->' || split_part('Hello,World,!', ',', 0) || '<-') != NULL)\nand (startswith('SparkSQL', 'Spark'))\nand (startswith(NULL, 'Spark'))\nand (substr('Spark SQL', 5, 1) != NULL)\nand (substring_index('www.apache.org', '.', 2) != NULL)\nand (CAST(to_binary('537061726B') AS STRING) != NULL)\nand (CAST(to_binary('537061726B', 'hex') AS STRING) != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (translate('AaBbCc', 'abc', '123') != NULL)\nand (CAST(try_to_binary('U3Bhxcms=', 'base64') AS STRING) != NULL)\nand (ucase('SparkSql') != NULL)\nand (CAST(unbase64('U3BhcmsgU1FM') AS STRING) != NULL)\nand (decode(unhex('537061726B2053514C'), 'UTF-8') != NULL)\nand (upper('SparkSql') != NULL)\nand (10 / 2 == 5)\nand ((3 | 5) == 2)\nand ((DATE'2021-03-20' - INTERVAL '2' MONTH) != NULL)\nand (10 - 2 + 2 == 4)\nand (2 % 1.8 == 2)\nand (3 ^ 5 == 3)\nand (3 & 5 == 2)\nand (3 * 2 == 2)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (abs(-1) == 1)\nand (acos(1) == 1)\nand (acosh(1) == 1)\nand (asin(0) == 1)\nand (asinh(0) == 1)\nand (atan(0) == 1)\nand (atan2(0, 0) == 1)\nand (atanh(0) == 1)\nand (BIGINT(current_timestamp) > 1)\nand (bit_count(-1) > 1)\nand (bit_get(23Y, 1) == 1)\nand (bround(13.5, -1) == 1)\nand (round(13.5, -1) == 1)\nand (cbrt(27.0) == 3)\nand (ceil(3345.1, -2) == 1)\nand (ceiling(5.4) == 6)\nand (ceiling(3345.1, -2) == 1)\nand (conv('100', 2, 10) == 4)\nand (conv('FFFFFFFFFFFFFFFF', 16, 10) == 1)\nand (cos(pi()) == -1)\nand (cosh(0) == 1)\nand (cot(1) == 1)\nand (csc(pi() / 2) == 2)\nand (decimal('5.2') == 5)\nand (degrees(3.141592653589793) == 10)\nand (double('5.2') == 4)\nand (e() == 2)\nand (exp(1) == 2)\nand (expm1(0) == 1)\nand (factorial(2) == 2)\nand (FLOAT('5.2') == 5)\nand (floor(-0.1) == -1)\nand (floor(3345.1, -2) == 20)\nand (getbit(23Y, 0) == 1)\nand (hypot(3, 4) == 5)\nand (INT(-5.6) == 5)\nand (isnan(CAST('NaN' AS double)))\nand (ln(1) == 1)\nand (log(10, 100) == 2)\nand (log1p(0) == 1)\nand (log2(2) == 1)\nand (log10(10) == 1)\nand (nanvl(CAST('NaN' AS DOUBLE), 123) == 2)\nand (negative(1) == -1)\nand (pmod(-10, 3) == 2)\nand (positive(-1) == -1)\nand (pow(2, 3) * power(2, 3) == 8)\nand (radians(180) == 10)\nand (rand(0) * random(0) == 1)\nand (randn(0) == 1)\nand (rint(12.3456) == 1)\nand (round(2.5, 0) == 3)\nand (sec(pi()) == -1)\nand (sin(0) == 0)\nand (shiftleft(2, 1) == 2)\nand (shiftright(4, 1) == 2)\nand (shiftrightunsigned(4, 1) == 2)\nand (sign(40) == 1)\nand (signum(40) == 1)\nand (sinh(0) == 1)\nand (smallint(-5.6) == 5)\nand (sqrt(4) == 2)\nand (tan(0) == 1)\nand (tanh(0) == 1)\nand (tinyint('12') * tinyint(5.4) == 1)\nand (try_add(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_add(1, 2) == 3)\nand (try_divide(3, 2) == 3)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand (try_subtract(1, 2) == 2)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_subtract(-128Y, 1Y) != NULL)\nand (width_bucket(5.3, 0.2, 10.6, 5) + width_bucket(-0.9, 5.2, 0.5, 2) == 3)\nand (width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11) == 10)\nand (ARRAY(10, 20, 30) != NULL)\nand (\n      (\n        aggregate(\n          ARRAY(1, 2, 3), \n          0, \n          (acc, x) -> acc + x, \n          acc -> acc * 10)\n      ) == 1\n    )\nand (array_contains(ARRAY(1, 2, 3), 2))\nand (array_distinct(ARRAY(1, 2, 3, NULL, 3)) != NULL)\nand (array_except(ARRAY(1, 2, 2, 3), ARRAY(1, 1, 3, 5)) != NULL)\nand (array_intersect(ARRAY(1, 2, 3), ARRAY(1, 3, 3, 5)) != NULL)\nand (array_join(ARRAY('hello', 'world'), ',') != NULL)\nand (array_join(ARRAY('hello', NULL, 'world'), ',', '*') == NULL)\nand (array_max(ARRAY(1, 20, NULL, 3)) > 10)\nand (array_min(ARRAY(1, 20, NULL, 3)) == 1)\nand (array_position(ARRAY(3, 2, 1, 4, 1), 1) == 2)\nand (array_remove(ARRAY(1, 2, 3, NULL, 3, 2), 3) != NULL)\nand (array_repeat('123', 2) != NULL)\nand (array_size(ARRAY(1, NULL, 3, NULL)) == 2)\nand (array_sort(ARRAY('bc', 'ab', 'dc')) != NULL)\nand (array_union(ARRAY(1, 2, 2, 3), ARRAY(1, 3, 5)) != NULL)\nand (arrays_overlap(ARRAY(1, 2, NULL, 3), ARRAY(NULL, 4, 5)) == NULL)\nand (arrays_zip(ARRAY(1, 2), ARRAY('shoe', 'string', 'budget')) == NULL)\nand (cardinality(ARRAY('b', 'd', 'c', 'a')) == 2)\nand (concat(ARRAY(1, 2, 3), ARRAY(4, 5), ARRAY(6)) != NULL)\nand (element_at(MAP(1, 'a', 2, 'b'), 2) == NULL)\nand (\n      EXISTS(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 0)\n    )\nand (\n      EXISTS(\n        ARRAY(0, NULL, 2, 3, NULL), \n        x -> x IS NULL)\n    )\nand (\n      filter(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 1) != NULL\n    )\nand (flatten(ARRAY(ARRAY(1, 2), ARRAY(3, 4))) != NULL)\nand (\n      forall(\n        ARRAY(1, 2, 3), \n        x -> x % 2 == 0) == NULL\n    )\nand (reverse(ARRAY(2, 1, 4, 3)) != NULL)\nand (sequence(5, 1) != NULL)\nand (cardinality(ARRAY('b', 'd', 'c', 'a')) == 10)\nand (slice(ARRAY(1, 2, 3, 4), 2, 2) != NULL)\nand (sort_array(ARRAY('b', 'd', NULL, 'c', 'a'), true) != NULL)\nand (\n      transform(\n        ARRAY(1, 2, 3), \n        x -> x + 1) != NULL\n    )\nand (try_element_at(ARRAY(1, 2, 3), 2) == 2)\nand (\n      zip_with(\n        ARRAY('a', 'b', 'c'), \n        ARRAY('d', 'e', 'f'), \n        (x, y) -> concat(x, y)) != NULL\n    )\nand (MAP(1, 'Hello', 2, 'World')[1] != NULL)\nand (cardinality(MAP('a', 1, 'b', 2)) == 2)\nand (element_at(MAP(1, 'a', 2, 'b'), 3) == NULL)\nand (MAP(1.0, '2', 3.0, '4') IS NOT NULL)\nand (map_concat(MAP(1, 'a', 2, 'b'), MAP(3, 'c')) IS NOT NULL)\nand (map_contains_key(MAP(1, 'a', 2, 'b'), 2))\nand (map_entries(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_filter(\n        MAP(1, 0, 2, 2, 3, -1), \n        (k, v) -> k > v) IS NOT NULL\n    )\nand (map_from_arrays(ARRAY(1.0, 3.0), ARRAY('2', '4')) IS NOT NULL)\nand (map_from_entries(ARRAY(STRUCT(1, 'a'), STRUCT(2, 'b'))) IS NOT NULL)\nand (map_keys(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (map_values(MAP(1, 'a', 2, 'b')) IS NOT NULL)\nand (\n      map_zip_with(\n        MAP(1, 'a', 2, 'b'), \n        MAP(1, 'x', 2, 'y'), \n        (k, v1, v2) -> concat(v1, v2)) IS NOT NULL\n    )\nand (cardinality(MAP('a', 1, 'b', 2)) == 2)\nand (str_to_map('a:1,b:2,c:3', ',', ':') IS NOT NULL)\nand (\n      transform_keys(\n        map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n        (k, v) -> k + 1) IS NOT NULL\n    )\nand (\n      transform_values(\n        map_from_arrays(ARRAY(1, 2, 3), ARRAY(1, 2, 3)), \n        (k, v) -> k + v) IS NOT NULL\n    )\nand (try_element_at(MAP(1, 'a', 2, 'b'), 2) IS NOT NULL)\nand ((INTERVAL '3:15' HOUR TO MINUTE / 3) IS NOT NULL)\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand (typeof(current_timestamp - (current_date + INTERVAL '1' DAY)) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (add_months('2016-08-31', -6) != NULL)\nand (current_date() != NULL)\nand (current_timestamp() != NULL)\nand (current_timezone() != NULL)\nand (DATE('2021-03-21') != NULL)\nand (date_add('2016-07-30', 1) != NULL)\nand (date_format('2016-04-08', 'y') == 2016)\nand (date_from_unix_date(1) != NULL)\nand (date_sub('2016-07-30', 1) != NULL)\nand (date_trunc('YEAR', '2015-03-05T09:32:05.359') != NULL)\nand (datediff('2009-07-31', '2009-07-30') == 1)\nand (day('2009-07-30') == 30)\nand (dayofmonth('2009-07-30') == 30)\nand (dayofweek('2009-07-30') == 5)\nand (dayofyear('2016-04-09') == 100)\nand (EXTRACT(SECONDS FROM INTERVAL '5:00:30.001' HOUR TO SECOND) == 30)\nand (EXTRACT(WEEK FROM TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') != NULL)\nand (from_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (from_utc_timestamp('2016-08-31', 'Asia/Seoul') != NULL)\nand (hour('2009-07-30 12:58:59') == 10)\nand (last_day('2009-01-12') IS NOT NULL)\nand (make_date(2013, 7, 15) IS NOT NULL)\nand (make_dt_interval(0, 0, 1, -0.1) IS NOT NULL)\nand (make_ym_interval(100, 5) IS NOT NULL)\nand (minute('2009-07-30 12:58:59') == 58)\nand (month('2016-07-30') == 7)\nand (months_between('1997-02-28 10:30:00', '1996-10-30') == 3)\nand (months_between('1997-02-28 10:30:00', '1996-10-30', false) == 2)\nand (next_day('2015-01-14', 'TU') != NULL)\nand (now() != NULL)\nand (quarter('2016-08-31') == 3)\nand (second('2009-07-30 12:58:59') == 59)\nand (TIMESTAMP(123) != NULL)\nand (TIMESTAMP('2020-04-30 12:25:13.45') != NULL)\nand (timestamp_micros(1230219000123123) != NULL)\nand (timestamp_millis(1230219000123) != NULL)\nand (timestamp_seconds(1230219000) != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_utc_timestamp('2017-07-14 02:40:00.0', 'GMT+1') != NULL)\nand (trunc('2015-10-27', 'YEAR') != NULL)\nand (trunc('2019-08-04', 'quarter') != NULL)\nand (try_add(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (try_add(DATE'2021-03-31', INTERVAL '1' MONTH) != NULL)\nand (try_divide(INTERVAL '3:15' HOUR TO MINUTE, 3) != NULL)\nand ((INTERVAL '3' YEAR * 3) != NULL)\nand (try_subtract(DATE'2021-03-20', INTERVAL '2' MONTH) != NULL)\nand (try_subtract(TIMESTAMP'2021-03-20 12:15:29', INTERVAL '3' SECOND) != NULL)\nand (unix_date(DATE('1970-01-02')) == 1)\nand (unix_micros(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_millis(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z')) == 1)\nand (unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 1)\nand (weekday(DATE'2009-07-30') == 1)\nand (EXTRACT(DAYOFWEEK_ISO FROM DATE'2009-07-30') == 4)\nand (weekofyear('2008-02-20') == 8)\nand (year('2016-07-30') == 2016)\nand (ARRAY(1, 2, 3) != NULL)\nand (BIGINT('5') == 5)\nand (binary('Spark SQL') != NULL)\nand (BOOLEAN(1))\nand (CAST(5.6 AS DECIMAL (2, 0)) != NULL)\nand (CAST(INTERVAL '1-2' YEAR TO MONTH AS INTEGER) == 12)\nand (DATE('2021-03-21') != NULL)\nand (decimal('5.2') == 5)\nand (double('5.2') / 2 == 5)\nand (FLOAT('5.2') / 2 == 2)\nand (INT('5') == 5)\nand (make_date(2013, 7, 15) != NULL)\nand (make_dt_interval(100, 13) != NULL)\nand (make_ym_interval(100, 5) == NULL)\nand (MAP(1.0, '2', 3.0, '4') IS NOT NULL)\nand (named_struct('a', 1, 'b', 2, 'c', 3) IS NOT NULL)\nand (smallint('5') == 5)\nand (STRUCT(1, 2, 3) IS NOT NULL)\nand (tinyint('12') == 12)\nand (TIMESTAMP('2020-04-30 12:25:13.45') != NULL)\nand (to_date('2016-12-31', 'yyyy-MM-dd') != NULL)\nand (to_timestamp('2016-12-31 00:12:00') != NULL)\nand (from_csv('1, 0.8', 'a INT, b DOUBLE') != NULL)\nand (schema_of_csv('1,abc') != NULL)\nand (json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') == 5)\nand (json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') != NULL)\nand (schema_of_json('[{\"col\":01}]', MAP('allowNumericLeadingZeros', 'true')) != NULL)\nand (to_json(named_struct('a', 1, 'b', 2)) != NULL)\nand (to_json(MAP(named_struct('a', 1), named_struct('b', 2))) != NULL)\nand (to_json(ARRAY((MAP('a', 1)))) != NULL)\nand (xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()') != NULL)\nand (xpath_boolean('<a><b>1</b></a>', 'a/b'))\nand (xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)') != NULL)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 3)\nand (xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)') == 2)\nand (xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c') != NULL)\nand (\n      assert_true(\n        0 < 1) == NULL\n    )\nand (\n      (\n        CASE\n          WHEN 1 > 0\n            THEN 1\n          WHEN 2 > 0\n            THEN 2.0\n          ELSE 1.2\n        END\n      ) == 1\n    )\nand (\n      (\n        CASE 3\n          WHEN 1\n            THEN 'A'\n          WHEN 2\n            THEN 'B'\n          WHEN 3\n            THEN 'C'\n        END\n      ) != NULL\n    )\nand (coalesce(2, 5 / 0) == 2)\nand (current_catalog() != NULL)\nand (current_database() != NULL)\nand (current_user() != NULL)\nand (decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks') != NULL)\nand (elt(1, 'scala', 'java') != NULL)\nand (greatest(10, 9, 2, 4, 3) == 10)\nand (hash('Spark', ARRAY(123), 2) != NULL)\nand (\n      if(\n        1 < 2, \n        'a', \n        'b') != NULL\n    )\nand (ifnull(NULL, ARRAY('2')) != NULL)\nand (isnull(1))\nand (isnotnull(1))\nand (least(10, 9, 2, 4, 3) == 2)\nand (monotonically_increasing_id() > 10)\nand (nullif(2, 2) == NULL)\nand (nvl(NULL, 2) == 2)\nand (nvl2(NULL, 2, 1) == 1)\nand (typeof(1) != NULL)\nand (uuid() != NULL)\nand (xxhash64('Spark', ARRAY(123), 2) != NULL)\nand ('20'::INTEGER == 20)\nand like('Spark', '_park')\nand ('Spark' LIKE SOME('_park', '_ock'))\nand (bitmap_count(x'00') == 10)\nand (charindex('bar', 'abcbarbar') == 1)\nand (decode(x'FEFF0053007000610072006B002000530051004C', 'UTF-16') != NULL)\nand (like('Spark', '_park'))\nand (len('Spark SQL ') > 10)\nand (levenshtein('kitten', 'sitting', 4) > 10)\nand (('+' || ltrim('abc', 'acbabSparkSQL   ') || '+') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', 'Z', 'z', '9', 'X') != NULL)\nand (mask('AaBb123-&^ASDXYZ921312asd', lowerChar => 'z', upperChar => 'X') != NULL)\nand (mask('AaBb123-&ASDXYZ921312asd', NULL, NULL, NULL, NULL) != NULL)\nand (overlay('Spark SQL' PLACING '_' FROM 6) != NULL)\nand (overlay('Spark SQL' PLACING 'tructured' FROM 2 FOR 4) != NULL)\nand (overlay(encode('Spark SQL', 'utf-8') PLACING encode('_', 'utf-8') FROM 6) != NULL)\nand (position('bar' IN 'abcbarbar') > 2)\nand (regexp_count('Steven Jones and Stephen Smith are the best players', 'Ste(v|ph)en') > 2)\nand (regexp_instr('Mary had a little lamb', NULL) != NULL)\nand (regexp_substr(NULL, 'Ste(v|ph)en') != NULL)\nand (rtrim('ab', 'SparkSQLabcaaba') != NULL)\nand (STRING(4) != NULL)\nand (substr('Spark SQL', -3) != NULL)\nand (substr('Spark SQL' FROM 5 FOR 1) != NULL)\nand (substr('Spark SQL' FROM -3) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_char(DATE'2016-04-08', 'y') != NULL)\nand (to_char(encode('abc', 'utf-8'), 'utf-8') != NULL)\nand (to_varchar(454, '999') != NULL)\nand (to_varchar(DATE'2016-04-08', 'y') != NULL)\nand (to_varchar(x'537061726b2053514c', 'hex') != NULL)\nand (TRIM( 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(BOTH 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(LEADING 'SL' FROM 'SSparkSQLS') != NULL)\nand (TRIM(TRAILING 'SL' FROM 'SSparkSQLS') != NULL)\nand (\n      CAST(try_aes_decrypt(\n        unbase64('MTIzNDU2Nzg5MDEyMdXvR41sJqwZ6hnTU8FRTTtXbL8yeChIZA=='), \n        '1234567890abcdef', \n        'GCM', \n        'DEFAULT', \n        'Some AAD') AS STRING) != NULL\n    )\nand (url_decode('http%3A%2F%2Fspark.apache.org%2Fpath%3Fquery%3D1') != NULL)\nand (url_encode('http://spark.apache.org/path?query=1') != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' + INTERVAL '3' SECOND) != NULL)\nand (bit_reverse(-1) == -1)\nand (bitmap_bit_position(-32768) == 1)\nand (bitmap_bucket_number(-32768) == 1)\nand (MOD(2, 1.8) == 2)\nand (array_append(ARRAY(1, 2, 3), 0) == NULL)\nand (array_compact(ARRAY(1, 2, NULL, 3, NULL, 3)) == NULL)\nand (array_insert(ARRAY('a', 'b', 'c'), 1, 'z') != NULL)\nand (array_prepend(ARRAY(1, 2, 3), 0) != NULL)\nand (get(ARRAY(1, 2, 3), 2) != NULL)\nand (\n      reduce(\n        ARRAY(1, 2, 3), \n        0, \n        (acc, x) -> acc + x) == 2\n    )\nand (shuffle(ARRAY(1, 20, 3, 5)) != NULL)\nand (map_contains_key(MAP(1, 'a', 2, 'b'), 2))\nand ((DATE'2021-03-31' - INTERVAL '1' MONTH) != NULL)\nand ((DATE'2021-03-31' + INTERVAL '1' MONTH) != NULL)\nand ((TIMESTAMP'2021-03-20 12:15:29' - INTERVAL '3' SECOND) != NULL)\nand (date_diff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (date_part('SECONDS', TIMESTAMP'2019-10-01 00:00:01.000001') == 1)\nand (date_part('Week', TIMESTAMP'2019-08-12 01:00:00.123456') == 33)\nand (dateadd('2016-07-30', 1) != NULL)\nand (dateadd(MICROSECOND, 5, TIMESTAMP'2022-02-28 00:00:00') != NULL)\nand (datediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 11:59:59') == 0)\nand (make_interval(0, 0, 1, 1, 12, 30, 1.001001) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887, 'CET') IS NOT NULL)\nand (make_timestamp(NULL, 7, 22, 15, 30, 0) IS NOT NULL)\nand (now() != NULL)\nand (timediff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (timestampdiff(MONTH, TIMESTAMP'2021-02-28 12:00:00', TIMESTAMP'2021-03-28 12:00:00') == 1)\nand (to_unix_timestamp('2016-04-08', 'yyyy-MM-dd') == 100)\nand (try_to_timestamp('2016-12-31', 'yyyy-MM-dd') != NULL)\nand ('20'::INTEGER == 20)\nand (make_interval(100, 11) IS NOT NULL)\nand (make_timestamp(2014, 12, 28, 6, 30, 45.887) IS NOT NULL)\nand (STRING(5) != NULL)\nand (to_char(454, '000.00') != NULL)\nand (to_varchar(454, '999') IS NOT NULL)\nand (from_json('{\"a\":1, \"b\":0.8}', 'a INT, b DOUBLE') IS NOT NULL)\nand (get_json_object('{\"a\":\"b\"}', '$.a') IS NOT NULL)\nand (to_csv(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), MAP('timestampFormat', 'dd/MM/yyyy')) IS NOT NULL)\nand (to_csv(named_struct('a', 1, 'b', 2)) IS NOT NULL)\nand (from_xml('<p><time>26/08/2015</time></p>', 'time Timestamp', MAP('timestampFormat', 'dd/MM/yyyy')) != NULL)\nand (schema_of_xml('<p><a attr=\"2\">1</a><a>3</a></p>', MAP('excludeAttribute', 'true')) IS NOT NULL)\nand (current_metastore() != NULL)\nand (current_schema() != NULL)\nand (current_version() != NULL)\nand (equal_null(2, 2))\nand (\n      iff(\n        1 < 2, \n        'a', \n        'b') == 'a'\n    )\nand (is_account_group_member('admins'))\nand (is_member('admins'))\nand (luhn_check('12345') == NULL)\nand (user() != NULL)\nand (h3_coverash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 0) != NULL)\nand (h3_coverash3string('{\"type\":\"LineString\",\"coordinates\":[[-122.4194,37.7749],[-118.2437,34.0522],[-74.0060,40.7128]]}', 1) != NULL)\nand (h3_longlatash3(-122.4783, 37.8199, 13) > 0)\nand (h3_longlatash3string(-122.4783, 37.8199, 13) != NULL)\nand (h3_pointash3('POINT(-122.4783 37.8199)', 13) > 0)\nand (h3_pointash3string('{\"type\":\"Point\",\"coordinates\":[]}', 15) == NULL)\nand (h3_pointash3string('POINT(-122.4783 37.8199)', 13) != NULL)\nand (\n      h3_polyfillash3(\n        unhex(\n          '0103000000010000000400000050fc1873d79a5ec0d0d556ec2fe342404182e2c7988f5dc0f46c567dae064140aaf1d24d628052c05e4bc8073d5b444050fc1873d79a5ec0d0d556ec2fe34240'), \n        2) != NULL\n    )\nand (h3_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3('Not-a-valid-rep', 2) == NULL)\nand (h3_try_polyfillash3('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_try_polyfillash3string('POLYGON((-122.4194 37.7749,-118.2437 34.0522,-74.0060 40.7128,-122.4194 37.7749))', 2) != NULL)\nand (h3_boundaryasgeojson('8009fffffffffff') != NULL)\nand (h3_boundaryasgeojson(599686042433355775) != NULL)\nand (hex(h3_boundaryaswkb(599686042433355775)) != NULL)\nand (h3_boundaryaswkt(599686042433355775) != NULL)\nand (h3_centerasgeojson(599686042433355775) != NULL)\nand (hex(h3_centeraswkb('8009fffffffffff')) == NULL)\nand (h3_centeraswkt('8009fffffffffff') != NULL)\nand (h3_h3tostring(599686042433355775) != NULL)\nand (h3_stringtoh3('85283473fffffff') == NULL)\nand (h3_ischildof('88283471b9fffff', '85283473fffffff'))\nand (h3_ispentagon(590112357393367039))\nand (h3_isvalid('85283473fffffff'))\nand (h3_try_validate(590112357393367039) != NULL)\nand (h3_validate(590112357393367039) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_hexring(599686042433355775, 1) != NULL)\nand (h3_kring(599686042433355775, 1) != NULL)\nand (h3_kringdistances(599686042433355775, 1) != NULL)\nand (h3_distance(599686030622195711, 599686015589810175) == 2)\nand (h3_maxchild(599686042433355775, 10) != NULL)\nand (h3_minchild(599686042433355775, 10) != NULL)\nand (h3_resolution(599686042433355775) == 5)\nand (h3_tochildren(599686042433355775, 6) != NULL)\nand (h3_toparent(599686042433355775, 0) != NULL)\nand (\n      h3_compact(\n        ARRAY(\n          599686042433355775, \n          599686030622195711, \n          599686044580839423, \n          599686038138388479, \n          599686043507097599, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686040285872127, \n          599686041359613951, \n          599686039212130303, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647)) != NULL\n    )\nand (\n      h3_uncompact(\n        ARRAY(\n          599686030622195711, \n          599686015589810175, \n          599686014516068351, \n          599686034917163007, \n          599686029548453887, \n          599686032769679359, \n          599686198125920255, \n          599686023106002943, \n          599686027400970239, \n          599686013442326527, \n          599686012368584703, \n          599686018811035647, \n          595182446027210751), \n        5) != NULL\n    )"
            }
          },
          "ports" : {
            "inputs" : [ {
              "id" : "MhvP9t8n",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "customer_id",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "first_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "last_name",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "in0"
            } ],
            "outputs" : [ {
              "id" : "Pd48TOEJ",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "customer_id",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "first_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "last_name",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 7
        },
        "Reformat_1_2_2##qvp3ANPI" : {
          "id" : "Reformat_1_2_2##qvp3ANPI",
          "component" : "Reformat",
          "metadata" : {
            "label" : "Reformat_1_2_2",
            "phase" : 0,
            "macroDependencies" : [ ],
            "isLabelGrayed" : false
          },
          "properties" : {
            "columnsSelector" : [ ],
            "expressions" : [ {
              "expression" : {
                "expression" : "CAST(c_int AS STRING)"
              },
              "alias" : "customer_id"
            }, {
              "expression" : {
                "expression" : "c_string"
              },
              "alias" : "first_name"
            }, {
              "expression" : {
                "expression" : "c_string"
              },
              "alias" : "last_name"
            } ]
          },
          "ports" : {
            "inputs" : [ {
              "id" : "TpwHCjXv",
              "schema" : {
                "entityType" : "",
                "providerType" : "databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                } ]
              },
              "slug" : "in0"
            } ],
            "outputs" : [ {
              "id" : "FakDazko",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "customer_id",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "first_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "last_name",
                  "dataType" : {
                    "type" : "String"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 3
        },
        "Limit_4##IqaiY1S9" : {
          "id" : "Limit_4##IqaiY1S9",
          "component" : "Limit",
          "metadata" : {
            "label" : "Limit_4",
            "phase" : 0,
            "isLabelGrayed" : false
          },
          "properties" : {
            "limit" : {
              "expression" : "15"
            }
          },
          "ports" : {
            "inputs" : [ {
              "id" : "NxKetYLf",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "first_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "last_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "id",
                  "dataType" : {
                    "type" : "Integer"
                  }
                } ]
              },
              "slug" : "in0"
            } ],
            "outputs" : [ {
              "id" : "Dde0vBe3",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "first_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "last_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "id",
                  "dataType" : {
                    "type" : "Integer"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 8
        },
        "SQLStatement_6##Ho4sLmrz" : {
          "id" : "SQLStatement_6##Ho4sLmrz",
          "component" : "Reformat",
          "metadata" : {
            "label" : "SQLStatement_6",
            "phase" : 0,
            "isLabelGrayed" : false
          },
          "properties" : {
            "columnsSelector" : [ ],
            "expressions" : [ ]
          },
          "ports" : {
            "inputs" : [ {
              "id" : "SQT9k31P",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                } ]
              },
              "slug" : "SQLStatement_3_2"
            } ],
            "outputs" : [ {
              "id" : "tQQiis3c",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "c_tinyint",
                  "dataType" : {
                    "type" : "TinyInt"
                  }
                }, {
                  "name" : "c_smallint",
                  "dataType" : {
                    "type" : "SmallInt"
                  }
                }, {
                  "name" : "c_int",
                  "dataType" : {
                    "type" : "Integer"
                  }
                }, {
                  "name" : "c_bigint",
                  "dataType" : {
                    "type" : "Bigint"
                  }
                }, {
                  "name" : "c_float",
                  "dataType" : {
                    "type" : "Float"
                  }
                }, {
                  "name" : "c_double",
                  "dataType" : {
                    "type" : "Double"
                  }
                }, {
                  "name" : "c_string",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "c_boolean",
                  "dataType" : {
                    "type" : "Boolean"
                  }
                }, {
                  "name" : "c_array",
                  "dataType" : {
                    "type" : "Array",
                    "dataType" : {
                      "type" : "String"
                    }
                  }
                }, {
                  "name" : "c_struct",
                  "dataType" : {
                    "type" : "Struct",
                    "fields" : [ {
                      "name" : "city",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "state",
                      "dataType" : {
                        "type" : "String"
                      }
                    }, {
                      "name" : "pin",
                      "dataType" : {
                        "type" : "Bigint"
                      }
                    } ]
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 4
        },
        "OrderBy_1##L83fwfyo" : {
          "id" : "OrderBy_1##L83fwfyo",
          "component" : "OrderBy",
          "metadata" : {
            "label" : "OrderBy_1",
            "phase" : 0,
            "macroDependencies" : [ ],
            "isLabelGrayed" : false
          },
          "properties" : {
            "columnsSelector" : [ ],
            "orders" : [ {
              "expression" : {
                "expression" : "first_name"
              },
              "sortType" : "asc",
              "nullsType" : "nulls first"
            } ]
          },
          "ports" : {
            "inputs" : [ {
              "id" : "wtaqcc7u",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "first_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "last_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "id",
                  "dataType" : {
                    "type" : "Integer"
                  }
                } ]
              },
              "slug" : "in0"
            } ],
            "outputs" : [ {
              "id" : "hFQYPy3u",
              "schema" : {
                "entityType" : "",
                "providerType" : "Databricks",
                "fields" : [ {
                  "name" : "first_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "last_name",
                  "dataType" : {
                    "type" : "String"
                  }
                }, {
                  "name" : "id",
                  "dataType" : {
                    "type" : "Integer"
                  }
                } ]
              },
              "slug" : "out"
            } ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "index" : 6
        }
      },
      "connections" : [ {
        "id" : "I69ohd1t",
        "source" : "combine_multiple##PLqUQGPX",
        "sourcePort" : "NUPiSBgU",
        "target" : "Subgraph_9##TeAzZsuQ",
        "targetPort" : "LFwqUFab"
      }, {
        "id" : "l04mVcM3",
        "source" : "Subgraph_9##TeAzZsuQ",
        "sourcePort" : "cIrwjbGL",
        "target" : "Reformat_1_2_1##w3YX9UCX",
        "targetPort" : "W72zMHfx"
      }, {
        "id" : "UJhoIUgc",
        "source" : "Reformat_1_2_1##w3YX9UCX",
        "sourcePort" : "fR12qXg5",
        "target" : "AllExSQL##XoJsNrxY",
        "targetPort" : "VA2EM5rW"
      }, {
        "id" : "H8lcTwQj",
        "source" : "Subgraph_9##TeAzZsuQ",
        "sourcePort" : "lFaXXesj",
        "target" : "Reformat_1_2_2##qvp3ANPI",
        "targetPort" : "TpwHCjXv"
      }, {
        "id" : "IudQCjie",
        "source" : "Subgraph_9##TeAzZsuQ",
        "sourcePort" : "vmbsctld",
        "target" : "SQLStatement_6##Ho4sLmrz",
        "targetPort" : "SQT9k31P"
      }, {
        "id" : "CIne2IvY",
        "source" : "SQLStatement_6##Ho4sLmrz",
        "sourcePort" : "tQQiis3c",
        "target" : "SQLStatement_4_2##DQWlcX95",
        "targetPort" : "dPzd9nvA"
      }, {
        "id" : "IJopUNe7",
        "source" : "Subgraph_9##TeAzZsuQ",
        "sourcePort" : "oRP3XW6M",
        "target" : "OrderBy_1##L83fwfyo",
        "targetPort" : "wtaqcc7u"
      }, {
        "id" : "WCv039us",
        "source" : "Reformat_1_2_2##qvp3ANPI",
        "sourcePort" : "FakDazko",
        "target" : "Filter_1_1_1##bWGVFGv6",
        "targetPort" : "MhvP9t8n"
      }, {
        "id" : "BVB9WJt4",
        "source" : "OrderBy_1##L83fwfyo",
        "sourcePort" : "hFQYPy3u",
        "target" : "Limit_4##IqaiY1S9",
        "targetPort" : "NxKetYLf"
      }, {
        "id" : "GXF6e8q2",
        "source" : "Limit_4##IqaiY1S9",
        "sourcePort" : "Dde0vBe3",
        "target" : "combine_multiple##PLqUQGPX",
        "targetPort" : "QoQ5CkDa"
      }, {
        "id" : "yN0Xk8dX",
        "source" : "SQLStatement_1_3##jxgFNRnX",
        "sourcePort" : "lHa3W9WL",
        "target" : "combine_multiple##PLqUQGPX",
        "targetPort" : "LDNzike5"
      }, {
        "id" : "Viz4ZUu5",
        "source" : "SQLStatement_4_2##DQWlcX95",
        "sourcePort" : "vAUbtrf7",
        "target" : "combine_multiple##PLqUQGPX",
        "targetPort" : "pwZKsOYZ"
      }, {
        "id" : "UbJjoGI5",
        "source" : "AllExSQL##XoJsNrxY",
        "sourcePort" : "W8IZW9ys",
        "target" : "combine_multiple##PLqUQGPX",
        "targetPort" : "WFdpKvpN"
      }, {
        "id" : "k7MemBDR",
        "source" : "Filter_1_1_1##bWGVFGv6",
        "sourcePort" : "Pd48TOEJ",
        "target" : "combine_multiple##PLqUQGPX",
        "targetPort" : "Kp7RIspg"
      } ],
      "ports" : {
        "inputs" : [ {
          "id" : "cIrwjbGL",
          "slug" : "all_type_parquet_1_1"
        }, {
          "id" : "lFaXXesj",
          "slug" : "all_type_parquet_1_2"
        }, {
          "id" : "vmbsctld",
          "slug" : "SQLStatement_3_2"
        }, {
          "id" : "oRP3XW6M",
          "slug" : "Limit_1"
        } ],
        "outputs" : [ {
          "id" : "LFwqUFab",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : { },
      "canonical" : false,
      "index" : 53
    },
    "child_deduplicat##efcnXwJ0" : {
      "id" : "child_deduplicat##efcnXwJ0",
      "component" : "Macro",
      "metadata" : {
        "label" : "child_deduplicate_custom_1",
        "phase" : 0,
        "macroDependencies" : [ "SQL_DatabricksSharedBasic.child_deduplicate_custom" ],
        "comment" : "Removes duplicate child records to ensure data accuracy.",
        "isLabelGrayed" : false
      },
      "properties" : {
        "macroName" : "child_deduplicate_custom",
        "parameters" : [ {
          "name" : "relation",
          "value" : "'Subgraph_9'"
        }, {
          "name" : "partition_by",
          "value" : "'id'"
        }, {
          "name" : "order_by",
          "value" : "'first_name'"
        } ],
        "projectName" : "SQL_DatabricksSharedBasic"
      },
      "ports" : {
        "inputs" : [ {
          "id" : "fjeoYXjl",
          "slug" : "Subgraph_9"
        } ],
        "outputs" : [ {
          "id" : "nysjiKQG",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 54
    },
    "distinct_rows_by##mpOHVmYh" : {
      "id" : "distinct_rows_by##mpOHVmYh",
      "component" : "Deduplicate",
      "metadata" : {
        "label" : "distinct_rows_by_partition",
        "phase" : 0,
        "comment" : "Identifies unique entries based on city, state, and a boolean flag, prioritizing specific numeric values.",
        "isLabelGrayed" : false
      },
      "properties" : {
        "dedupColumns" : [ {
          "expression" : {
            "expression" : "concat(c_struct.city, c_struct.state)"
          }
        }, {
          "expression" : {
            "expression" : "c_boolean"
          }
        } ],
        "dedupType" : "first",
        "columnsSelector" : [ ],
        "orders" : [ {
          "expression" : {
            "expression" : {
              "expression" : "c_int"
            }
          },
          "sortType" : "asc"
        }, {
          "expression" : {
            "expression" : {
              "expression" : "c_bigint"
            }
          },
          "sortType" : "desc"
        } ],
        "useOrderBy" : true
      },
      "ports" : {
        "inputs" : [ {
          "id" : "pEMZAn8H",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "P4nBZ84D",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 10
    },
    "Join_1##l64MSVWf" : {
      "id" : "Join_1##l64MSVWf",
      "component" : "Join",
      "metadata" : {
        "label" : "Join_1",
        "phase" : 0,
        "macroDependencies" : [ ],
        "isLabelGrayed" : false
      },
      "properties" : {
        "conditions" : [ {
          "alias" : "in1",
          "expression" : {
            "expression" : "in0.c_smallint != in1.c_int"
          },
          "joinType" : "INNER"
        }, {
          "alias" : "in2",
          "expression" : {
            "expression" : "in1.c_string != in2.customer_id"
          },
          "joinType" : "INNER"
        }, {
          "alias" : "in3",
          "expression" : {
            "expression" : "in2.customer_id != in3.customer_id"
          },
          "joinType" : "INNER"
        }, {
          "alias" : "in4",
          "expression" : {
            "expression" : "in3.customer_id != CAST(in4.c1 AS STRING)"
          },
          "joinType" : "INNER"
        } ],
        "expressions" : [ {
          "expression" : {
            "expression" : "in0.c_tinyint"
          },
          "alias" : "c_tinyint"
        }, {
          "expression" : {
            "expression" : "in0.c_smallint"
          },
          "alias" : "c_smallint"
        }, {
          "expression" : {
            "expression" : "in1.c_int"
          },
          "alias" : "c_int"
        }, {
          "expression" : {
            "expression" : "in0.c_bigint"
          },
          "alias" : "c_bigint"
        }, {
          "expression" : {
            "expression" : "in0.c_float"
          },
          "alias" : "c_float"
        }, {
          "expression" : {
            "expression" : "in0.c_double"
          },
          "alias" : "c_double"
        }, {
          "expression" : {
            "expression" : "in0.c_string"
          },
          "alias" : "c_string"
        }, {
          "expression" : {
            "expression" : "in0.c_boolean"
          },
          "alias" : "c_boolean"
        }, {
          "expression" : {
            "expression" : "in0.c_array"
          },
          "alias" : "c_array"
        }, {
          "expression" : {
            "expression" : "in0.c_struct"
          },
          "alias" : "c_struct"
        } ],
        "activeTab" : "conditions",
        "columnsSelector" : [ ],
        "headAlias" : "in0"
      },
      "ports" : {
        "inputs" : [ {
          "id" : "zutYwKaF",
          "slug" : "in0"
        }, {
          "id" : "afCihXKz",
          "slug" : "in1"
        }, {
          "id" : "OzGUx0Zj",
          "slug" : "in2"
        }, {
          "id" : "VphZ5NUU",
          "slug" : "in3"
        }, {
          "id" : "AVYxyekn",
          "slug" : "in4"
        } ],
        "outputs" : [ {
          "id" : "yDHLqcAA",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 33
    },
    "Aggregate_1##qMkO6E5o" : {
      "id" : "Aggregate_1##qMkO6E5o",
      "component" : "Aggregate",
      "metadata" : {
        "label" : "Aggregate_1",
        "phase" : 0,
        "macroDependencies" : [ ],
        "isLabelGrayed" : false
      },
      "properties" : {
        "aggregate" : [ {
          "expression" : {
            "expression" : "any_value(c_bool_expr)"
          },
          "alias" : "c_bool_expr"
        }, {
          "expression" : {
            "expression" : "any_value(c_concat_expr)"
          },
          "alias" : "c_concat_expr"
        }, {
          "expression" : {
            "expression" : "any_value(c_add_expr)"
          },
          "alias" : "c_add_expr"
        }, {
          "expression" : {
            "expression" : "any_value(c_tinyint)"
          },
          "alias" : "c_tinyint"
        }, {
          "expression" : {
            "expression" : "any_value(c_smallint)"
          },
          "alias" : "c_smallint"
        }, {
          "expression" : {
            "expression" : "any_value(c_int)"
          },
          "alias" : "c_int"
        }, {
          "expression" : {
            "expression" : "any_value(c_bigint)"
          },
          "alias" : "c_bigint"
        }, {
          "expression" : {
            "expression" : "any_value(c_float)"
          },
          "alias" : "c_float"
        }, {
          "expression" : {
            "expression" : "any_value(c_double)"
          },
          "alias" : "c_double"
        }, {
          "expression" : {
            "expression" : "any_value(c_string)"
          },
          "alias" : "c_string"
        }, {
          "expression" : {
            "expression" : "any_value(c_boolean)"
          },
          "alias" : "c_boolean"
        }, {
          "expression" : {
            "expression" : "any_value(c_macro)"
          },
          "alias" : "c_macro"
        }, {
          "expression" : {
            "expression" : "any_value(c_if)"
          },
          "alias" : "c_if"
        }, {
          "expression" : {
            "expression" : "any_value(cfor_col_0)"
          },
          "alias" : "cfor_col_0"
        }, {
          "expression" : {
            "expression" : "any_value(cfor_col_1)"
          },
          "alias" : "cfor_col_1"
        }, {
          "expression" : {
            "expression" : "any_value(cfor_col_2)"
          },
          "alias" : "cfor_col_2"
        }, {
          "expression" : {
            "expression" : "any_value(cfor_col_3)"
          },
          "alias" : "cfor_col_3"
        }, {
          "expression" : {
            "expression" : "any_value(cfor_col_4)"
          },
          "alias" : "cfor_col_4"
        }, {
          "expression" : {
            "expression" : "any_value(c_databricks_project_main)"
          },
          "alias" : "c_databricks_project_main"
        }, {
          "expression" : {
            "expression" : "any_value(c_base_project)"
          },
          "alias" : "c_base_project"
        }, {
          "expression" : {
            "expression" : "any_value(c_dbt_utils_functions)"
          },
          "alias" : "c_dbt_utils_functions"
        } ],
        "allowSelection" : true,
        "condition" : {
          "expression" : ""
        },
        "activeTab" : "aggregate",
        "columnsSelector" : [ ],
        "groupBy" : [ {
          "expression" : {
            "expression" : "c_boolean"
          }
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "Lr0Gi9v5",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "CPOF4ua7",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 22
    },
    "SQLStatement_1##FwIWKvP9" : {
      "id" : "SQLStatement_1##FwIWKvP9",
      "component" : "SQLStatement",
      "metadata" : {
        "label" : "SQLStatement_1",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "fileTabs" : [ {
          "path" : "out",
          "id" : "out",
          "language" : "sql",
          "content" : "SELECT *\n\nFROM all_type_partitioned\n\nWHERE c_int != (\n        SELECT count(*)\n        \n        FROM hive_metastore.qa_database.tpcds_uitesting_shared_1\n       )\n\nLIMIT 100\n"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "jffIIUQb",
          "slug" : "all_type_partitioned"
        } ],
        "outputs" : [ {
          "id" : "iH1XIsYw",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 1
    },
    "OrderBy_2##obOwfzVw" : {
      "id" : "OrderBy_2##obOwfzVw",
      "component" : "OrderBy",
      "metadata" : {
        "label" : "OrderBy_2",
        "phase" : 0,
        "macroDependencies" : [ ],
        "isLabelGrayed" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "orders" : [ {
          "expression" : {
            "expression" : "concat(c_string, c_int)"
          },
          "sortType" : "asc"
        }, {
          "expression" : {
            "expression" : "c_tinyint"
          },
          "sortType" : "desc",
          "nullsType" : "nulls first"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "v22XlawG",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "Rs6L2e60",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 2
    },
    "Join_1_3##Pz6I6Y5X" : {
      "id" : "Join_1_3##Pz6I6Y5X",
      "component" : "Join",
      "metadata" : {
        "label" : "Join_1_3",
        "phase" : 0,
        "macroDependencies" : [ ],
        "isLabelGrayed" : false
      },
      "properties" : {
        "conditions" : [ {
          "alias" : "in1",
          "expression" : {
            "expression" : "in0.customer_id != in1.customer_id"
          },
          "joinType" : "INNER"
        } ],
        "expressions" : [ {
          "expression" : {
            "expression" : "in0.customer_id"
          },
          "alias" : "customer_id"
        }, {
          "expression" : {
            "expression" : "in1.first_name"
          },
          "alias" : "first_name"
        }, {
          "expression" : {
            "expression" : "in0.first_name"
          },
          "alias" : "last_name"
        }, {
          "expression" : {
            "expression" : "concat('expression', in0.c1)"
          },
          "alias" : "c_expressions"
        }, {
          "expression" : {
            "expression" : "in1.c1"
          },
          "alias" : "c1"
        } ],
        "activeTab" : "conditions",
        "columnsSelector" : [ ],
        "headAlias" : "in0"
      },
      "ports" : {
        "inputs" : [ {
          "id" : "cudopq1S",
          "slug" : "in0"
        }, {
          "id" : "rgckd5Kn",
          "slug" : "in1"
        } ],
        "outputs" : [ {
          "id" : "wPi0J2uR",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 19
    },
    "qa_complex_macro##FyjblLRc" : {
      "id" : "qa_complex_macro##FyjblLRc",
      "component" : "Macro",
      "metadata" : {
        "label" : "qa_complex_macro_1",
        "phase" : 0,
        "macroDependencies" : [ "SQL_DatabricksParentProjectMain.qa_complex_macro" ],
        "isLabelGrayed" : false
      },
      "properties" : {
        "macroName" : "qa_complex_macro",
        "parameters" : [ {
          "name" : "model",
          "value" : "'raw_customers'"
        }, {
          "name" : "column_name_int",
          "value" : "'id'"
        }, {
          "name" : "accepted_values",
          "value" : "[1, 2, 3, 4, 5]"
        } ],
        "projectName" : "SQL_DatabricksParentProjectMain"
      },
      "ports" : {
        "inputs" : [ {
          "id" : "IOhersUd",
          "slug" : "raw_customers"
        } ],
        "outputs" : [ {
          "id" : "j6ZVZ0Ok",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 47
    },
    "joined_records##TLCQA6cU" : {
      "id" : "joined_records##TLCQA6cU",
      "component" : "Join",
      "metadata" : {
        "label" : "joined_records",
        "phase" : 0,
        "macroDependencies" : [ ],
        "comment" : "Combines various unique records to create a comprehensive dataset for analysis.",
        "isLabelGrayed" : false
      },
      "properties" : {
        "conditions" : [ {
          "alias" : "in1",
          "expression" : {
            "expression" : "in0.c_tinyint != in1.c_tinyint"
          },
          "joinType" : "INNER"
        }, {
          "alias" : "in2",
          "expression" : {
            "expression" : "in1.c_tinyint != in2.c_smallint"
          },
          "joinType" : "INNER"
        } ],
        "expressions" : [ {
          "expression" : {
            "expression" : "in0.c_tinyint"
          },
          "alias" : "c_tinyint"
        }, {
          "expression" : {
            "expression" : "in0.c_int_string"
          },
          "alias" : "c_int_string"
        }, {
          "expression" : {
            "expression" : "in1.c_bigint"
          },
          "alias" : "c_bigint"
        }, {
          "expression" : {
            "expression" : "in1.c_array"
          },
          "alias" : "c_array"
        }, {
          "expression" : {
            "expression" : "in2.c_struct"
          },
          "alias" : "c_struct"
        }, {
          "expression" : {
            "expression" : "in2.c_string"
          },
          "alias" : "c_string"
        }, {
          "expression" : {
            "expression" : "in2.c_double"
          },
          "alias" : "c_double"
        } ],
        "activeTab" : "conditions",
        "columnsSelector" : [ ],
        "headAlias" : "in0"
      },
      "ports" : {
        "inputs" : [ {
          "id" : "gbboAHE3",
          "slug" : "in0"
        }, {
          "id" : "wK5Tquc3",
          "slug" : "in1"
        }, {
          "id" : "atyX5VCw",
          "slug" : "in2"
        } ],
        "outputs" : [ {
          "id" : "ZvptKXTw",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 11
    },
    "SQLStatement_1_4##YgEL1j5u" : {
      "id" : "SQLStatement_1_4##YgEL1j5u",
      "component" : "Reformat",
      "metadata" : {
        "label" : "SQLStatement_1_4",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "expressions" : [ ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "UznCUNGW",
          "slug" : "all_type_parquet_2"
        } ],
        "outputs" : [ {
          "id" : "jWac3QWH",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 28
    },
    "all_type_parquet##LfykeWbi" : {
      "id" : "all_type_parquet##LfykeWbi",
      "component" : "Source",
      "metadata" : {
        "label" : "all_type_parquet",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "table" : {
          "name" : "all_type_parquet",
          "sourceType" : "Source",
          "sourceName" : "spark_catalog.qa_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "EHi9Wmco",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 3
    },
    "Reformat_1##RcSVdP8s" : {
      "id" : "Reformat_1##RcSVdP8s",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Reformat_1",
        "phase" : 0,
        "macroDependencies" : [ ],
        "isLabelGrayed" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "expressions" : [ {
          "expression" : {
            "expression" : "'This is my first name'"
          },
          "alias" : "first_name"
        }, {
          "expression" : {
            "expression" : "'This is my last name'"
          },
          "alias" : "last_name"
        }, {
          "expression" : {
            "expression" : "1 + col_int"
          },
          "alias" : "id"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "XrHCUp0S",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "VJABmhvi",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 48
    },
    "SetOperation_2##QfXoji2C" : {
      "id" : "SetOperation_2##QfXoji2C",
      "component" : "SetOperation",
      "metadata" : {
        "label" : "SetOperation_2",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "operationType" : "union",
        "preserveDuplicates" : false,
        "useMinus" : false,
        "inputAliases" : [ "in0", "in1" ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "oKAwiK8w",
          "slug" : "in0"
        }, {
          "id" : "ybkObwBr",
          "slug" : "in1"
        } ],
        "outputs" : [ {
          "id" : "LDcfc87G",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 42
    },
    "Limit_1##UGiQpfmj" : {
      "id" : "Limit_1##UGiQpfmj",
      "component" : "Limit",
      "metadata" : {
        "label" : "Limit_1",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "limit" : {
          "expression" : "100"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "C25RuDzQ",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "dT2JYace",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 50
    },
    "all_type_non_par##lR0VSde9" : {
      "id" : "all_type_non_par##lR0VSde9",
      "component" : "Source",
      "metadata" : {
        "label" : "all_type_non_partitioned",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "table" : {
          "name" : "all_type_non_partitioned",
          "sourceType" : "Source",
          "sourceName" : "hive_metastore.qa_db_warehouse"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "ixVd4FlS",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 6
    },
    "SetOperation_3##syZMeCJU" : {
      "id" : "SetOperation_3##syZMeCJU",
      "component" : "SetOperation",
      "metadata" : {
        "label" : "SetOperation_3",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "operationType" : "except",
        "preserveDuplicates" : false,
        "useMinus" : false,
        "inputAliases" : [ "in0", "in1" ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "cRLfByNP",
          "slug" : "in0"
        }, {
          "id" : "O3w0rkJl",
          "slug" : "in1"
        } ],
        "outputs" : [ {
          "id" : "XghlZEzh",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 43
    },
    "combine_multiple##cZTRlagh" : {
      "id" : "combine_multiple##cZTRlagh",
      "component" : "Macro",
      "metadata" : {
        "label" : "combine_multiple_tables_1",
        "phase" : 0,
        "macroDependencies" : [ "SQL_DatabricksSharedBasic.combine_multiple_tables" ],
        "isLabelGrayed" : false
      },
      "properties" : {
        "macroName" : "combine_multiple_tables",
        "parameters" : [ {
          "name" : "table_1",
          "value" : "'Limit_2'"
        }, {
          "name" : "table_2",
          "value" : "'Limit_5'"
        }, {
          "name" : "table_3",
          "value" : "'child_deduplicate_custom_1'"
        }, {
          "name" : "table_4",
          "value" : "'Limit_3'"
        }, {
          "name" : "table_5",
          "value" : "'SetOperation_3'"
        }, {
          "name" : "col_table_1",
          "value" : "'c_int'"
        } ],
        "projectName" : "SQL_DatabricksSharedBasic"
      },
      "ports" : {
        "inputs" : [ {
          "id" : "cZyYivSu",
          "slug" : "Limit_2"
        }, {
          "id" : "oST7rrGf",
          "slug" : "Limit_5"
        }, {
          "id" : "bD01vuY1",
          "slug" : "child_deduplicate_custom_1"
        }, {
          "id" : "H22wdeil",
          "slug" : "Limit_3"
        }, {
          "id" : "EEPujDnw",
          "slug" : "SetOperation_3"
        } ],
        "outputs" : [ {
          "id" : "bveAGifc",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 55
    },
    "Reformat_1_1##sgQiKkpM" : {
      "id" : "Reformat_1_1##sgQiKkpM",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Reformat_1_1",
        "phase" : 0,
        "macroDependencies" : [ ],
        "isLabelGrayed" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "expressions" : [ {
          "expression" : {
            "expression" : "CAST(c_int AS STRING)"
          },
          "alias" : "customer_id"
        }, {
          "expression" : {
            "expression" : "c_string"
          },
          "alias" : "first_name"
        }, {
          "expression" : {
            "expression" : "c_string"
          },
          "alias" : "last_name"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "jpfouXjX",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "sqww3jdg",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 4
    },
    "Limit8Test1##RUqk4uKf" : {
      "id" : "Limit8Test1##RUqk4uKf",
      "component" : "Limit",
      "metadata" : {
        "label" : "Limit8Test1",
        "phase" : 0,
        "comment" : "Extracts a sample of five records from the combined customer and asset data for review.",
        "isLabelGrayed" : false
      },
      "properties" : {
        "limit" : {
          "expression" : "5"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "SLN17Aib",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "PLLrxz5e",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 25
    },
    "all_type_parquet##xv8QLqV9" : {
      "id" : "all_type_parquet##xv8QLqV9",
      "component" : "Reformat",
      "metadata" : {
        "label" : "all_type_parquet_2",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "expressions" : [ ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "sIoFTxz0",
          "slug" : "all_type_parquet"
        } ],
        "outputs" : [ {
          "id" : "FAfMDjz1",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 27
    },
    "SQLStatement_3_2##HFyWSEnu" : {
      "id" : "SQLStatement_3_2##HFyWSEnu",
      "component" : "Filter",
      "metadata" : {
        "label" : "SQLStatement_3_2",
        "phase" : 0,
        "macroDependencies" : [ ],
        "isLabelGrayed" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "condition" : {
          "expression" : "c_smallint > 10"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "m5sBk7e1",
          "slug" : "SQLStatement_3_1_1"
        } ],
        "outputs" : [ {
          "id" : "JWsems7u",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 45
    },
    "env_uitesting_sh##lOeJJtRZ" : {
      "id" : "env_uitesting_sh##lOeJJtRZ",
      "component" : "Model",
      "metadata" : {
        "label" : "env_uitesting_shared_mid_model_1",
        "phase" : 0,
        "isLabelGrayed" : false
      },
      "properties" : {
        "table" : {
          "name" : "env_uitesting_shared_mid_model_1",
          "sourceType" : "Model"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "vEP1BIGm",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 26
    },
    "unique_tinyint_r##sXg2G2up" : {
      "id" : "unique_tinyint_r##sXg2G2up",
      "component" : "Deduplicate",
      "metadata" : {
        "label" : "unique_tinyint_records",
        "phase" : 0,
        "comment" : "Identifies unique records based on a specific small integer value.",
        "isLabelGrayed" : false
      },
      "properties" : {
        "dedupColumns" : [ {
          "expression" : {
            "expression" : "c_tinyint"
          }
        } ],
        "dedupType" : "unique_only",
        "columnsSelector" : [ ],
        "orders" : [ ],
        "useOrderBy" : false
      },
      "ports" : {
        "inputs" : [ {
          "id" : "GK7D5Oo1",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "UwItWJph",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 8
    },
    "distinct_all_typ##QNpRWLdn" : {
      "id" : "distinct_all_typ##QNpRWLdn",
      "component" : "Deduplicate",
      "metadata" : {
        "label" : "distinct_all_types",
        "phase" : 0,
        "comment" : "Extracts unique combinations of tiny integer values and concatenated integer-string pairs.",
        "isLabelGrayed" : false
      },
      "properties" : {
        "dedupColumns" : [ {
          "expression" : {
            "expression" : "c_tinyint"
          }
        }, {
          "expression" : {
            "expression" : "concat(c_int, c_string)"
          },
          "alias" : "c_int_string"
        } ],
        "dedupType" : "distinct",
        "columnsSelector" : [ ],
        "orders" : [ ],
        "useOrderBy" : false
      },
      "ports" : {
        "inputs" : [ {
          "id" : "SLTyj1BG",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "iOpUIbw4",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "index" : 7
    }
  },
  "connections" : [ {
    "id" : "Fd50Fwwn",
    "source" : "all_type_partiti##JqPGws0P",
    "sourcePort" : "oRENQq5s",
    "target" : "SQLStatement_1##FwIWKvP9",
    "targetPort" : "jffIIUQb"
  }, {
    "id" : "WV0sdKGl",
    "source" : "SQLStatement_1##FwIWKvP9",
    "sourcePort" : "iH1XIsYw",
    "target" : "OrderBy_2##obOwfzVw",
    "targetPort" : "v22XlawG"
  }, {
    "id" : "DsXIjKlQ",
    "source" : "all_type_parquet##LfykeWbi",
    "sourcePort" : "EHi9Wmco",
    "target" : "Reformat_1_1##sgQiKkpM",
    "targetPort" : "jpfouXjX"
  }, {
    "id" : "QfNFc1jN",
    "source" : "Reformat_1_1##sgQiKkpM",
    "sourcePort" : "sqww3jdg",
    "target" : "Reformat_2_1##fpew3mCh",
    "targetPort" : "hNVTcaFF"
  }, {
    "id" : "nQ2iWEgq",
    "source" : "all_type_non_par##lR0VSde9",
    "sourcePort" : "ixVd4FlS",
    "target" : "distinct_all_typ##QNpRWLdn",
    "targetPort" : "SLTyj1BG"
  }, {
    "id" : "dwgctJ1F",
    "source" : "distinct_all_typ##QNpRWLdn",
    "sourcePort" : "iOpUIbw4",
    "target" : "unique_tinyint_r##sXg2G2up",
    "targetPort" : "GK7D5Oo1"
  }, {
    "id" : "Nd9rsVnf",
    "source" : "all_type_non_par##lR0VSde9",
    "sourcePort" : "ixVd4FlS",
    "target" : "distinct_rows_by##V2c8rtBi",
    "targetPort" : "dt1BtfuL"
  }, {
    "id" : "YIOGofK0",
    "source" : "all_type_non_par##lR0VSde9",
    "sourcePort" : "ixVd4FlS",
    "target" : "distinct_rows_by##mpOHVmYh",
    "targetPort" : "pEMZAn8H"
  }, {
    "id" : "EXWbP4zp",
    "source" : "unique_tinyint_r##sXg2G2up",
    "sourcePort" : "UwItWJph",
    "target" : "joined_records##TLCQA6cU",
    "targetPort" : "gbboAHE3"
  }, {
    "id" : "Pi7tJaUe",
    "source" : "distinct_rows_by##mpOHVmYh",
    "sourcePort" : "P4nBZ84D",
    "target" : "joined_records##TLCQA6cU",
    "targetPort" : "wK5Tquc3"
  }, {
    "id" : "i8PY5zE6",
    "source" : "distinct_rows_by##V2c8rtBi",
    "sourcePort" : "ozgZqvZy",
    "target" : "joined_records##TLCQA6cU",
    "targetPort" : "atyX5VCw"
  }, {
    "id" : "LNa0EXIT",
    "source" : "Reformat_2_1##fpew3mCh",
    "sourcePort" : "V8wzgb9G",
    "target" : "Join_1_2##Z3k6smNg",
    "targetPort" : "VtXIXWNj"
  }, {
    "id" : "yb7KvHvy",
    "source" : "SQLStatement_1_2##KqYhoGIO",
    "sourcePort" : "M0l8iode",
    "target" : "Join_1_2##Z3k6smNg",
    "targetPort" : "Raysu7mS"
  }, {
    "id" : "EpJe7NzH",
    "source" : "joined_records##TLCQA6cU",
    "sourcePort" : "ZvptKXTw",
    "target" : "Join_1_2##Z3k6smNg",
    "targetPort" : "Fi3fD2JP"
  }, {
    "id" : "hGpzpB0E",
    "source" : "all_type_parquet##eBSnmOcJ",
    "sourcePort" : "gfLAwObK",
    "target" : "Reformat_1_2_1_1##xV44CKVh",
    "targetPort" : "DTRud8rZ"
  }, {
    "id" : "jGpC2UAN",
    "source" : "Reformat_1_2_1_1##xV44CKVh",
    "sourcePort" : "jYGjECym",
    "target" : "AllExReformat##KUwuSZiz",
    "targetPort" : "LUyVBYww"
  }, {
    "id" : "vo9Xb3sT",
    "source" : "AllExReformat##KUwuSZiz",
    "sourcePort" : "h55HgZZD",
    "target" : "SQLStatement_3_1##FLS8gMMz",
    "targetPort" : "t3HKLt6a"
  }, {
    "id" : "fhaMaBcf",
    "source" : "AllExReformat##KUwuSZiz",
    "sourcePort" : "h55HgZZD",
    "target" : "SQLStatement_2_1##hIGuepnA",
    "targetPort" : "q5zul11w"
  }, {
    "id" : "tN9g3sfp",
    "source" : "SQLStatement_2_1##hIGuepnA",
    "sourcePort" : "aKu5nwbA",
    "target" : "Join_1_3##Pz6I6Y5X",
    "targetPort" : "cudopq1S"
  }, {
    "id" : "DCOwvZn1",
    "source" : "SQLStatement_3_1##FLS8gMMz",
    "sourcePort" : "zCPlXBHr",
    "target" : "Join_1_3##Pz6I6Y5X",
    "targetPort" : "rgckd5Kn"
  }, {
    "id" : "o0vWrt0o",
    "source" : "env_uitesting_sh##ViNgWa7a",
    "sourcePort" : "E7pQZIbR",
    "target" : "AllStunningOne##YqzI9HJz",
    "targetPort" : "LZr3ZfIe"
  }, {
    "id" : "uYxnhw7s",
    "source" : "AllStunningOne##YqzI9HJz",
    "sourcePort" : "p1WQgSYw",
    "target" : "Aggregate_1##qMkO6E5o",
    "targetPort" : "Lr0Gi9v5"
  }, {
    "id" : "INvPgup0",
    "source" : "Aggregate_1##qMkO6E5o",
    "sourcePort" : "CPOF4ua7",
    "target" : "Limit_5##co2K7iJv",
    "targetPort" : "jY7OicnF"
  }, {
    "id" : "T7tkWhy9",
    "source" : "Join_1_3##Pz6I6Y5X",
    "sourcePort" : "wPi0J2uR",
    "target" : "Limit_1_1##oipKrHWC",
    "targetPort" : "bSGotuks"
  }, {
    "id" : "flN12xaN",
    "source" : "Join_1_2##Z3k6smNg",
    "sourcePort" : "jwyEV8Hk",
    "target" : "Limit8Test1##RUqk4uKf",
    "targetPort" : "SLN17Aib"
  }, {
    "id" : "GV2oY87X",
    "source" : "all_type_parquet##LfykeWbi",
    "sourcePort" : "EHi9Wmco",
    "target" : "all_type_parquet##xv8QLqV9",
    "targetPort" : "sIoFTxz0"
  }, {
    "id" : "frYnyIMt",
    "source" : "all_type_parquet##xv8QLqV9",
    "sourcePort" : "FAfMDjz1",
    "target" : "SQLStatement_1_4##YgEL1j5u",
    "targetPort" : "UznCUNGW"
  }, {
    "id" : "SkU2Vyvk",
    "source" : "SQLStatement_1_4##YgEL1j5u",
    "sourcePort" : "jWac3QWH",
    "target" : "SQLStatement_1_1##qFpuukPd",
    "targetPort" : "Pav6qHKt"
  }, {
    "id" : "YjzmEHCJ",
    "source" : "SQLStatement_1_1##qFpuukPd",
    "sourcePort" : "zkpV8UIH",
    "target" : "SQLStatement_2_2##QPEBhr65",
    "targetPort" : "nIeiN2rB"
  }, {
    "id" : "zriqjqEX",
    "source" : "SQLStatement_1_1##qFpuukPd",
    "sourcePort" : "zkpV8UIH",
    "target" : "Subgraph_3##ROOz7rQT",
    "targetPort" : "ipJ3E36Z"
  }, {
    "id" : "Ob28Kzsj",
    "source" : "SQLStatement_2_2##QPEBhr65",
    "sourcePort" : "UGmpU5hA",
    "target" : "Subgraph_3##ROOz7rQT",
    "targetPort" : "Bynb45IB"
  }, {
    "id" : "vnfRzLmh",
    "source" : "Subgraph_2##UxrUlhgc",
    "sourcePort" : "e7vuldox",
    "target" : "Join_1##l64MSVWf",
    "targetPort" : "zutYwKaF"
  }, {
    "id" : "wPz8YJ34",
    "source" : "env_uitesting_sh##lOeJJtRZ",
    "sourcePort" : "vEP1BIGm",
    "target" : "Join_1##l64MSVWf",
    "targetPort" : "afCihXKz"
  }, {
    "id" : "WW9f0khd",
    "source" : "Limit8Test1##RUqk4uKf",
    "sourcePort" : "PLLrxz5e",
    "target" : "Join_1##l64MSVWf",
    "targetPort" : "OzGUx0Zj"
  }, {
    "id" : "SGpZaK1R",
    "source" : "Limit_1_1##oipKrHWC",
    "sourcePort" : "QdSp5f15",
    "target" : "Join_1##l64MSVWf",
    "targetPort" : "VphZ5NUU"
  }, {
    "id" : "tTckx9xn",
    "source" : "Subgraph_3##ROOz7rQT",
    "sourcePort" : "FHybSxAa",
    "target" : "Join_1##l64MSVWf",
    "targetPort" : "AVYxyekn"
  }, {
    "id" : "dYuwTwWH",
    "source" : "Join_1##l64MSVWf",
    "sourcePort" : "yDHLqcAA",
    "target" : "Limit_2##aBU0L71i",
    "targetPort" : "LiWsHfSD"
  }, {
    "id" : "lvC3QRwQ",
    "source" : "env_uitesting_ma##gdBapS9s",
    "sourcePort" : "lmchkyLa",
    "target" : "Subgraph_10##pzblqig4",
    "targetPort" : "NlrE2D5f"
  }, {
    "id" : "Nke8tXJP",
    "source" : "item##CKTy9Wh2",
    "sourcePort" : "e8VZMlov",
    "target" : "Subgraph_10##pzblqig4",
    "targetPort" : "jDMQxDUF"
  }, {
    "id" : "a2iqLjHU",
    "source" : "date_dim##XVM1uz2w",
    "sourcePort" : "jufATdlc",
    "target" : "Subgraph_10##pzblqig4",
    "targetPort" : "EfvURWdO"
  }, {
    "id" : "fYNSDBan",
    "source" : "Subgraph_10##pzblqig4",
    "sourcePort" : "scolMWKE",
    "target" : "Limit_3##zEotVx2v",
    "targetPort" : "yrEorB3X"
  }, {
    "id" : "ERhqboZL",
    "source" : "SQLStatement_1##FwIWKvP9",
    "sourcePort" : "iH1XIsYw",
    "target" : "Limit_4_1##DBKAQTQg",
    "targetPort" : "twxZeAku"
  }, {
    "id" : "UgwAOLHm",
    "source" : "OrderBy_2##obOwfzVw",
    "sourcePort" : "Rs6L2e60",
    "target" : "SetOperation_1##iqYolvv4",
    "targetPort" : "usqRml7D"
  }, {
    "id" : "UatA2WRd",
    "source" : "Limit_4_1##DBKAQTQg",
    "sourcePort" : "GwR9ITGy",
    "target" : "SetOperation_1##iqYolvv4",
    "targetPort" : "hHgPeQ9R"
  }, {
    "id" : "V1ryfWRC",
    "source" : "OrderBy_2##obOwfzVw",
    "sourcePort" : "Rs6L2e60",
    "target" : "SetOperation_2##QfXoji2C",
    "targetPort" : "oKAwiK8w"
  }, {
    "id" : "jBWfd4Ap",
    "source" : "SetOperation_1##iqYolvv4",
    "sourcePort" : "yg0f6rPN",
    "target" : "SetOperation_2##QfXoji2C",
    "targetPort" : "ybkObwBr"
  }, {
    "id" : "gLtJ6rqS",
    "source" : "OrderBy_2##obOwfzVw",
    "sourcePort" : "Rs6L2e60",
    "target" : "SetOperation_3##syZMeCJU",
    "targetPort" : "cRLfByNP"
  }, {
    "id" : "csbx7AaG",
    "source" : "SetOperation_2##QfXoji2C",
    "sourcePort" : "LDcfc87G",
    "target" : "SetOperation_3##syZMeCJU",
    "targetPort" : "O3w0rkJl"
  }, {
    "id" : "dfv51Erg",
    "source" : "SQLStatement_1_4##YgEL1j5u",
    "sourcePort" : "jWac3QWH",
    "target" : "SQLStatement_3_1##QMBiKexT",
    "targetPort" : "G6YLM9Yr"
  }, {
    "id" : "eF53e78o",
    "source" : "SQLStatement_3_1##QMBiKexT",
    "sourcePort" : "tH7fag0D",
    "target" : "SQLStatement_3_2##HFyWSEnu",
    "targetPort" : "m5sBk7e1"
  }, {
    "id" : "vK2AAi5F",
    "source" : "raw_customers##pI21Ldam",
    "sourcePort" : "lrYIIaYP",
    "target" : "qa_complex_macro##FyjblLRc",
    "targetPort" : "IOhersUd"
  }, {
    "id" : "JUl6NJNs",
    "source" : "qa_complex_macro##FyjblLRc",
    "sourcePort" : "j6ZVZ0Ok",
    "target" : "Reformat_1##RcSVdP8s",
    "targetPort" : "XrHCUp0S"
  }, {
    "id" : "i4Kx2t4y",
    "source" : "Reformat_1##RcSVdP8s",
    "sourcePort" : "VJABmhvi",
    "target" : "Filter_1##K3dMykOy",
    "targetPort" : "ulPpzMkw"
  }, {
    "id" : "Jjqm2dII",
    "source" : "Filter_1##K3dMykOy",
    "sourcePort" : "ViI6hxWa",
    "target" : "Limit_1##UGiQpfmj",
    "targetPort" : "C25RuDzQ"
  }, {
    "id" : "nBQZjkZD",
    "source" : "all_type_parquet##QoCzHSJp",
    "sourcePort" : "RaogFw7m",
    "target" : "Subgraph_9##TeAzZsuQ",
    "targetPort" : "cIrwjbGL"
  }, {
    "id" : "t6QGPMMs",
    "source" : "all_type_parquet##G1Ck5ydx",
    "sourcePort" : "BtIH9ere",
    "target" : "Subgraph_9##TeAzZsuQ",
    "targetPort" : "lFaXXesj"
  }, {
    "id" : "GnzxsTC6",
    "source" : "SQLStatement_3_2##HFyWSEnu",
    "sourcePort" : "JWsems7u",
    "target" : "Subgraph_9##TeAzZsuQ",
    "targetPort" : "vmbsctld"
  }, {
    "id" : "nPHwQiJw",
    "source" : "Limit_1##UGiQpfmj",
    "sourcePort" : "dT2JYace",
    "target" : "Subgraph_9##TeAzZsuQ",
    "targetPort" : "oRP3XW6M"
  }, {
    "id" : "WH2GJpNV",
    "source" : "Subgraph_9##TeAzZsuQ",
    "sourcePort" : "LFwqUFab",
    "target" : "child_deduplicat##efcnXwJ0",
    "targetPort" : "fjeoYXjl"
  }, {
    "id" : "F5osMzQw",
    "source" : "Limit_2##aBU0L71i",
    "sourcePort" : "K7EP93UR",
    "target" : "combine_multiple##cZTRlagh",
    "targetPort" : "cZyYivSu"
  }, {
    "id" : "rk5f3LD3",
    "source" : "Limit_5##co2K7iJv",
    "sourcePort" : "aQF0iwN9",
    "target" : "combine_multiple##cZTRlagh",
    "targetPort" : "oST7rrGf"
  }, {
    "id" : "PPJNUrRz",
    "source" : "child_deduplicat##efcnXwJ0",
    "sourcePort" : "nysjiKQG",
    "target" : "combine_multiple##cZTRlagh",
    "targetPort" : "bD01vuY1"
  }, {
    "id" : "FdKezKUA",
    "source" : "Limit_3##zEotVx2v",
    "sourcePort" : "F7okUe4Q",
    "target" : "combine_multiple##cZTRlagh",
    "targetPort" : "H22wdeil"
  }, {
    "id" : "JHxjxZ9o",
    "source" : "SetOperation_3##syZMeCJU",
    "sourcePort" : "XghlZEzh",
    "target" : "combine_multiple##cZTRlagh",
    "targetPort" : "EEPujDnw"
  }, {
    "id" : "qE9pUI3Q",
    "source" : "combine_multiple##cZTRlagh",
    "sourcePort" : "bveAGifc",
    "target" : "final##PC9puBBJ",
    "targetPort" : "MqG3nClj"
  } ],
  "component" : "Model"
}
{
  "id" : "uitesting_specifycolumns",
  "metainfo" : {
    "label" : "uitesting_specifycolumns",
    "autoLayout" : false,
    "staleState" : "none",
    "sourceSuggestions" : {
      "sources" : [ ]
    },
    "graphConfig" : {
      "entityConfig" : {
        "incremental_predicates" : [ "\"DBT_INTERNAL_SOURCE.c_tinyint > -10\nAND CASE\n      WHEN DBT_INTERNAL_DEST.c_struct.city IS NOT NULL\n        THEN true\n      WHEN DBT_INTERNAL_SOURCE.c_struct.pin IS NOT NULL\n        THEN false\n      WHEN DBT_INTERNAL_SOURCE.c_string NOT IN (\" ~ v_model_string_real ~ \", \" ~ var('v_project_string_real')  ~ \")\n        THEN true\n      WHEN (1 != 2)\n      or (1 < 2)\n      or (2 <= 2)\n      or (2 <=> 2)\n      or ((2 % 1.8) == 1)\n      or (to_date('2009-07-30 04:17:52') < to_date('2009-07-30 04:17:52'))\n      or (add_months('2016-08-31', 1) < add_months('2017-08-31', 3))\n      or (true and false)\n      or array_contains(array_distinct(array(1, 2, 3)), 2)\n      or array_contains(array_except(array(1, 2, 3), array(1, 3, 5)), 2)\n      or array_contains(array_intersect(array(1, 2, 3), array(1, 3, 5)), 10)\n      or (array_join(array('hello', 'world'), ' ', ',') LIKE '%hello%')\n      or (array_max(array(1, 20, 3)) > 10)\n      or (array_min(array(1, 20, 3)) > 20)\n      or array_contains(array_remove(array(1, 2, 3, 3), 3), 3)\n      or array_contains(array_repeat(5, 2), 6)\n      or array_contains(array_union(array(1, 2, 3), array(1, 3, 5)), 10)\n      or arrays_overlap(array(1, 2, 3), array(3, 4, 5))\n      or (10 BETWEEN 2 AND 20)\n      or contains('Spark SQL', 'Spark')\n      or endswith('Spark SQL', 'SQL')\n      or (\n           EXISTS(\n             array(1, 2, 3), \n             x -> x % 2 == 0)\n         )\n      or array_contains(filter(\n           array(1, 2, 3), \n           x -> x % 2 == 1), 5)\n      or array_contains(flatten(array(array(1, 2), array(3, 4))), 10)\n      or forall(\n           array(1, 2, 3), \n           x -> x % 2 == 0)\n      or ilike('Spark', '_Park')\n      or (1 IN (2, 3, 4))\n      or (isnan(CAST('NaN' AS double)))\n      or isnotnull(1)\n      or isnull(1)\n      or array_contains(json_object_keys('{\\\"key\\\": \\\"value\\\"}'), 'key1')\n      or like('Spark', '_park')\n      or map_contains_key(map(1, 'a', 2, 'b'), 1)\n      or map_contains_key(map_concat(map(1, 'a', 2, 'b'), map(3, 'c')), 4)\n      or map_contains_key(map_filter(\n           map(1, 0, 2, 2, 3, -1), \n           (k, v) -> k > v), 3)\n      or map_contains_key(map_from_arrays(array(1.0, 3.0), array('2', '4')), 2)\n      or map_contains_key(map_from_entries(array(struct(1, 'a'), struct(2, 'b'))), 1)\n      or array_contains(map_keys(map(1, 'a', 2, 'b')), 2)\n      or array_contains(map_values(map(1, 'a', 2, 'b')), 'a')\n      or map_contains_key(map_zip_with(\n           map(1, 'a', 2, 'b'), \n           map(1, 'x', 2, 'y'), \n           (k, v1, v2) -> concat(v1, v2)), 1)\n      or (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\n      or (NOT true)\n      or array_contains(regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1), '100')\n      or array_contains(sequence(1, 5), 4)\n      or array_contains(shuffle(array(1, 20, 3, 5)), 10)\n      or array_contains(slice(array(1, 2, 3, 4), 2, 2), 4)\n      or array_contains(sort_array(array('b', 'd', 'c', 'a'), true), 'b')\n      or array_contains(split('oneAtwoBthreeC', '[ABC]'), 'one')\n      or startswith('Spark SQL', 'Spark')\n      or map_contains_key(str_to_map('a:1,b:2,c:3', ',', ':'), 'a')\n      or array_contains(transform(\n           array(1, 2, 3), \n           x -> x + 1), 1)\n      or map_contains_key(transform_keys(\n           map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n           (k, v) -> k + 1), 1)\n      or map_contains_key(transform_values(\n           map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n           (k, v) -> v + 1), 2)\n      or array_contains(xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()'), 'a')\n      or xpath_boolean('<a><b>1</b></a>', 'a/b')\n      or array_contains(zip_with(\n           array(1, 2), \n           array(3, 4), \n           (x, y) -> x + y), 1) IS NULL = true != true != false != true != true > 1100\n        THEN true\n      WHEN (\n        (1 != 2)\n        OR (1 < 2)\n        OR (2 <= 2)\n        OR (2 <=> 2)\n        OR ((2 % 1.8) == 1)\n        OR (to_date('2009-07-30 04:17:52') < to_date('2009-07-30 04:17:52'))\n        OR (add_months('2016-08-31', 1) < add_months('2017-08-31', 3))\n        OR (true AND false)\n        OR array_contains(array_distinct(array(1, 2, 3)), 2)\n        OR array_contains(array_except(array(1, 2, 3), array(1, 3, 5)), 2)\n        OR array_contains(array_intersect(array(1, 2, 3), array(1, 3, 5)), 10)\n        OR (array_join(array('hello', 'world'), ' ', ',') LIKE '%hello%')\n        OR (array_max(array(1, 20, 3)) > 10)\n        OR (array_min(array(1, 20, 3)) > 20)\n        OR array_contains(array_remove(array(1, 2, 3, 3), 3), 3)\n        OR array_contains(array_repeat(5, 2), 6)\n        OR array_contains(array_union(array(1, 2, 3), array(1, 3, 5)), 10)\n        OR arrays_overlap(array(1, 2, 3), array(3, 4, 5))\n        OR (10 BETWEEN 2 AND 20)\n        OR contains('Spark SQL', 'Spark')\n        OR endswith('Spark SQL', 'SQL')\n        OR (\n             EXISTS(\n               array(1, 2, 3), \n               x -> x % 2 == 0)\n           )\n        OR array_contains(filter(\n             array(1, 2, 3), \n             x -> x % 2 == 1), 5)\n        OR array_contains(flatten(array(array(1, 2), array(3, 4))), 10)\n        OR forall(\n             array(1, 2, 3), \n             x -> x % 2 == 0)\n        OR ilike('Spark', '_Park')\n        OR (1 IN (2, 3, 4))\n        OR (isnan(CAST('NaN' AS double)))\n        OR isnotnull(1)\n        OR isnull(1)\n        OR array_contains(json_object_keys('{\\\"key\\\": \\\"value\\\"}'), 'key1')\n        OR like('Spark', '_park')\n        OR map_contains_key(map(1, 'a', 2, 'b'), 1)\n        OR map_contains_key(map_concat(map(1, 'a', 2, 'b'), map(3, 'c')), 4)\n        OR map_contains_key(map_filter(\n             map(1, 0, 2, 2, 3, -1), \n             (k, v) -> k > v), 3)\n        OR map_contains_key(map_from_arrays(array(1.0, 3.0), array('2', '4')), 2)\n        OR map_contains_key(map_from_entries(array(struct(1, 'a'), struct(2, 'b'))), 1)\n        OR array_contains(map_keys(map(1, 'a', 2, 'b')), 2)\n        OR array_contains(map_values(map(1, 'a', 2, 'b')), 'a')\n        OR map_contains_key(map_zip_with(\n             map(1, 'a', 2, 'b'), \n             map(1, 'x', 2, 'y'), \n             (k, v1, v2) -> concat(v1, v2)), 1)\n        OR (named_struct('a', 1, 'b', 2) IN (named_struct('a', 1, 'b', 1), named_struct('a', 1, 'b', 3)))\n        OR (NOT true)\n        OR array_contains(regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1), '100')\n        OR array_contains(sequence(1, 5), 4)\n        OR array_contains(shuffle(array(1, 20, 3, 5)), 10)\n        OR array_contains(slice(array(1, 2, 3, 4), 2, 2), 4)\n        OR array_contains(sort_array(array('b', 'd', 'c', 'a'), true), 'b')\n        OR array_contains(split('oneAtwoBthreeC', '[ABC]'), 'one')\n        OR startswith('Spark SQL', 'Spark')\n        OR map_contains_key(str_to_map('a:1,b:2,c:3', ',', ':'), 'a')\n        OR array_contains(transform(\n             array(1, 2, 3), \n             x -> x + 1), 1)\n        OR map_contains_key(transform_keys(\n             map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n             (k, v) -> k + 1), 1)\n        OR map_contains_key(transform_values(\n             map_from_arrays(array(1, 2, 3), array(1, 2, 3)), \n             (k, v) -> v + 1), 2)\n        OR array_contains(xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()'), 'a')\n        OR xpath_boolean('<a><b>1</b></a>', 'a/b')\n        OR array_contains(zip_with(\n             array(1, 2), \n             array(3, 4), \n             (x, y) -> x + y), 1) IS NULL = true != true != false != true != true\n      ) IS NOT NULL\n        THEN true\n      ELSE false\n    END\"" ],
        "materialized" : "incremental",
        "on_schema_change" : "'sync_all_columns'",
        "merge_update_columns" : [ "'c_tinyint'", "'c_smallint'", "'c_int'" ],
        "unique_key" : [ "'c_id'" ],
        "incremental_strategy" : "'merge'",
        "type" : "ModelConfig"
      },
      "userDefinedConfig" : {
        "vars" : {
          "v_model_int_real" : "22",
          "v_model_string_real" : "\"modelstr\""
        }
      }
    },
    "version" : 3
  },
  "processes" : {
    "all_type_non_partitioned_1##p4tdrBnz" : {
      "id" : "all_type_non_partitioned_1##p4tdrBnz",
      "component" : "Source",
      "metadata" : {
        "label" : "all_type_non_partitioned_1",
        "x" : 20,
        "y" : 20,
        "phase" : 0
      },
      "properties" : {
        "table" : {
          "name" : "all_type_non_partitioned",
          "sourceType" : "Source",
          "sourceName" : "hive_metastore.qa_database"
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "zpC0nj2f",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "all_type_non_partitioned_columns##IahbvI1A" : {
      "id" : "all_type_non_partitioned_columns##IahbvI1A",
      "component" : "Reformat",
      "metadata" : {
        "label" : "all_type_non_partitioned_columns",
        "x" : 220,
        "y" : 20,
        "phase" : 0,
        "macroDependencies" : [ ],
        "comment" : "Retrieves a comprehensive dataset of various data types for analysis."
      },
      "properties" : {
        "columnsSelector" : [ "D5AB8Dyg##c_tinyint", "D5AB8Dyg##c_smallint", "D5AB8Dyg##c_int", "D5AB8Dyg##c_bigint", "D5AB8Dyg##c_float", "D5AB8Dyg##c_double", "D5AB8Dyg##c_string", "D5AB8Dyg##c_boolean", "D5AB8Dyg##c_array", "D5AB8Dyg##c_struct" ],
        "expressions" : [ {
          "expression" : {
            "expression" : "c_tinyint"
          },
          "alias" : "c_tinyint"
        }, {
          "expression" : {
            "expression" : "c_smallint"
          },
          "alias" : "c_smallint"
        }, {
          "expression" : {
            "expression" : "c_int"
          },
          "alias" : "c_int"
        }, {
          "expression" : {
            "expression" : "c_bigint"
          },
          "alias" : "c_bigint"
        }, {
          "expression" : {
            "expression" : "c_float"
          },
          "alias" : "c_float"
        }, {
          "expression" : {
            "expression" : "c_double"
          },
          "alias" : "c_double"
        }, {
          "expression" : {
            "expression" : "c_string"
          },
          "alias" : "c_string"
        }, {
          "expression" : {
            "expression" : "c_boolean"
          },
          "alias" : "c_boolean"
        }, {
          "expression" : {
            "expression" : "c_array"
          },
          "alias" : "c_array"
        }, {
          "expression" : {
            "expression" : "c_struct"
          },
          "alias" : "c_struct"
        }, {
          "expression" : {
            "expression" : "monotonically_increasing_id()"
          },
          "alias" : "c_id"
        }, {
          "expression" : {
            "expression" : "CURRENT_DATE"
          },
          "alias" : "c_date"
        }, {
          "expression" : {
            "expression" : "CURRENT_TIMESTAMP()"
          },
          "alias" : "c_timestamp"
        } ]
      },
      "ports" : {
        "inputs" : [ {
          "id" : "D5AB8Dyg",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "DVzLoPnF",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    },
    "uitesting_specifycolumns##c7XO27YD" : {
      "id" : "uitesting_specifycolumns##c7XO27YD",
      "component" : "TargetModel",
      "metadata" : {
        "label" : "uitesting_specifycolumns",
        "x" : 420,
        "y" : 20,
        "phase" : 0,
        "macroDependencies" : [ ],
        "comment" : "Retrieves all data from a table containing various types of non-partitioned columns.",
        "autoUpdateComment" : true
      },
      "properties" : {
        "customQueryDisabled" : true,
        "customQuery" : false,
        "incrementalEditorDisabled" : true,
        "query" : "SELECT * \n\nFROM all_type_non_partitioned_columns\n",
        "incrementalKey" : false,
        "incremental" : {
          "expression" : "true"
        }
      },
      "ports" : {
        "inputs" : [ {
          "id" : "fHCeTI7o",
          "slug" : "all_type_non_partitioned_columns"
        } ],
        "outputs" : [ {
          "id" : "PMybgZ57",
          "slug" : "out"
        } ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      }
    }
  },
  "connections" : [ {
    "id" : "ZBMXcHVk",
    "source" : "all_type_non_partitioned_1##p4tdrBnz",
    "sourcePort" : "zpC0nj2f",
    "target" : "all_type_non_partitioned_columns##IahbvI1A",
    "targetPort" : "D5AB8Dyg"
  }, {
    "id" : "b16o9KWd",
    "source" : "all_type_non_partitioned_columns##IahbvI1A",
    "sourcePort" : "DVzLoPnF",
    "target" : "uitesting_specifycolumns##c7XO27YD",
    "targetPort" : "fHCeTI7o"
  } ],
  "component" : "Model"
}